1
00:00:00,049 --> 00:00:04,660
I know every like thank you so much for
coming I know it's a beautiful a

2
00:00:04,660 --> 00:00:07,930
Montreal the outside and the snow is
melted but

3
00:00:07,930 --> 00:00:11,900
thank you for coming into this room it's
my pleasure to introduce

4
00:00:11,900 --> 00:00:16,150
I Jesse Davis and his talk on what is he
saying

5
00:00:16,150 --> 00:00:19,449
how does it work and when should I use
it a round of applause place

6
00:00:19,449 --> 00:00:26,449
hi everybody thanks

7
00:00:26,650 --> 00:00:29,960
so this talk is going to be something
more like

8
00:00:29,960 --> 00:00:33,880
arm what is a sink when should I use it

9
00:00:33,880 --> 00:00:36,989
and how does it work or perhaps

10
00:00:36,989 --> 00:00:40,809
and different arm ordering up that the
talk itself will be assertive

11
00:00:40,809 --> 00:00:45,320
is synchronous so up

12
00:00:45,320 --> 00:00:51,250
oh you guys liked that on some intense
Jesse Davis at work for Mongo dB in New

13
00:00:51,250 --> 00:00:52,100
York City

14
00:00:52,100 --> 00:00:55,660
and as you probably know in New York we
eat

15
00:00:55,660 --> 00:01:00,050
three kinds of food we eat summer in
sandwiches

16
00:01:00,050 --> 00:01:04,549
pizza by the slice and almocar say which
is

17
00:01:04,549 --> 00:01:08,920
a Japanese word for something like you
go ahead and shoes

18
00:01:08,920 --> 00:01:11,990
it's when you go to a sushi restaurant

19
00:01:11,990 --> 00:01:15,600
and they just give you whatever is good
that day so

20
00:01:15,600 --> 00:01:21,000
New York as a crowded place and %ah each
of these kinds of food has

21
00:01:21,000 --> 00:01:24,049
a different arm bottleneck

22
00:01:24,049 --> 00:01:27,890
as a trust to scale out to a very large
number I love

23
00:01:27,890 --> 00:01:31,210
clients for example with

24
00:01:31,210 --> 00:01:35,329
summary in sandwiches it starts off you
go to the counter

25
00:01:35,329 --> 00:01:39,960
and a sandwich maker comes under the
sandwich maker pool

26
00:01:39,960 --> 00:01:43,299
and you tell the sandwich maker what
kind of sandwich you want

27
00:01:43,299 --> 00:01:47,240
on but kinda bread work Adam ingredients
and you have to this

28
00:01:47,240 --> 00:01:50,649
one-on-one synchronous interaction

29
00:01:50,649 --> 00:01:54,560
that lasts for the duration love your
request

30
00:01:54,560 --> 00:01:57,659
so until the sandwich is complete

31
00:01:57,659 --> 00:02:01,509
the sandwich maker doesn't take a break
doesn't talk to different clients

32
00:02:01,509 --> 00:02:06,649
on that sandwich makers devoted to you
in till the sandwich is complete and you

33
00:02:06,649 --> 00:02:07,469
walk away with it

34
00:02:07,469 --> 00:02:12,190
on at that point the sandwich maker
returns to the sandwich maker pool

35
00:02:12,190 --> 00:02:15,790
Intel another client pops of love the
eater cue

36
00:02:15,790 --> 00:02:20,940
so the analogy that are making here is
for a

37
00:02:20,940 --> 00:02:25,090
a CPU bound Weber service

38
00:02:25,090 --> 00:02:28,650
on something that might
cryptographically sign your request

39
00:02:28,650 --> 00:02:31,700
for something like that on in Dec hits

40
00:02:31,700 --> 00:02:35,379
I you can scale out by either

41
00:02:35,379 --> 00:02:38,620
making the sandwich maker faster by

42
00:02:38,620 --> 00:02:42,510
say arranging the ingredients more
efficiently or you might add more

43
00:02:42,510 --> 00:02:43,650
sandwich makers

44
00:02:43,650 --> 00:02:47,660
until the space behind the counter is
fall so this is like

45
00:02:47,660 --> 00:02:51,099
you can add faster CPUs or

46
00:02:51,099 --> 00:02:55,650
you can add more prostheses Intel you
have this many prostheses

47
00:02:55,650 --> 00:02:59,159
as you have cores but thats

48
00:02:59,159 --> 00:03:02,349
it on you don't want concurrency here

49
00:03:02,349 --> 00:03:06,459
it would make sense for the sandwich
maker to be switching between

50
00:03:06,459 --> 00:03:10,709
different clients and try to make
multiple sandwiches at once so this is

51
00:03:10,709 --> 00:03:11,390
like

52
00:03:11,390 --> 00:03:14,730
a a CPU bound webservice

53
00:03:14,730 --> 00:03:17,739
that doesn't request any external assets

54
00:03:17,739 --> 00:03:23,120
in order to satisfy client request
there's no need for a saint here

55
00:03:23,120 --> 00:03:27,709
each process should just handle a single
cloud requested the time

56
00:03:27,709 --> 00:03:31,019
from start to finish without doing any
context switches

57
00:03:31,019 --> 00:03:34,620
answer this is when not to use a sink

58
00:03:34,620 --> 00:03:38,200
don't use a sink for sups a but

59
00:03:38,200 --> 00:03:41,530
different kinds food have different
scaling properties so

60
00:03:41,530 --> 00:03:44,920
what about Pizza it starts the same as
subs

61
00:03:44,920 --> 00:03:48,540
you go n and the pizza cook

62
00:03:48,540 --> 00:03:52,920
appears and you ask the cook for a
particular slice

63
00:03:52,920 --> 00:03:56,200
a pizza the slices are already

64
00:03:56,200 --> 00:03:59,549
made but their serve lukewarm so

65
00:03:59,549 --> 00:04:03,780
the cook Texas less and puts it in the
oven and

66
00:04:03,780 --> 00:04:07,260
for the two minutes it takes for the
slice to

67
00:04:07,260 --> 00:04:10,400
keyed up you both standing around idly

68
00:04:10,400 --> 00:04:13,700
in till the slices hot to cook gives you
a slice

69
00:04:13,700 --> 00:04:17,060
and you walk away with it so

70
00:04:17,060 --> 00:04:20,310
in this case I how do you scale-out

71
00:04:20,310 --> 00:04:24,500
the pizza cook how do you deal with
multiple clients

72
00:04:24,500 --> 00:04:27,639
showing up there once here

73
00:04:27,639 --> 00:04:32,280
you wouldn't want the pizza cook to act
like a sandwich maker

74
00:04:32,280 --> 00:04:36,400
you don't want to cook to address a
single client

75
00:04:36,400 --> 00:04:41,210
and then stand around idly for two
minutes into the size has hired

76
00:04:41,210 --> 00:04:44,860
then give it to that client and then ask
next client hate what kinda slow steal

77
00:04:44,860 --> 00:04:46,470
one

78
00:04:46,470 --> 00:04:50,710
if you had to devote a single pizza cook
to each client

79
00:04:50,710 --> 00:04:53,750
you'd run out of space behind the
counter before you run out of space

80
00:04:53,750 --> 00:04:55,380
behind other

81
00:04:55,380 --> 00:04:58,580
so a the analogy that I'm trying to make
here

82
00:04:58,580 --> 00:05:01,699
years I'm trying to say that the cook

83
00:05:01,699 --> 00:05:06,360
ought to be a sink the cook should
respond to events as they occur

84
00:05:06,360 --> 00:05:10,710
so its clients arrived the coke asks
each one what kind of slows to they want

85
00:05:10,710 --> 00:05:14,919
and as slices become hot in the %uh been

86
00:05:14,919 --> 00:05:19,960
the quick response to that event and it
gives the hot sliced to the client

87
00:05:19,960 --> 00:05:24,530
on and in that way 10 or a couple

88
00:05:24,530 --> 00:05:29,979
cooks should be able to serve a very
large number of concurrent clients

89
00:05:29,979 --> 00:05:33,509
um now

90
00:05:33,509 --> 00:05:38,160
the one that problem that the cook is
going to experience is that

91
00:05:38,160 --> 00:05:42,770
are with lots of concurrent clients are
asking for slices and lots of slices in

92
00:05:42,770 --> 00:05:43,850
the other end

93
00:05:43,850 --> 00:05:46,860
the Cook is not going to need some kind
of

94
00:05:46,860 --> 00:05:51,060
demonic for remembering how long each
slice has been and what client it

95
00:05:51,060 --> 00:05:52,539
belongs to him

96
00:05:52,539 --> 00:05:57,090
so this is sort of like a regular old
web service

97
00:05:57,090 --> 00:06:00,120
that has a big slow back and

98
00:06:00,120 --> 00:06:03,830
like a database or and of provider

99
00:06:03,830 --> 00:06:06,919
arm here a sink is

100
00:06:06,919 --> 00:06:12,150
a great idea for scaling because a
couple of processes can handle

101
00:06:12,150 --> 00:06:15,710
hey large number of clients with many

102
00:06:15,710 --> 00:06:21,440
concurrent I O operations but you're
going to need some way to stores stayed

103
00:06:21,440 --> 00:06:26,530
well each operation is in flight the
same as the cooking it's to remember

104
00:06:26,530 --> 00:06:31,080
which slice coast which client and how
long it's been in the oven

105
00:06:31,080 --> 00:06:34,330
now this is even more true I love

106
00:06:34,330 --> 00:06:39,410
a mukasey on or actually I just learned
that it's probably pronounced

107
00:06:39,410 --> 00:06:43,610
our Marcus a but anyway on the way works
is

108
00:06:43,610 --> 00:06:47,130
you and your friends you all go up to
the counter

109
00:06:47,130 --> 00:06:50,130
and the waiter tells the kitchen

110
00:06:50,130 --> 00:06:53,699
a bunch of people arrived and that's it

111
00:06:53,699 --> 00:06:57,819
the kitchen starts making sushi whatever
is good that day

112
00:06:57,819 --> 00:07:00,830
and as the sushi becomes complete

113
00:07:00,830 --> 00:07:05,340
the waiter ferries each dish to the
clients at the counter

114
00:07:05,340 --> 00:07:10,139
on once again you don't want a waiter
devoted to each client

115
00:07:10,139 --> 00:07:13,180
because school run out of space behind
the counter

116
00:07:13,180 --> 00:07:17,039
instead you should have one waiter or
small number of waiters

117
00:07:17,039 --> 00:07:20,660
core event-driven who notice clients
arriving

118
00:07:20,660 --> 00:07:25,599
and no to sushi becoming ready and are
able to multi-task

119
00:07:25,599 --> 00:07:30,240
and upscale out that way up to the
limits of the kitchens ability to

120
00:07:30,240 --> 00:07:31,840
produce sushi

121
00:07:31,840 --> 00:07:36,039
and this is like a WebSocket newfangled
application

122
00:07:36,039 --> 00:07:39,190
where clients connect over WebSockets

123
00:07:39,190 --> 00:07:42,240
and awaits server-side events

124
00:07:42,240 --> 00:07:45,810
so if you log into Gmail for example

125
00:07:45,810 --> 00:07:50,940
your browser opens a WebSocket
connection to one of Google's servers

126
00:07:50,940 --> 00:07:54,349
and then nothing happens the

127
00:07:54,349 --> 00:07:57,770
connection remains idle Intel

128
00:07:57,770 --> 00:08:00,990
a new email arrives for you on the
server

129
00:08:00,990 --> 00:08:04,849
and then the server notifies you over
the WebSocket connection and your

130
00:08:04,849 --> 00:08:06,930
browser updates itself

131
00:08:06,930 --> 00:08:11,270
arm if Google's servers were to devote

132
00:08:11,270 --> 00:08:16,000
a thread for every client connection
they would quickly be overwhelmed by the

133
00:08:16,000 --> 00:08:17,060
number of threads

134
00:08:17,060 --> 00:08:21,440
that they had to support because
WebSocket connections are very long

135
00:08:21,440 --> 00:08:25,110
lipset has a very large number of them
concurrently

136
00:08:25,110 --> 00:08:28,830
art for WebSocket applications in
particular

137
00:08:28,830 --> 00:08:33,890
it's critical to minimize the resources
devoted to idle connections

138
00:08:33,890 --> 00:08:37,399
so this is what a sank is for

139
00:08:37,399 --> 00:08:41,099
it minimizes resources per idle
connection

140
00:08:41,099 --> 00:08:44,740
while you're waiting for some event to
occur and

141
00:08:44,740 --> 00:08:49,070
the main resource that you need to
conserve

142
00:08:49,070 --> 00:08:52,100
is memory so we typically say

143
00:08:52,100 --> 00:08:56,220
that a synchronous applications are not
CPU limited

144
00:08:56,220 --> 00:08:59,640
but memory downed and that the challenge

145
00:08:59,640 --> 00:09:04,920
is to our store per connection state as
efficiently as possible

146
00:09:04,920 --> 00:09:11,750
the on influential paper on this topic
is called C 10k

147
00:09:11,750 --> 00:09:15,320
its by a guy named Dan key goal

148
00:09:15,320 --> 00:09:19,600
or cable and the papers better ten years
old

149
00:09:19,600 --> 00:09:23,450
but it's still a really good read on it
starts off

150
00:09:23,450 --> 00:09:27,839
a sissy 10k is the term that he Quoin 24

151
00:09:27,839 --> 00:09:31,800
10,000 concurrent connections and

152
00:09:31,800 --> 00:09:37,100
the paper starts off it's time for web
servers to handle 10,000 clients

153
00:09:37,100 --> 00:09:40,399
simultaneously don't you think after all

154
00:09:40,399 --> 00:09:43,870
the web is a big place now and

155
00:09:43,870 --> 00:09:48,690
he goes on to say that perhaps in the
not too distant future

156
00:09:48,690 --> 00:09:51,800
those who prefer using one thread per
client

157
00:09:51,800 --> 00:09:56,320
will be able to use that paradigm even
for 10,000 clients

158
00:09:56,320 --> 00:10:00,580
nevertheless at the current time if you
actually want to support

159
00:10:00,580 --> 00:10:05,440
that many clients you're probably better
off using some other paradigms

160
00:10:05,440 --> 00:10:09,140
so the orders have magnitude might have
changed

161
00:10:09,140 --> 00:10:12,560
in maybe that a a hundred thousand

162
00:10:12,560 --> 00:10:15,790
that yet maybe ten thousand threads is
supportable now

163
00:10:15,790 --> 00:10:19,690
but I 100000 is not I but the principle
remains

164
00:10:19,690 --> 00:10:22,730
that if you devote a thread per socket

165
00:10:22,730 --> 00:10:26,420
you'll run out of resources for
representing those threads

166
00:10:26,420 --> 00:10:30,630
first and artificially limit your
ability to hold sockets

167
00:10:30,630 --> 00:10:34,250
open so if

168
00:10:34,250 --> 00:10:37,320
arm if it sink is so great

169
00:10:37,320 --> 00:10:41,149
and if the kind of web applications that
demand a sink

170
00:10:41,149 --> 00:10:44,459
are increasingly common then

171
00:10:44,459 --> 00:10:48,399
why is multi-threading still the
conventional approach wires and

172
00:10:48,399 --> 00:10:50,250
everything already a sink

173
00:10:50,250 --> 00:10:54,890
and um I think that the answer is that
it's hard it's hard to code

174
00:10:54,890 --> 00:10:58,149
and the reason why it's hard is because

175
00:10:58,149 --> 00:11:02,000
when you're waiting for some venture to
occur

176
00:11:02,000 --> 00:11:05,750
on a connection you need to remember
what you're going to do when that event

177
00:11:05,750 --> 00:11:06,480
happens

178
00:11:06,480 --> 00:11:11,070
you need to store state so when a client
request comes in

179
00:11:11,070 --> 00:11:14,579
and the server makes a related request
to the back and

180
00:11:14,579 --> 00:11:17,860
in needs to stores stay are so that'd

181
00:11:17,860 --> 00:11:21,250
remembers what it was going to do when
the back and response and

182
00:11:21,250 --> 00:11:26,480
this is even more true I love newfangled
WebSocket applications

183
00:11:26,480 --> 00:11:29,820
because in those applications

184
00:11:29,820 --> 00:11:33,370
the wat he is indefinitely long

185
00:11:33,370 --> 00:11:37,160
when you visit gmail you don't know how
long it's going to be before a new email

186
00:11:37,160 --> 00:11:38,110
arrives

187
00:11:38,110 --> 00:11:41,720
so it's even more critical to
efficiently represent that state while

188
00:11:41,720 --> 00:11:44,140
waiting for something to happen

189
00:11:44,140 --> 00:11:47,339
and the conventional way to store state

190
00:11:47,339 --> 00:11:52,269
here's with a thread and with threats
you don't really have to think about

191
00:11:52,269 --> 00:11:55,959
how do I store state with a thread
because

192
00:11:55,959 --> 00:12:01,529
it's done for you threads store their
state with the program counter

193
00:12:01,529 --> 00:12:05,149
with the stack and the local variables

194
00:12:05,149 --> 00:12:09,750
in the current stack frame the operating
system and the programming language

195
00:12:09,750 --> 00:12:14,630
handle it for you and your use to that
kind of programming model

196
00:12:14,630 --> 00:12:18,240
is sick applications usually use call
backs

197
00:12:18,240 --> 00:12:22,600
or some other a representation besides

198
00:12:22,600 --> 00:12:26,700
threads for storing state while they're
waiting for an event

199
00:12:26,700 --> 00:12:30,950
and call backs whether more efficient
and threads

200
00:12:30,950 --> 00:12:34,089
we're not used to using them and they're
not

201
00:12:34,089 --> 00:12:37,800
are designed to be easy for this kind
abuse case

202
00:12:37,800 --> 00:12:42,149
so it's much harder to keep track I love
what you're doing

203
00:12:42,149 --> 00:12:46,990
on because threats and call backs
represent is too extreme a

204
00:12:46,990 --> 00:12:50,740
I love efficiency versus easy views
there are

205
00:12:50,740 --> 00:12:55,050
a bunch of middle grounds that have been
staked out in between the two

206
00:12:55,050 --> 00:12:58,519
so there are covert ans which are

207
00:12:58,519 --> 00:13:02,800
incredibly important and L again and
beautiful and awesome and we don't have

208
00:13:02,800 --> 00:13:05,200
time to talk about them today so

209
00:13:05,200 --> 00:13:08,570
are BB the exercise for the reader

210
00:13:08,570 --> 00:13:12,639
there also agree lets which is what she
event is based on which are

211
00:13:12,639 --> 00:13:16,700
a little bit more like threads then
cover teens are

212
00:13:16,700 --> 00:13:20,089
and on and on and on and the fact that
we keep

213
00:13:20,089 --> 00:13:27,089
arm innovating in this area and making
up new terms for slight variations on

214
00:13:27,430 --> 00:13:28,420
this theme

215
00:13:28,420 --> 00:13:31,980
love I'm representing state in

216
00:13:31,980 --> 00:13:35,940
a synchronous applications it suggests
to me that

217
00:13:35,940 --> 00:13:39,610
no one love these techniques satisfies

218
00:13:39,610 --> 00:13:43,440
everybody yet and so this is still kinda
for

219
00:13:43,440 --> 00:13:47,880
alive hand developing area of research
so

220
00:13:47,880 --> 00:13:51,560
are expect new are some things in this
area

221
00:13:51,560 --> 00:13:55,089
but on

222
00:13:55,089 --> 00:13:58,320
okay but so we've covered

223
00:13:58,320 --> 00:14:01,550
to some extent when should I use it

224
00:14:01,550 --> 00:14:04,940
and we'll come back to that at the end
again

225
00:14:04,940 --> 00:14:08,750
but we can start to define what it is
now

226
00:14:08,750 --> 00:14:12,060
and what a sink is is

227
00:14:12,060 --> 00:14:17,510
on single-threaded sir can to concurrent
computation

228
00:14:17,510 --> 00:14:21,160
but it can do I owe concurrency so is
single-threaded

229
00:14:21,160 --> 00:14:26,570
a sink framework can have many i/o
operations in flight simultaneously it

230
00:14:26,570 --> 00:14:29,550
can be waiting for many things at once

231
00:14:29,550 --> 00:14:33,740
it uses non-blocking sockets and we'll
see what that means

232
00:14:33,740 --> 00:14:37,290
in a few minutes and it uses some

233
00:14:37,290 --> 00:14:41,139
platform-specific facility to

234
00:14:41,139 --> 00:14:45,769
are register for event notifications on
those non-blocking sockets

235
00:14:45,769 --> 00:14:51,930
on latex its the poll on Mac in BSD it's
called KQ

236
00:14:51,930 --> 00:14:56,149
on and the final thing about a sink is
that it uses an event loop

237
00:14:56,149 --> 00:15:00,510
to continuously process new event
notifications

238
00:15:00,510 --> 00:15:03,550
and dispatch this offense to

239
00:15:03,550 --> 00:15:06,670
arm event handlers

240
00:15:06,670 --> 00:15:11,709
which are usually call backs but which
might also be covered hymns and so on

241
00:15:11,709 --> 00:15:15,430
so when a random person says

242
00:15:15,430 --> 00:15:19,360
a sink to you this may or may not be
what that person means but

243
00:15:19,360 --> 00:15:24,089
this is my definition have a sank and
when somebody says that

244
00:15:24,089 --> 00:15:27,959
node or tornado or twisted or tulip

245
00:15:27,959 --> 00:15:31,000
is a sink they mean that

246
00:15:31,000 --> 00:15:34,180
those frameworks conform to

247
00:15:34,180 --> 00:15:38,389
this definition Service Inc so

248
00:15:38,389 --> 00:15:41,480
thats a sink in general that's the

249
00:15:41,480 --> 00:15:45,220
general programming methodology that we
call a sank

250
00:15:45,220 --> 00:15:48,370
and now I'm going to switch to a

251
00:15:48,370 --> 00:15:51,790
specific library called

252
00:15:51,790 --> 00:15:57,490
a sync i/o which is wanna implementation
up this general idea

253
00:15:57,490 --> 00:16:01,370
so know D is another implementation so
are

254
00:16:01,370 --> 00:16:04,600
tornado and twisted on

255
00:16:04,600 --> 00:16:08,959
that is a year and a half ago guidos
started working on it

256
00:16:08,959 --> 00:16:12,440
a knew it a sink from work called tulip

257
00:16:12,440 --> 00:16:17,490
at the time and that was the subject of
his keynote at last year's spike on

258
00:16:17,490 --> 00:16:20,699
I'm since that time it's been renamed

259
00:16:20,699 --> 00:16:24,480
a Cinco it's been merged into the
standard library

260
00:16:24,480 --> 00:16:28,100
we'd overloaded with help from like a
dozen people

261
00:16:28,100 --> 00:16:31,779
I including be I'm super excited and
proud of that

262
00:16:31,779 --> 00:16:35,199
on the a

263
00:16:35,199 --> 00:16:39,139
justification and specification

264
00:16:39,139 --> 00:16:42,310
for iti a sync i/o standard library
Marshall

265
00:16:42,310 --> 00:16:45,320
is in PEP 3156 which

266
00:16:45,320 --> 00:16:49,620
is a surprisingly good read and it
defines

267
00:16:49,620 --> 00:16:52,889
on both the standard event loop
interface

268
00:16:52,889 --> 00:16:57,130
and it also talks about career teens but
again we don't have time to talk to Kurt

269
00:16:57,130 --> 00:16:58,740
himself

270
00:16:58,740 --> 00:17:02,410
on deal with that yours yourself up

271
00:17:02,410 --> 00:17:06,169
art so we're going to build

272
00:17:06,169 --> 00:17:11,260
an example application on top I love a
sync i/o

273
00:17:11,260 --> 00:17:14,660
and up the first thing we need to do is
just kinda like

274
00:17:14,660 --> 00:17:18,069
look at a little screencast that I
recorded

275
00:17:18,069 --> 00:17:21,770
love this thing in action so we know
what it is we're building

276
00:17:21,770 --> 00:17:25,250
and you can see

277
00:17:25,250 --> 00:17:29,429
the its very standard there's nothing
special about this

278
00:17:29,429 --> 00:17:33,010
its just the stereotypical

279
00:17:33,010 --> 00:17:36,980
chat application these are two browser
windows

280
00:17:36,980 --> 00:17:40,690
that connect to the same server over
WebSocket

281
00:17:40,690 --> 00:17:43,929
and when one I love the

282
00:17:43,929 --> 00:17:47,480
clients sends a message over the
WebSocket the server

283
00:17:47,480 --> 00:17:50,549
rebroadcast said to all the other
connected clients

284
00:17:50,549 --> 00:17:54,169
real straight for nothing special so

285
00:17:54,169 --> 00:17:58,730
on all a Cinco applications are kind of
build

286
00:17:58,730 --> 00:18:02,039
using the same set I love

287
00:18:02,039 --> 00:18:06,539
layers there's the application itself at
the top

288
00:18:06,539 --> 00:18:10,730
and the application uses a pair

289
00:18:10,730 --> 00:18:14,710
I love arm abstractions to actually do
the work

290
00:18:14,710 --> 00:18:19,350
and the pair is a protocol and a
transport

291
00:18:19,350 --> 00:18:25,289
this is a on and abstraction that was
defined by a sync i/o

292
00:18:25,289 --> 00:18:29,490
it was heavily inspired by twisted stirs
I'm

293
00:18:29,490 --> 00:18:34,059
and the distinction is that 8 a protocol
is something like

294
00:18:34,059 --> 00:18:37,320
HTTP or WebSockets

295
00:18:37,320 --> 00:18:41,179
a protocol knows what bites to send

296
00:18:41,179 --> 00:18:44,710
and it understands the meaning of the
bites that it receives

297
00:18:44,710 --> 00:18:48,000
and beneath the protocol

298
00:18:48,000 --> 00:18:51,169
is a transport so TCP as a transport

299
00:18:51,169 --> 00:18:55,660
and the transport knows how to send and
receive

300
00:18:55,660 --> 00:18:59,330
by its but it doesn't know what bites to
send it doesn't understand the meeting

301
00:18:59,330 --> 00:19:01,440
at the Mets that every six

302
00:19:01,440 --> 00:19:05,990
on is Cinco is relatively low-level

303
00:19:05,990 --> 00:19:10,039
so it gives you transports like TCP

304
00:19:10,039 --> 00:19:14,030
but it doesn't give you any protocol
implementations

305
00:19:14,030 --> 00:19:17,260
like HTTP so if you want

306
00:19:17,260 --> 00:19:20,320
a protocol you need to get it from
somewhere

307
00:19:20,320 --> 00:19:24,669
I'm getting an implementation up the
WebSocket protocol

308
00:19:24,669 --> 00:19:28,610
from a library called audubon

309
00:19:28,610 --> 00:19:31,690
now beneath the transport is the event
loop

310
00:19:31,690 --> 00:19:35,299
and that's where we're going to be
spending most of our time

311
00:19:35,299 --> 00:19:38,890
the event loop finds out about events

312
00:19:38,890 --> 00:19:42,549
and dispatches the events to event
handlers which are

313
00:19:42,549 --> 00:19:45,559
call backs and the

314
00:19:45,559 --> 00:19:48,600
bottom most layer beneath the event loop

315
00:19:48,600 --> 00:19:52,110
is the selectors Marshall so

316
00:19:52,110 --> 00:19:56,160
just like a san kayo the selectors model
is a new module

317
00:19:56,160 --> 00:19:59,370
and the Python 3.4 standard library

318
00:19:59,370 --> 00:20:05,110
and it abstracts away all of the
platform specific differences between

319
00:20:05,110 --> 00:20:08,340
the pole and KQ and whatever the heck

320
00:20:08,340 --> 00:20:12,270
people use on Windows on and it lets you

321
00:20:12,270 --> 00:20:17,850
a just kinda generally ask for event
notifications without worrying about

322
00:20:17,850 --> 00:20:21,640
what kinda operating system to running
on and

323
00:20:21,640 --> 00:20:25,250
for this talk will consider selectors to
be magic

324
00:20:25,250 --> 00:20:29,799
we'll see what it does but not how it
does it it's a layer beneath which we

325
00:20:29,799 --> 00:20:32,059
don't go

326
00:20:32,059 --> 00:20:35,559
so now we can finally start to look at
some code art

327
00:20:35,559 --> 00:20:38,630
this is in Example dot hi

328
00:20:38,630 --> 00:20:42,110
this is the chat application that we're
building

329
00:20:42,110 --> 00:20:45,549
and the first thing it does is it
imports its

330
00:20:45,549 --> 00:20:48,900
protocol implementation from autobahn

331
00:20:48,900 --> 00:20:52,820
and Ines think I O you need both the
protocol

332
00:20:52,820 --> 00:20:56,179
and a factory and the factory knows how
to

333
00:20:56,179 --> 00:21:00,799
instantiate the protocol one instance
per connected client

334
00:21:00,799 --> 00:21:05,320
so that these two will hook up in a way
that will see in a second

335
00:21:05,320 --> 00:21:08,520
on the next part the example application

336
00:21:08,520 --> 00:21:11,840
is the chat protocol

337
00:21:11,840 --> 00:21:15,090
logic itself so

338
00:21:15,090 --> 00:21:18,799
we have this global set of clients

339
00:21:18,799 --> 00:21:22,480
that represent all the currently
connected browsers

340
00:21:22,480 --> 00:21:25,950
and then we subclass

341
00:21:25,950 --> 00:21:29,169
autobahns chat protocol

342
00:21:29,169 --> 00:21:33,409
and we override three methods on Connect
runs

343
00:21:33,409 --> 00:21:37,780
wearing a client connects to a semi at
ourselves to the global list

344
00:21:37,780 --> 00:21:40,990
and then on message handles

345
00:21:40,990 --> 00:21:45,000
incoming messages from clients and
rebroadcasts them

346
00:21:45,000 --> 00:21:48,860
to all the other clients and then the
final thing

347
00:21:48,860 --> 00:21:53,380
on clothes just removes us from the
global list whenever a client

348
00:21:53,380 --> 00:21:54,760
disconnects from us

349
00:21:54,760 --> 00:21:58,400
soap really simple and stereotypical

350
00:21:58,400 --> 00:22:01,909
what we're interested in

351
00:22:01,909 --> 00:22:05,200
is are how does on Connect

352
00:22:05,200 --> 00:22:11,860
actually get executed in response to a
client trying to connect to us

353
00:22:11,860 --> 00:22:15,549
on and my assertion is that

354
00:22:15,549 --> 00:22:19,200
if we've understood how the arm

355
00:22:19,200 --> 00:22:22,990
low-level Avent have a client trying to
connect

356
00:22:22,990 --> 00:22:29,120
to our listening socket results in this
call back actually being executed

357
00:22:29,120 --> 00:22:32,570
then we've understood how is sync works

358
00:22:32,570 --> 00:22:36,360
so keep that in mind this is the goal we
wanna see how on Connect

359
00:22:36,360 --> 00:22:40,030
gets executed and we're gonna get there
in kind of

360
00:22:40,030 --> 00:22:44,570
to faces so the first phase is

361
00:22:44,570 --> 00:22:48,289
we need to create a server and start
listening

362
00:22:48,289 --> 00:22:52,220
on a socket so that happens down here

363
00:22:52,220 --> 00:22:55,549
at the bottom I love the

364
00:22:55,549 --> 00:22:59,030
example code so we

365
00:22:59,030 --> 00:23:04,799
create their protocol factory we tell it
what kind of protocol to instantiate

366
00:23:04,799 --> 00:23:07,830
it'll be the chat protocol that we
defined

367
00:23:07,830 --> 00:23:13,620
and we tell it to bind to an interface
and listen on a port

368
00:23:13,620 --> 00:23:17,130
and then the next thing we do is we get
the event

369
00:23:17,130 --> 00:23:21,309
loop from a sync i/o and we tell it to
create

370
00:23:21,309 --> 00:23:24,650
a server and we pass and the factory

371
00:23:24,650 --> 00:23:27,940
and beneath that we're going to tell the
loop to start running

372
00:23:27,940 --> 00:23:31,490
but we're not quite there yet the first
thing we're gonna do is we're going to

373
00:23:31,490 --> 00:23:33,490
look at creates server

374
00:23:33,490 --> 00:23:36,710
because that's where we start to

375
00:23:36,710 --> 00:23:40,840
I'll listen for clients connecting so

376
00:23:40,840 --> 00:23:47,840
hear this and the first part service are
pretty simple

377
00:23:48,169 --> 00:23:51,510
we create a socket arm out so let me
first

378
00:23:51,510 --> 00:23:54,610
orient you where you are your are now

379
00:23:54,610 --> 00:23:59,090
a layer beneath the example application

380
00:23:59,090 --> 00:24:03,669
we r in the standard library itself for
looking at the implementation up the

381
00:24:03,669 --> 00:24:04,970
event loop

382
00:24:04,970 --> 00:24:11,549
in the a sync i/o module and the
standard library

383
00:24:11,549 --> 00:24:16,570
and we create a stockade we find it in
interface we listen on a port

384
00:24:16,570 --> 00:24:21,480
the stuff is not specific to a sink so
it just kinda ellipse eased out the

385
00:24:21,480 --> 00:24:23,059
details there

386
00:24:23,059 --> 00:24:26,370
the interesting stuff starts when we
call

387
00:24:26,370 --> 00:24:30,390
stock dot set blocking false

388
00:24:30,390 --> 00:24:33,750
making a socket non-blocking

389
00:24:33,750 --> 00:24:36,870
means that all operations we attempt

390
00:24:36,870 --> 00:24:40,679
on the socket are either going to
succeed or fail

391
00:24:40,679 --> 00:24:44,539
instantly but never block so whereas

392
00:24:44,539 --> 00:24:48,470
on a normal socket you would call sucked
I receive

393
00:24:48,470 --> 00:24:52,669
to ask for some by its and if there
aren't any bites

394
00:24:52,669 --> 00:24:57,190
waiting to be received then you block
with the non-blocking socket under those

395
00:24:57,190 --> 00:25:00,250
circumstances we would raise an
exception

396
00:25:00,250 --> 00:25:04,059
so the next thing we do after that as we
get the sockets

397
00:25:04,059 --> 00:25:07,100
file descriptor and we pass it into

398
00:25:07,100 --> 00:25:10,309
the selector and the selector

399
00:25:10,309 --> 00:25:13,360
is magic it's part if this

400
00:25:13,360 --> 00:25:18,470
are magical selectors Marshall that
we're not going to talk about

401
00:25:18,470 --> 00:25:22,440
we're not good as describe how it works
but we are going to see what it does

402
00:25:22,440 --> 00:25:26,460
and what it's doing here is it

403
00:25:26,460 --> 00:25:30,080
takes a file descriptor and

404
00:25:30,080 --> 00:25:33,590
takes an event mask which is

405
00:25:33,590 --> 00:25:37,610
the listed the kind to the dance they
were interested in

406
00:25:37,610 --> 00:25:42,270
on and in this case were interested in

407
00:25:42,270 --> 00:25:45,779
when the stock it becomes readable

408
00:25:45,779 --> 00:25:50,400
because that means that a client is
trying to connect to us

409
00:25:50,400 --> 00:25:53,880
we also pass and that third argument
which is on

410
00:25:53,880 --> 00:25:58,120
any data at all the selectors Marshall
will accept

411
00:25:58,120 --> 00:26:03,679
any data that we want to pass an and
then we'll get that data back out later

412
00:26:03,679 --> 00:26:07,000
if the event they were interested in
occurs

413
00:26:07,000 --> 00:26:10,350
so in this case were passing in a tubal
and the tubal

414
00:26:10,350 --> 00:26:14,409
is the reader call back and the writer
called back

415
00:26:14,409 --> 00:26:17,490
and the writer call back as non because
arm

416
00:26:17,490 --> 00:26:20,620
a listening socket is never right people
but p

417
00:26:20,620 --> 00:26:23,679
reader call back he is a new method

418
00:26:23,679 --> 00:26:26,870
on the I'll loop called

419
00:26:26,870 --> 00:26:31,279
accept connection so we've created a
listening socket

420
00:26:31,279 --> 00:26:36,010
we registered a call back to be executed
when somebody is trying to connect on

421
00:26:36,010 --> 00:26:37,559
the listening socket

422
00:26:37,559 --> 00:26:43,130
and now we can look at what's in that
call back so we're going to look at

423
00:26:43,130 --> 00:26:47,779
the implementation accept connection

424
00:26:47,779 --> 00:26:51,679
so here it is this is the second

425
00:26:51,679 --> 00:26:55,230
I love the methods on I'll do

426
00:26:55,230 --> 00:26:59,370
that were looking at and a

427
00:26:59,370 --> 00:27:02,620
first it calls except on the socket

428
00:27:02,620 --> 00:27:06,590
it knows that there's a client waiting
to connect to us

429
00:27:06,590 --> 00:27:11,299
so it knows that it's time to call
except underscore on the socket

430
00:27:11,299 --> 00:27:15,350
and the return value of that includes a
new socket

431
00:27:15,350 --> 00:27:19,080
called con and that represents the

432
00:27:19,080 --> 00:27:23,980
new connection to the client and since
it's a new socket we have to call set

433
00:27:23,980 --> 00:27:25,529
blocking false on that

434
00:27:25,529 --> 00:27:28,630
to then we

435
00:27:28,630 --> 00:27:31,860
instantiate the protocol by

436
00:27:31,860 --> 00:27:35,390
executing the protocol factory and
protocols that

437
00:27:35,390 --> 00:27:38,510
chat protocol that we saw implemented

438
00:27:38,510 --> 00:27:41,520
in the example application

439
00:27:41,520 --> 00:27:45,120
finally we wrap-up the event loop

440
00:27:45,120 --> 00:27:48,140
and the client connection and the
protocol

441
00:27:48,140 --> 00:27:51,970
and we still call it that into a
transport

442
00:27:51,970 --> 00:27:55,730
so we're almost there

443
00:27:55,730 --> 00:28:00,250
and we're gonna see held the transport

444
00:28:00,250 --> 00:28:03,610
are finally

445
00:28:03,610 --> 00:28:07,279
completes our goal love executing

446
00:28:07,279 --> 00:28:10,970
on Connect so per soccer transports

447
00:28:10,970 --> 00:28:14,049
in it function is here on

448
00:28:14,049 --> 00:28:18,049
it takes the loop client connection in
the protocol

449
00:28:18,049 --> 00:28:21,929
it calls its super constructor

450
00:28:21,929 --> 00:28:24,990
and then look at it does at the bottom
there calls

451
00:28:24,990 --> 00:28:28,279
self protocol connection made

452
00:28:28,279 --> 00:28:31,730
and that was actually

453
00:28:31,730 --> 00:28:35,240
our goal we wanted to see how

454
00:28:35,240 --> 00:28:38,600
a client connecting to us caused

455
00:28:38,600 --> 00:28:41,940
that method called on Connect to get
executed

456
00:28:41,940 --> 00:28:46,919
and here you can see that we've called
connection made on the protocol

457
00:28:46,919 --> 00:28:50,260
that makes another function caller to
and

458
00:28:50,260 --> 00:28:53,960
it calls on Connect which

459
00:28:53,960 --> 00:28:57,850
here's what we wanted to see so

460
00:28:57,850 --> 00:29:02,230
does that mean that we understand how is
sync works

461
00:29:02,230 --> 00:29:05,659
almost but not quite because

462
00:29:05,659 --> 00:29:08,890
there was a detailed that is sort of
glossed over

463
00:29:08,890 --> 00:29:12,580
arm and it's this we saw how

464
00:29:12,580 --> 00:29:18,320
we past accept connection into the
selectors a call back

465
00:29:18,320 --> 00:29:22,440
we didn't see exactly how the client
trying to connect to us

466
00:29:22,440 --> 00:29:25,730
caused that call back to be executed

467
00:29:25,730 --> 00:29:29,590
so in order to understand that last
piece

468
00:29:29,590 --> 00:29:34,789
we need to rewind all the way back to
our example application here

469
00:29:34,789 --> 00:29:39,370
we saw creates server and the chain of
events that it leads to

470
00:29:39,370 --> 00:29:42,409
but we can look at the final line

471
00:29:42,409 --> 00:29:47,370
looped out run forever so let's look at
that

472
00:29:47,370 --> 00:29:52,279
on here it is and now we're back in a
sink a a we're back in the standard

473
00:29:52,279 --> 00:29:52,870
library

474
00:29:52,870 --> 00:29:56,590
this is the third van loop method that
we've seen

475
00:29:56,590 --> 00:30:00,450
Wieser create server and accept
connection

476
00:30:00,450 --> 00:30:03,590
and that this is the third and final
method we need to look at

477
00:30:03,590 --> 00:30:06,789
run forever now

478
00:30:06,789 --> 00:30:11,390
as you would expect from the name run
forever is an infinite loop

479
00:30:11,390 --> 00:30:14,870
%uh while true yet

480
00:30:14,870 --> 00:30:19,299
receives an event list from the selector

481
00:30:19,299 --> 00:30:23,059
and as with everything else for the
selector this is magic

482
00:30:23,059 --> 00:30:26,070
were not going to see how it works

483
00:30:26,070 --> 00:30:29,940
but we can see what it does it returns a
list of

484
00:30:29,940 --> 00:30:34,240
events that are currently ready on
non-blocking sockets

485
00:30:34,240 --> 00:30:37,590
so we iterate through this event list

486
00:30:37,590 --> 00:30:40,960
and each item in the event list is

487
00:30:40,960 --> 00:30:44,240
a file descriptor a bit mask

488
00:30:44,240 --> 00:30:48,700
I love a pending offense on that file
descriptor

489
00:30:48,700 --> 00:30:52,059
and also the data that we are earlier
past an

490
00:30:52,059 --> 00:30:56,570
so the data remembers the reader called
back at the rather call back so we

491
00:30:56,570 --> 00:30:59,039
unpacked that from data

492
00:30:59,039 --> 00:31:02,870
and then we check is the readable bit

493
00:31:02,870 --> 00:31:07,200
set on the event mask and is the read
call back not

494
00:31:07,200 --> 00:31:10,769
non if so then we don't actually

495
00:31:10,769 --> 00:31:14,070
execute the read call back

496
00:31:14,070 --> 00:31:17,779
we added to a list of pending call backs

497
00:31:17,779 --> 00:31:21,159
and then we do the same forward the
right bit

498
00:31:21,159 --> 00:31:24,220
we check if the right bit is set at the
event mask

499
00:31:24,220 --> 00:31:29,330
and if the right call back is not nine
and if those two things are true

500
00:31:29,330 --> 00:31:32,470
then we add it to the ready queue

501
00:31:32,470 --> 00:31:36,130
once we've processed the whole list to
the events this way

502
00:31:36,130 --> 00:31:39,440
we have a ready cue full love

503
00:31:39,440 --> 00:31:44,549
pending runnable call backs so then this
the senate funny and

504
00:31:44,549 --> 00:31:48,720
not very Python etc looking loop at the
bottom there

505
00:31:48,720 --> 00:31:52,620
where we check the length up the ready
queue

506
00:31:52,620 --> 00:31:56,929
and then we pop call backs off for the
ready queue and execute them

507
00:31:56,929 --> 00:32:00,409
and the reasons why we do it

508
00:32:00,409 --> 00:32:04,190
this weird way you might think like 10
jazz run all the call backs in the ready

509
00:32:04,190 --> 00:32:05,169
queue

510
00:32:05,169 --> 00:32:08,880
a call back can't do anything

511
00:32:08,880 --> 00:32:12,840
and that includes adding new call backs
to the ready queue

512
00:32:12,840 --> 00:32:16,019
as it's running so we don't wanna run

513
00:32:16,019 --> 00:32:21,269
those secondary call backs now we only
want to run the call backs that we're

514
00:32:21,269 --> 00:32:21,799
ready

515
00:32:21,799 --> 00:32:25,519
when we reached the top up this loop

516
00:32:25,519 --> 00:32:29,029
any call backs that the register and add
to the ready queue

517
00:32:29,029 --> 00:32:33,159
will have to wait into we've reached the
next iteration over the whole

518
00:32:33,159 --> 00:32:37,510
event loop arm and this guarantees
certain things about

519
00:32:37,510 --> 00:32:41,169
on scheduling and starvation that a
Cinco de Mayo

520
00:32:41,169 --> 00:32:46,730
wants to guarantee but up we don't
actually have to understand all that

521
00:32:46,730 --> 00:32:50,730
his we do need to understand we up

522
00:32:50,730 --> 00:32:56,640
earlier registered for event
notifications on a listening socket

523
00:32:56,640 --> 00:32:59,980
and the reader call back was self-taught
accept connection

524
00:32:59,980 --> 00:33:03,000
so here we are in the event loop when
that

525
00:33:03,000 --> 00:33:07,500
listening socket becomes readable we get
the event

526
00:33:07,500 --> 00:33:10,679
for that socket from the selector

527
00:33:10,679 --> 00:33:15,110
the call back is except connection

528
00:33:15,110 --> 00:33:19,090
and that's what we wanted to see we
wanted to see how that got pulled back

529
00:33:19,090 --> 00:33:21,200
out if the selectors Marshall

530
00:33:21,200 --> 00:33:26,549
and executed as a consequence have a
client trying to connect to us

531
00:33:26,549 --> 00:33:29,649
so now we've seen the whole thing %uh

532
00:33:29,649 --> 00:33:34,289
and for visual learners we can go
through it again with boxes and arrows

533
00:33:34,289 --> 00:33:38,210
up so first we saw the application
startup

534
00:33:38,210 --> 00:33:42,019
and a called start server on the event
loop

535
00:33:42,019 --> 00:33:46,029
and then the event loop registered a
file descriptor

536
00:33:46,029 --> 00:33:51,659
with the selectors Marshall and passed
in the accept connection call back

537
00:33:51,659 --> 00:33:55,730
after that we return to the application
and we saw the application

538
00:33:55,730 --> 00:34:00,140
call run forever on the loop and then
the loop

539
00:34:00,140 --> 00:34:04,059
saw the event on the listening socket

540
00:34:04,059 --> 00:34:08,329
and it pulled the call back out and
executed at

541
00:34:08,329 --> 00:34:12,359
and that call back in turn called back
into our

542
00:34:12,359 --> 00:34:17,730
chat protocol implementation and
executed on connect on that

543
00:34:17,730 --> 00:34:21,220
said I we've seen the whole chain of
events and we've seen

544
00:34:21,220 --> 00:34:24,490
had a very low and basic level how a
single

545
00:34:24,490 --> 00:34:28,310
actually works are

546
00:34:28,310 --> 00:34:33,260
so to review a sync i/o users
non-blocking sockets

547
00:34:33,260 --> 00:34:36,690
and it registers prevent notifications
on the sockets

548
00:34:36,690 --> 00:34:41,540
using the selectors Marshall which wraps
the eap polar KQ

549
00:34:41,540 --> 00:34:44,659
facilities the event loop

550
00:34:44,659 --> 00:34:48,570
knows about all of the non-blocking
sockets in the system

551
00:34:48,570 --> 00:34:52,260
and when events occur on the sockets the
event loop

552
00:34:52,260 --> 00:34:56,659
executes the Associated call backs so
that your application can

553
00:34:56,659 --> 00:35:03,420
Ron its application logic in response to
those I O events

554
00:35:03,420 --> 00:35:06,910
arm and now that we've kinda gone like

555
00:35:06,910 --> 00:35:10,630
when should I use it what is it how does
it work

556
00:35:10,630 --> 00:35:14,550
and then we've gone back to what is it
now we can

557
00:35:14,550 --> 00:35:18,490
do a final review love when should I use
it

558
00:35:18,490 --> 00:35:21,570
so like with medicine

559
00:35:21,570 --> 00:35:25,380
there are indications and
contraindications

560
00:35:25,380 --> 00:35:28,650
for a sec indications

561
00:35:28,650 --> 00:35:31,900
in favor of a single are are

562
00:35:31,900 --> 00:35:35,390
pizza so if you have

563
00:35:35,390 --> 00:35:39,170
a web application with some kind of back
and

564
00:35:39,170 --> 00:35:42,349
that you're spending most of your time
waiting for

565
00:35:42,349 --> 00:35:45,470
rather than spending most of your time
doing computation

566
00:35:45,470 --> 00:35:48,570
that's a good application for a sec arm

567
00:35:48,570 --> 00:35:53,599
additionally if you have a sushi if
you're doing WebSockets

568
00:35:53,599 --> 00:35:57,220
that means that you're doing very little
competition for each

569
00:35:57,220 --> 00:36:00,420
open our website get connection

570
00:36:00,420 --> 00:36:03,980
but you have to have a very large number
of them idle at a time

571
00:36:03,980 --> 00:36:08,380
so a single as you to minimize the
memory that you spend

572
00:36:08,380 --> 00:36:11,770
waiting for advance on this website gets

573
00:36:11,770 --> 00:36:15,530
I'm and basically anytime that you have
a very large number of concurrent

574
00:36:15,530 --> 00:36:16,839
connections

575
00:36:16,839 --> 00:36:20,599
but you're not spinning very much CPU

576
00:36:20,599 --> 00:36:24,240
on handle inclined requests on each
connection

577
00:36:24,240 --> 00:36:28,070
that's a good application for a sink

578
00:36:28,070 --> 00:36:32,000
arm contraindications are

579
00:36:32,000 --> 00:36:35,130
when you want a submarine sandwich

580
00:36:35,130 --> 00:36:38,540
when you're doing computationally
intensive

581
00:36:38,540 --> 00:36:43,450
work in that case a sink doesn't win you
very much

582
00:36:43,450 --> 00:36:48,349
on because you're not doing very much hi
ok concurrency

583
00:36:48,349 --> 00:36:52,310
you're better off focusing on CPU
concurrency

584
00:36:52,310 --> 00:36:56,230
said the additional complexity of a sink
doesn't win you anything so it's best

585
00:36:56,230 --> 00:37:00,220
under these circumstances not to use it

586
00:37:00,220 --> 00:37:03,670
arm another issued that a lot of people
get

587
00:37:03,670 --> 00:37:07,650
wrong is the years and a sink framework

588
00:37:07,650 --> 00:37:12,829
but they're talking to database with a
synchronous driver

589
00:37:12,829 --> 00:37:15,869
so if you're using a blocking driver
with an

590
00:37:15,869 --> 00:37:19,240
a synchronous framework you're blocking
your AVENT Bottle

591
00:37:19,240 --> 00:37:22,380
whenever you talked the database and

592
00:37:22,380 --> 00:37:26,920
your giving up all the advantages that
you chose a sink for

593
00:37:26,920 --> 00:37:31,420
so are with my sequel for example people
often use it with tornado

594
00:37:31,420 --> 00:37:34,720
but a long-running my sequel

595
00:37:34,720 --> 00:37:39,390
query will have disastrous consequences
for your throughput under the

596
00:37:39,390 --> 00:37:40,630
circumstances

597
00:37:40,630 --> 00:37:45,290
see better off using multi-threading arm
in the case of Mongo DB

598
00:37:45,290 --> 00:37:50,890
I spent a very long time writing a
non-blocking driver called motor

599
00:37:50,890 --> 00:37:55,869
which allows you to connect properly
from 2002 Mongo DB

600
00:37:55,869 --> 00:38:00,310
just to insured that you're able to use
in a sink driver within is saying

601
00:38:00,310 --> 00:38:02,060
framework

602
00:38:02,060 --> 00:38:05,920
the final issue that you have to deal
with

603
00:38:05,920 --> 00:38:09,900
is up what if you don't know is sing
pretty well

604
00:38:09,900 --> 00:38:14,520
and what if now is not the right time to
invest in learning at

605
00:38:14,520 --> 00:38:18,710
I would say under the circumstances you
need to be

606
00:38:18,710 --> 00:38:23,490
judicious in when you decide to invest
the time and learning at

607
00:38:23,490 --> 00:38:26,750
its unfamiliar you can get it wrong

608
00:38:26,750 --> 00:38:29,800
the code will look weird to you so

609
00:38:29,800 --> 00:38:33,520
you need to decide that you're going to
learn how to use it

610
00:38:33,520 --> 00:38:36,950
I'm and you need to decide when that
moment is

611
00:38:36,950 --> 00:38:41,220
in it you know into period over which
you're creating your prototype for

612
00:38:41,220 --> 00:38:42,170
whatever

613
00:38:42,170 --> 00:38:46,780
on Duchess launch into it thinking it's
going to be easy

614
00:38:46,780 --> 00:38:51,079
are 0 and the final thing about this is
on it doesn't have to be all or nothing

615
00:38:51,079 --> 00:38:56,089
so it's very frequent that you have a
big complicated web application

616
00:38:56,089 --> 00:38:59,130
with many kinds of tasks

617
00:38:59,130 --> 00:39:02,270
and some of those like a chat

618
00:39:02,270 --> 00:39:05,829
feature might best be served by a sync
service

619
00:39:05,829 --> 00:39:10,500
and some other aspect of your stack
might be better served by a

620
00:39:10,500 --> 00:39:15,410
conventional multi-threaded server and
that's fine you just mix and match those

621
00:39:15,410 --> 00:39:18,619
in separate process season you connect
to you

622
00:39:18,619 --> 00:39:22,560
the proper and point for the different
features

623
00:39:22,560 --> 00:39:26,619
so thats all I have to say

624
00:39:26,619 --> 00:39:30,329
%uh you've seen what a sink is how it
works

625
00:39:30,329 --> 00:39:34,750
you gotten some are indications for when
to use it

626
00:39:34,750 --> 00:39:37,950
and indications for when not the

627
00:39:37,950 --> 00:39:41,079
next thing i'd say to do it here's

628
00:39:41,079 --> 00:39:44,440
read Pepe 3156 are

629
00:39:44,440 --> 00:39:47,520
a special look at the code routines
section of it

630
00:39:47,520 --> 00:39:51,010
because it's really fun and cool and

631
00:39:51,010 --> 00:39:54,070
are we didn't get to touch it at all
today

632
00:39:54,070 --> 00:39:57,490
and on the next time you have a chat

633
00:39:57,490 --> 00:40:02,260
application or something else that could
benefit from this kind of paradigm

634
00:40:02,260 --> 00:40:07,060
give it a try and see how it works for
him so I think we have a few minutes

635
00:40:07,060 --> 00:40:10,210
for questions five minutes for questions
great

636
00:40:10,210 --> 00:40:13,490
on so other microphones

637
00:40:13,490 --> 00:40:20,490
in the stands sir

638
00:40:21,569 --> 00:40:25,020
great go ahead

639
00:40:25,020 --> 00:40:28,109
are you planning to Court Motor for a

640
00:40:28,109 --> 00:40:32,079
a sink II over if the plans that regard
yes

641
00:40:32,079 --> 00:40:36,010
arm absolutely its kind of a problem

642
00:40:36,010 --> 00:40:39,250
priorities right now both because we
don't have a lot

643
00:40:39,250 --> 00:40:44,160
love manga TV customers on Python 3.4 in
production

644
00:40:44,160 --> 00:40:48,359
and also because a sync i/o itself is so
novel

645
00:40:48,359 --> 00:40:52,530
but I think that maybe in the next year
to indefinitely

646
00:40:52,530 --> 00:40:55,710
arm looking for a way to make motor

647
00:40:55,710 --> 00:40:58,770
kind of concurrency framework agnostic
so that our work

648
00:40:58,770 --> 00:41:03,300
could work with not just when nato and a
Cinco but also probably I'm

649
00:41:03,300 --> 00:41:08,119
twisted and a anything else that comes
out of the woodwork

650
00:41:08,119 --> 00:41:11,290
make thanks min

651
00:41:11,290 --> 00:41:14,960
hi thank you for this explorations very
clear and I'm

652
00:41:14,960 --> 00:41:18,640
going to point a lot of people to it
one-fifth

653
00:41:18,640 --> 00:41:23,280
record that great thanks and I just
wanted to ask if you have

654
00:41:23,280 --> 00:41:27,190
and be quick advice for the backing this
kind of applications

655
00:41:27,190 --> 00:41:30,319
because bagging an asynchronous

656
00:41:30,319 --> 00:41:33,579
application this quite different from
the bank Inc

657
00:41:33,579 --> 00:41:37,329
traditional application any advice for
making them

658
00:41:37,329 --> 00:41:41,130
falls for the backing them over defining
that Louis

659
00:41:41,130 --> 00:41:44,460
seeing what they actually i doing wrong
rate

660
00:41:44,460 --> 00:41:48,369
it's incredibly hard as a matter fact
because the car back style

661
00:41:48,369 --> 00:41:51,480
typically loses your traceback

662
00:41:51,480 --> 00:41:54,760
arm you launch some peace a bio

663
00:41:54,760 --> 00:41:58,790
and then your stack goes away and then
eventually the car back is executed in

664
00:41:58,790 --> 00:42:01,230
something goes wrong but you don't know

665
00:42:01,230 --> 00:42:04,720
why the call back is being run because
the

666
00:42:04,720 --> 00:42:09,829
are the chain of events that led to it
being added to the runnable cue is

667
00:42:09,829 --> 00:42:14,220
history on so

668
00:42:14,220 --> 00:42:17,460
up catch at think really hard

669
00:42:17,460 --> 00:42:22,619
arm I come routines are better than call
backs for this pic

670
00:42:22,619 --> 00:42:26,760
okay because on for two reasons: career
teens

671
00:42:26,760 --> 00:42:31,050
a keep all of your logic within the same
function or within the same

672
00:42:31,050 --> 00:42:34,579
on stack up function calls and

673
00:42:34,579 --> 00:42:37,579
a exception handling incur routines

674
00:42:37,579 --> 00:42:41,160
is relatively normal where an exception
will

675
00:42:41,160 --> 00:42:45,190
unwind the stack through a series of
colour teens in the same way that it

676
00:42:45,190 --> 00:42:47,920
does through a series of ordinary
function calls

677
00:42:47,920 --> 00:42:52,530
so on emphasize karu teens over call
backs when possible

678
00:42:52,530 --> 00:42:57,810
and otherwise like good grief use
part-time use your debugger like prey

679
00:42:57,810 --> 00:43:02,819
thank you sex a hut you talked about
having a central striker

680
00:43:02,819 --> 00:43:06,050
for the database is needed when you'll
work I work in zyuganov's

681
00:43:06,050 --> 00:43:09,109
haha out what about other kinds of I
feel that you need to do

682
00:43:09,109 --> 00:43:12,510
that I understand the library like email
your local and Sun

683
00:43:12,510 --> 00:43:17,180
all the that is blocking the current
exists rates so this is a huge problem

684
00:43:17,180 --> 00:43:20,339
is that arm

685
00:43:20,339 --> 00:43:25,569
there are protocols debtor implemented
in the standard library

686
00:43:25,569 --> 00:43:28,710
like email and those are

687
00:43:28,710 --> 00:43:34,190
mean the are formatting of messages and
the parsing every sponsors

688
00:43:34,190 --> 00:43:38,130
is mixed in with the scheduling of Ohio

689
00:43:38,130 --> 00:43:42,430
and would be nice if these things were
separate so that you could reuse

690
00:43:42,430 --> 00:43:48,000
the parsing and formatting aspects
without relying on the i/o scheduling

691
00:43:48,000 --> 00:43:51,640
but right now that's not really done so

692
00:43:51,640 --> 00:43:57,010
this is G events big advantage is that
it monkey patch is the standard library

693
00:43:57,010 --> 00:44:01,630
and replaces it I'll scheduling within a
synchronous lehrer

694
00:44:01,630 --> 00:44:05,079
um without G events artwork

695
00:44:05,079 --> 00:44:08,099
kinda in trouble arm

696
00:44:08,099 --> 00:44:12,440
things get reimplemented over and over
and over again so there's a

697
00:44:12,440 --> 00:44:16,510
a standard library email I'll model and
then there's a

698
00:44:16,510 --> 00:44:19,670
a new one there was rewritten for
twisted

699
00:44:19,670 --> 00:44:24,369
there's pie Mongo which is manga TB in a
blocking style and then there's motor

700
00:44:24,369 --> 00:44:25,810
for 20 80

701
00:44:25,810 --> 00:44:29,520
arm I think that a sync i/o

702
00:44:29,520 --> 00:44:33,599
in the standard library is going to help
fix this

703
00:44:33,599 --> 00:44:36,890
by giving us is standard a sink

704
00:44:36,890 --> 00:44:41,480
interface to target but it's going to be
a few years yet before that really

705
00:44:41,480 --> 00:44:42,619
happens

706
00:44:42,619 --> 00:44:47,000
in the meantime there's just a time %uh
duplicated work

707
00:44:47,000 --> 00:44:50,079
and that's really the answer can I take
one more question are

708
00:44:50,079 --> 00:44:53,550
I'm so your the final question

709
00:44:53,550 --> 00:44:56,839
us at a lot of pressure sorry

710
00:44:56,839 --> 00:45:01,500
he said you implemented a a sync i/o
database driver for Mongo DB

711
00:45:01,500 --> 00:45:04,730
yet but it seems really strange to me
that you did that as a new database

712
00:45:04,730 --> 00:45:05,510
driver

713
00:45:05,510 --> 00:45:09,010
wouldn't have been moored generally
useful to have

714
00:45:09,010 --> 00:45:13,099
well you you can we separate the
database driver from

715
00:45:13,099 --> 00:45:16,440
your a sink call backs using the work
you Im using

716
00:45:16,440 --> 00:45:19,869
sedum workers sir so some

717
00:45:19,869 --> 00:45:24,710
like if you had implemented that mean in
a higher layer in the or and more as a

718
00:45:24,710 --> 00:45:28,819
layer above the Davis writer would not
have been another solution

719
00:45:28,819 --> 00:45:32,329
so that may be the final place that we
end up

720
00:45:32,329 --> 00:45:36,720
arm what I

721
00:45:36,720 --> 00:45:41,069
said found when I started working on it
was that hi Mongo

722
00:45:41,069 --> 00:45:44,220
mixed creating

723
00:45:44,220 --> 00:45:48,619
requests with scheduling I O with
parsing the response

724
00:45:48,619 --> 00:45:52,240
and those couldn't be easily untangled
without

725
00:45:52,240 --> 00:45:55,420
starting from scratch so are

726
00:45:55,420 --> 00:45:59,810
I did this hack where I schedule I O on
green let's

727
00:45:59,810 --> 00:46:04,349
and I arm arrange for the screen lets to
be resumed

728
00:46:04,349 --> 00:46:08,430
when the i/o that they're waiting for is
completed and

729
00:46:08,430 --> 00:46:11,430
I have a long article about how I did
that arm

730
00:46:11,430 --> 00:46:14,950
its kind of it works quite well

731
00:46:14,950 --> 00:46:18,609
and it was a cheap way to get where you
needed to go

732
00:46:18,609 --> 00:46:22,349
but because kinda technique that you're
suggesting as I think

733
00:46:22,349 --> 00:46:26,780
is where we on the two had even if you
lose regular threats you could have kept

734
00:46:26,780 --> 00:46:28,579
around the small number

735
00:46:28,579 --> 00:46:32,990
threads for the database to handle those
calls

736
00:46:32,990 --> 00:46:36,490
my thought was that green let's scale a
little better if you have a very large

737
00:46:36,490 --> 00:46:40,230
number of pending operations

738
00:46:40,230 --> 00:46:42,349
alright %ah thank you very much guys

