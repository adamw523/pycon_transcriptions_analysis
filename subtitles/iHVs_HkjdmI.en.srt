1
00:00:00,020 --> 00:00:05,359
find its 1130 time to start the next
talk

2
00:00:05,359 --> 00:00:09,190
I'd like to welcome Benjamin Peterson
gonna tell us all about garbage

3
00:00:09,190 --> 00:00:10,500
collection and by Conor

4
00:00:10,500 --> 00:00:17,500
thanks man thank you guys i'm happy to
be here

5
00:00:19,119 --> 00:00:23,619
worker in the bigger room today I I
always try to read something into

6
00:00:23,619 --> 00:00:26,960
where the pike on organizers put me in I
assume that they put me in the big room

7
00:00:26,960 --> 00:00:29,179
so they can Paris me when no one shows
up but

8
00:00:29,179 --> 00:00:33,950
you guys are proving them wrong mu them
wrong thank you so

9
00:00:33,950 --> 00:00:38,260
what am I gonna cover in the stock well
main I like to talk about how

10
00:00:38,260 --> 00:00:41,260
we actually in when garbage collection
in to

11
00:00:41,260 --> 00:00:44,890
the main pipe on it went asians namely C
Python

12
00:00:44,890 --> 00:00:48,820
and pipe I and in particular in the case
a pipe I

13
00:00:48,820 --> 00:00:52,600
I'd like to address the issue
optimizations and

14
00:00:52,600 --> 00:00:57,340
but sorghum patterns we see in Python
which lead to

15
00:00:57,340 --> 00:01:01,660
I am the need for certain optimizations
and what how pipe I does that

16
00:01:01,660 --> 00:01:05,519
and finally I'd like to spend a few
minutes talking about various

17
00:01:05,519 --> 00:01:10,640
issues which with in the intersection of
language design and garbage collection

18
00:01:10,640 --> 00:01:14,770
where garbage collection actually causes
us to have to think about the semantics

19
00:01:14,770 --> 00:01:16,610
a python and how we want it to be

20
00:01:16,610 --> 00:01:21,420
okay so where I'll start with some
importation basics

21
00:01:21,420 --> 00:01:25,810
and and as I said I'm only gonna talk
about pipe I N C Python

22
00:01:25,810 --> 00:01:28,970
and that's mostly because those are the
only two which

23
00:01:28,970 --> 00:01:33,110
I have worked on and have knowledge on I
I do not want to

24
00:01:33,110 --> 00:01:36,259
say anything bad about the IronPython

25
00:01:36,259 --> 00:01:39,909
or a jacket on DC's but they inherit
them from their

26
00:01:39,909 --> 00:01:43,290
language implementations and not written
specifically for Python

27
00:01:43,290 --> 00:01:47,630
I'm like C Python and pipe I so

28
00:01:47,630 --> 00:01:51,829
them most basic question ask is what we
mean by garbage collection

29
00:01:51,829 --> 00:01:55,119
in any language and more specifically
pipeline well

30
00:01:55,119 --> 00:01:58,939
will usually thing is that objects which
are no longer reachable by our program

31
00:01:58,939 --> 00:02:02,780
will be the allocated in the resistance
they're using

32
00:02:02,780 --> 00:02:06,490
I cleaned up so new objects can take
their place

33
00:02:06,490 --> 00:02:09,629
up a somewhat subtle question is

34
00:02:09,629 --> 00:02:13,440
when are we going to get our objects
cleanup and the Python language

35
00:02:13,440 --> 00:02:15,770
reference which is sort of the standard
is a

36
00:02:15,770 --> 00:02:20,120
very cagey about this it says object or
eventually be cleaned up or never

37
00:02:20,120 --> 00:02:23,980
are so in theory you can make a python
importation which just called exit at

38
00:02:23,980 --> 00:02:25,030
the end and

39
00:02:25,030 --> 00:02:29,180
from the kernel cleaned up everything
for you but that probably would not

40
00:02:29,180 --> 00:02:32,280
not not pass muster and where we really
like is that

41
00:02:32,280 --> 00:02:35,590
objects are cleaned up up at some point

42
00:02:35,590 --> 00:02:40,019
before we run out of memory are so

43
00:02:40,019 --> 00:02:43,450
C Python venerable old reference I want
Asian

44
00:02:43,450 --> 00:02:48,180
are private the primary or a primary
garbage collection

45
00:02:48,180 --> 00:02:52,860
is reference counting and the idea is
very simple basically

46
00:02:52,860 --> 00:02:56,650
be a lot we live the objects which are
reachable on your program

47
00:02:56,650 --> 00:03:01,230
have account which says how many people
want them to still be alive

48
00:03:01,230 --> 00:03:04,400
as how many people are expecting to be
able to use them

49
00:03:04,400 --> 00:03:08,700
other objects that s and so when he
first create an object is

50
00:03:08,700 --> 00:03:13,940
one 1p soco and one other optical we
reference and so have a reference count

51
00:03:13,940 --> 00:03:14,560
1

52
00:03:14,560 --> 00:03:18,269
and then that will go up and down as
other parts of the program

53
00:03:18,269 --> 00:03:21,310
use it and finally when the objects

54
00:03:21,310 --> 00:03:25,099
reaches a ref count is 0 we now can be
safely be allocated

55
00:03:25,099 --> 00:03:29,299
so here's my diagram how that works
power

56
00:03:29,299 --> 00:03:32,599
and we're gonna imagine that these
objects here are

57
00:03:32,599 --> 00:03:36,700
pre-existing and during the course of
the program will allocate another object

58
00:03:36,700 --> 00:03:37,879
called Arctic Sea

59
00:03:37,879 --> 00:03:41,840
and sense it's a new our regular have
are recounted one

60
00:03:41,840 --> 00:03:45,340
and then say if object be. now gets

61
00:03:45,340 --> 00:03:48,500
a reference to objects see the wreck on
recu

62
00:03:48,500 --> 00:03:51,860
will become too because it has to links
in the graph here

63
00:03:51,860 --> 00:03:56,810
and then if are if another object is
allocated

64
00:03:56,810 --> 00:03:59,950
and handed to you objects and are

65
00:03:59,950 --> 00:04:03,790
object DD its a or objects see gets a
reference to

66
00:04:03,790 --> 00:04:07,280
the Newark DE then once again our big
deal have

67
00:04:07,280 --> 00:04:10,510
arrest got one now what happens when

68
00:04:10,510 --> 00:04:14,390
objects CE are is no longer accessible
from

69
00:04:14,390 --> 00:04:17,919
the live program well the links are
broken

70
00:04:17,919 --> 00:04:21,669
and so each time a link is broken the
record as documented by one

71
00:04:21,669 --> 00:04:24,699
and since there are now no longer anyway
X here

72
00:04:24,699 --> 00:04:28,610
there are countless the OM I will
realize that the

73
00:04:28,610 --> 00:04:32,440
object can be cleaned up and in the
process and its cleanup

74
00:04:32,440 --> 00:04:36,199
your remove all the references that has
two RGB

75
00:04:36,199 --> 00:04:41,419
and so R two-d_ you also become a dad
object and they can be reclaimed

76
00:04:41,419 --> 00:04:44,460
are so if you ever look at the sea
Python source

77
00:04:44,460 --> 00:04:48,380
it's littered with these macros pie in
craft and pied de craft

78
00:04:48,380 --> 00:04:52,330
so here's an example and these are the
operations which actually

79
00:04:52,330 --> 00:04:57,740
do reference counting in C Python II put
into a simplified example of how this

80
00:04:57,740 --> 00:04:58,600
works

81
00:04:58,600 --> 00:05:02,300
art so this is the code which sets

82
00:05:02,300 --> 00:05:06,340
items in a West mister normal Python
West so this is the west with your site

83
00:05:06,340 --> 00:05:08,509
is this is the index which your

84
00:05:08,509 --> 00:05:12,070
bino you're saying and this is what
you're actually will be setting

85
00:05:12,070 --> 00:05:16,229
and so you see which hit me with the
West takes a reference to

86
00:05:16,229 --> 00:05:19,860
the be which is the object we're putting
into the less because the list is now

87
00:05:19,860 --> 00:05:21,330
going on it

88
00:05:21,330 --> 00:05:26,490
it this is the code which actually puts
the item at the index you expect

89
00:05:26,490 --> 00:05:30,479
and then finally it documents the old
value which was holding in that

90
00:05:30,479 --> 00:05:33,669
in that about index in the West are so

91
00:05:33,669 --> 00:05:37,229
it can be cleaned up if because the list
is no longer references

92
00:05:37,229 --> 00:05:40,710
01 subtlety in this piece a coded me
knows that we've

93
00:05:40,710 --> 00:05:44,669
very carefully put the new item in the
west before we deallocate

94
00:05:44,669 --> 00:05:48,830
are decorated the ref count up the old I
O and that's because if you

95
00:05:48,830 --> 00:05:52,090
de commended the ref count oh the

96
00:05:52,090 --> 00:05:55,270
all value before you had put the new
item in the list

97
00:05:55,270 --> 00:05:59,000
it's possible that some Python code
could run which would

98
00:05:59,000 --> 00:06:03,479
I touch the west and with it seein on it
initialize value at that place

99
00:06:03,479 --> 00:06:07,229
are index in them the best

100
00:06:07,229 --> 00:06:10,690
okay so reference counting is an
all-india

101
00:06:10,690 --> 00:06:13,810
and it it works pretty well as the main

102
00:06:13,810 --> 00:06:18,400
garbage collection in C++ Python but has
a major fly which is that if you have a

103
00:06:18,400 --> 00:06:22,720
references return cycles reference they
will stay live for ever with peer

104
00:06:22,720 --> 00:06:23,630
reference counting

105
00:06:23,630 --> 00:06:26,669
and so what happens if going back to our
example

106
00:06:26,669 --> 00:06:29,970
is that if you have an object here see
an object here D

107
00:06:29,970 --> 00:06:34,509
and they both reference each other well
the number one's going into our big cr2

108
00:06:34,509 --> 00:06:38,350
and because there's one coming from
being one coming from the older objects

109
00:06:38,350 --> 00:06:42,449
and obadi has a ref conserve one and
even it now if we drop the link from the

110
00:06:42,449 --> 00:06:43,639
pre-existing objects

111
00:06:43,639 --> 00:06:46,780
so it's no longer referenced in our
program

112
00:06:46,780 --> 00:06:49,889
then both it is obvious you still a POS
a ref count

113
00:06:49,889 --> 00:06:54,509
because they still reference each other
even if they're not accessible from the

114
00:06:54,509 --> 00:06:55,729
program

115
00:06:55,729 --> 00:06:58,990
I so see python has a

116
00:06:58,990 --> 00:07:02,440
separate guy risk by her cubs cyclically
see which

117
00:07:02,440 --> 00:07:06,930
RD tax reference I goals and remove them

118
00:07:06,930 --> 00:07:11,319
and so unlike reference County where you
immediately know once an object is

119
00:07:11,319 --> 00:07:13,330
unreachable that you could be allocated

120
00:07:13,330 --> 00:07:16,460
the server the cyclic GC

121
00:07:16,460 --> 00:07:20,139
runs every once in a while to detect and
deallocate cycles

122
00:07:20,139 --> 00:07:23,460
and this is where you're actually
invoking when you run GC collect

123
00:07:23,460 --> 00:07:27,460
on C Python and the operational the

124
00:07:27,460 --> 00:07:30,599
sickly DC is very simple basically it

125
00:07:30,599 --> 00:07:34,849
looks for all cycles in the program and
then it de commence the internal

126
00:07:34,849 --> 00:07:37,099
references are the cycles

127
00:07:37,099 --> 00:07:41,699
so that's what's happened here if it's
in during the single garbage collection

128
00:07:41,699 --> 00:07:45,410
the the internal references in cycles
are documented

129
00:07:45,410 --> 00:07:48,840
and then if the objects in the cycles
region 0

130
00:07:48,840 --> 00:07:51,860
then you know that it's a cycle which is
not reachable

131
00:07:51,860 --> 00:07:57,629
because that references were only due to
internal cyclic once

132
00:07:57,629 --> 00:08:02,139
so we're able to be allocated okay now
I'm gonna switch to T

133
00:08:02,139 --> 00:08:06,580
what I consider the more interesting for
the Tigers pipeline

134
00:08:06,580 --> 00:08:11,440
are so lemme briefly review the basics a
pipe I'm

135
00:08:11,440 --> 00:08:17,440
so pipe I is written in a restricted
subset of Python call our Python

136
00:08:17,440 --> 00:08:21,560
and BR Python can be translated to a
lower leg would right now that's

137
00:08:21,560 --> 00:08:23,639
primarily see

138
00:08:23,639 --> 00:08:27,849
and sensei interpreter is written in
Python

139
00:08:27,849 --> 00:08:33,289
are it's actually has garbage collection
are python is garbage collected language

140
00:08:33,289 --> 00:08:36,649
so I as the are python has been lowered
to see

141
00:08:36,649 --> 00:08:40,810
garbage collection has to be added and
so what that means is that the

142
00:08:40,810 --> 00:08:45,380
interpreter is actually abstracted away
from

143
00:08:45,380 --> 00:08:49,029
be garbage collection implementation
unlike C Python which is

144
00:08:49,029 --> 00:08:52,170
littered with artifacts abreast County

145
00:08:52,170 --> 00:08:56,140
are so that means you can change the
garbage collection implementation

146
00:08:56,140 --> 00:08:59,560
up at translation time which is the
lower in a bar Python

147
00:08:59,560 --> 00:09:03,459
to see are so

148
00:09:03,459 --> 00:09:07,180
as I said the pipe I do see is just
another low-level transformation

149
00:09:07,180 --> 00:09:11,100
RB are Python object graph

150
00:09:11,100 --> 00:09:15,190
and the garbage collection what Asian is
actually written in our pipeline itself

151
00:09:15,190 --> 00:09:18,570
so it's you can you can go look at the
source code it's it's it's very strange

152
00:09:18,570 --> 00:09:19,860
to see this

153
00:09:19,860 --> 00:09:23,690
with our Python code which is on
actually

154
00:09:23,690 --> 00:09:27,209
working with Ron memory want to
translate to see and also means it can

155
00:09:27,209 --> 00:09:30,149
be tested in Python you can run on the
Python interpreter

156
00:09:30,149 --> 00:09:34,399
and you'll get normal exceptions when is
not translated to see

157
00:09:34,399 --> 00:09:38,990
on and so there been quite a lot of pipe
I garbage collection importations over

158
00:09:38,990 --> 00:09:39,670
the years a

159
00:09:39,670 --> 00:09:43,089
the current one is called many mark and
as well

160
00:09:43,089 --> 00:09:46,740
I'll be discussing the basics up

161
00:09:46,740 --> 00:09:51,060
so pipe I does not use reference
counting by default and so

162
00:09:51,060 --> 00:09:54,740
uses ain't more traditional garbage
collections

163
00:09:54,740 --> 00:09:57,890
scheme I guess you could say called
marken sweep are

164
00:09:57,890 --> 00:10:01,279
but the idea is also very simple

165
00:10:01,279 --> 00:10:06,399
basically start with objects machine or
alive in the garbage collection phase

166
00:10:06,399 --> 00:10:09,899
and then you walk there references

167
00:10:09,899 --> 00:10:13,130
all the way out and then you and while
you're doing that

168
00:10:13,130 --> 00:10:17,529
yumm carefully marked them to say oh I
know this art is alive

169
00:10:17,529 --> 00:10:21,029
and after doing that you move design
called the sweet phase where you walk

170
00:10:21,029 --> 00:10:24,230
all the objects what you know about in
the program and if they're not marked

171
00:10:24,230 --> 00:10:27,510
you know they can be doubt the allocated
and so this has no problem with

172
00:10:27,510 --> 00:10:29,079
reference cycles because there's

173
00:10:29,079 --> 00:10:32,660
no reference counting and you all to see
the cycle

174
00:10:32,660 --> 00:10:38,260
as not reachable are so here's the
visualization now this

175
00:10:38,260 --> 00:10:42,720
so again we have are newly allocated
objects here and work now on the market

176
00:10:42,720 --> 00:10:46,230
bass who are suing that we know these
objects are live object A&B

177
00:10:46,230 --> 00:10:49,800
and the garbage collector will traverses
links

178
00:10:49,800 --> 00:10:54,579
LC objects see bill mark are receiving
knows it's alive

179
00:10:54,579 --> 00:10:58,230
Anna next phase a garbage collection
sweeping

180
00:10:58,230 --> 00:11:01,890
well lock all these are little see
object AB and C are marked

181
00:11:01,890 --> 00:11:04,920
so we they are alive but

182
00:11:04,920 --> 00:11:10,529
object the is not marked so we know it
began be doubt be allocated

183
00:11:10,529 --> 00:11:13,910
up so what's really interesting is its

184
00:11:13,910 --> 00:11:16,950
how we can use parts of

185
00:11:16,950 --> 00:11:21,290
arm much things observations are the
Python language

186
00:11:21,290 --> 00:11:26,060
usage patterns to you optimized garbage
collector want Asian

187
00:11:26,060 --> 00:11:29,130
I so wanna the primary observations

188
00:11:29,130 --> 00:11:32,540
I love Python and indeed most dynamic
languages is that

189
00:11:32,540 --> 00:11:37,070
you are often allocating lhasa objects
which are soon to run away side put a

190
00:11:37,070 --> 00:11:38,829
few examples of yourself

191
00:11:38,829 --> 00:11:43,410
to traditionally you'll be alkenyl lotsa
intermediate float objects in the simple

192
00:11:43,410 --> 00:11:44,160
average

193
00:11:44,160 --> 00:11:47,959
which will be thrown away before they're
stored in a variable

194
00:11:47,959 --> 00:11:52,399
and for example if you have a every time
you iterate over something in Python you

195
00:11:52,399 --> 00:11:54,230
in a raid in iterator I think it's very

196
00:11:54,230 --> 00:11:58,279
it's very transparent but you do
actually have two allocated internally

197
00:11:58,279 --> 00:12:03,000
are and anytime you collin object on a
message you have to allocate

198
00:12:03,000 --> 00:12:06,110
abound method which actually binds the
South

199
00:12:06,110 --> 00:12:09,380
object to the method so you don't have
to pass self

200
00:12:09,380 --> 00:12:12,850
and then another common pattern in
Python is I'll

201
00:12:12,850 --> 00:12:16,870
long strings 'em above replacement so
like this this is some

202
00:12:16,870 --> 00:12:20,399
courage I found in ginger to do HTML
scapin

203
00:12:20,399 --> 00:12:23,450
and so it when these things create an
intermediate string object which is then

204
00:12:23,450 --> 00:12:25,329
immediately not used after it

205
00:12:25,329 --> 00:12:29,019
you move to the next replace com and so
in the

206
00:12:29,019 --> 00:12:32,050
GC garbage collection community and this
goes by the

207
00:12:32,050 --> 00:12:37,670
rather recover title high infant
mortality

208
00:12:37,670 --> 00:12:40,990
I basically expert expressing the

209
00:12:40,990 --> 00:12:46,019
the idea that you have many young
objects which up do not live very long

210
00:12:46,019 --> 00:12:49,950
are so a contender in the dark metaphor
we

211
00:12:49,950 --> 00:12:55,570
the opposition to use to help with this
is called the nursery

212
00:12:55,570 --> 00:12:59,339
on and so the FBI deion nursery is that

213
00:12:59,339 --> 00:13:04,230
you when every allocate a new object you
put in a small little bopper

214
00:13:04,230 --> 00:13:07,930
and then you just garbage collect the
nursery very often

215
00:13:07,930 --> 00:13:11,450
are much more than you collect the
entire object graph and

216
00:13:11,450 --> 00:13:15,240
so months and if an offer to buy the
nursery collection

217
00:13:15,240 --> 00:13:18,399
when you move it into and older
generation which is not garbage

218
00:13:18,399 --> 00:13:20,500
collected so much under the assumption

219
00:13:20,500 --> 00:13:24,709
that it will live longer than the things
which are garbage collected

220
00:13:24,709 --> 00:13:28,170
in the nursery and so the same pretty
simple

221
00:13:28,170 --> 00:13:31,910
but there's one side a point is that is
you actually have to be movin objects

222
00:13:31,910 --> 00:13:32,940
around in memory

223
00:13:32,940 --> 00:13:36,230
temple members and so that means is that

224
00:13:36,230 --> 00:13:39,620
%uh pie pie has GC has the ability to

225
00:13:39,620 --> 00:13:43,510
move object that is copy them to
different parts of the RAM

226
00:13:43,510 --> 00:13:46,959
well also updating the internal

227
00:13:46,959 --> 00:13:50,970
pointers to are which other objects
might have to that new object

228
00:13:50,970 --> 00:13:56,889
and so thats Sperry very much so cases
the flexibility the pipe I model because

229
00:13:56,889 --> 00:14:01,690
when we have the entire interpreter I'm
been translated see we can see

230
00:14:01,690 --> 00:14:04,430
which objects will have internal
references to other objects so the

231
00:14:04,430 --> 00:14:06,329
garbage collector can perfectly

232
00:14:06,329 --> 00:14:09,470
are update internal references

233
00:14:09,470 --> 00:14:13,380
another thing which pipe I try to
address is je C pas

234
00:14:13,380 --> 00:14:17,410
are so basically in a traditional
garbage collector

235
00:14:17,410 --> 00:14:21,360
and C Python cyclic our site when the
garbage collectors running your program

236
00:14:21,360 --> 00:14:22,339
is not running

237
00:14:22,339 --> 00:14:26,149
I just us the program so I can safely
walk to the object graph

238
00:14:26,149 --> 00:14:29,420
are and so sometimes people have massive
servers

239
00:14:29,420 --> 00:14:32,790
come but with a lot of objects allocated
and the

240
00:14:32,790 --> 00:14:37,040
GC will stop the program for like have a
second which is bad

241
00:14:37,040 --> 00:14:41,130
and but this becomes especially promote
what you're trying to do real tile

242
00:14:41,130 --> 00:14:42,800
things like video processing

243
00:14:42,800 --> 00:14:45,709
of course no one tried to do video
processing with Python before pipe I

244
00:14:45,709 --> 00:14:47,209
came along and made it actually

245
00:14:47,209 --> 00:14:50,550
reasonable to do that for computational
stuff with his

246
00:14:50,550 --> 00:14:53,810
just in time compiler are but

247
00:14:53,810 --> 00:14:58,050
now it's actually cut become a
possibility and so GC positive become

248
00:14:58,050 --> 00:15:00,089
our problem

249
00:15:00,089 --> 00:15:05,990
are so pie pie has something called in
and incremental garbage collector

250
00:15:05,990 --> 00:15:11,649
and what that means is that instead of
doing homework sweet process

251
00:15:11,649 --> 00:15:15,940
in in one go stopping the program to put
Lee

252
00:15:15,940 --> 00:15:20,600
it can do AP marks what they can do a
small part of the marking process

253
00:15:20,600 --> 00:15:24,130
and then let the program runs more and
then doing the next part of marking

254
00:15:24,130 --> 00:15:25,279
process

255
00:15:25,279 --> 00:15:30,430
as you can imagine that's not terribly
simple to do because

256
00:15:30,430 --> 00:15:33,820
the you it's easier when you assume that

257
00:15:33,820 --> 00:15:38,009
the the program has been stopped and you
will be mutating other objects

258
00:15:38,009 --> 00:15:41,850
up but according to the pipe I blog post
where our men and

259
00:15:41,850 --> 00:15:45,089
major implemented this it was actually
relatively painless to do

260
00:15:45,089 --> 00:15:48,300
I'm Southwest go part time

261
00:15:48,300 --> 00:15:53,089
and so this means that you can break
down the garbage collection time it's

262
00:15:53,089 --> 00:15:54,889
just a few milliseconds wishin be

263
00:15:54,889 --> 00:16:01,470
notable in real time processing kinda
applications

264
00:16:01,470 --> 00:16:05,949
so in summary the attributes if someone
asks you know

265
00:16:05,949 --> 00:16:09,120
what is great about the pipe I G C you
should tell them well

266
00:16:09,120 --> 00:16:12,940
you can choose a kind of garbage
collector you want I'll

267
00:16:12,940 --> 00:16:15,980
and it also has a as a nursery

268
00:16:15,980 --> 00:16:19,980
to generate a generational garbage
collectors one which

269
00:16:19,980 --> 00:16:23,639
I'm has the objects in different
categories based on how long have been

270
00:16:23,639 --> 00:16:26,970
alive you can say it's incremental

271
00:16:26,970 --> 00:16:33,740
and it's also integrated with the just
think I'm pyaar

272
00:16:33,740 --> 00:16:36,820
so the last few minutes I like to spend

273
00:16:36,820 --> 00:16:42,300
talking about some subtleties and
garbage collection semantics

274
00:16:42,300 --> 00:16:45,430
specifically I'd like to talk about

275
00:16:45,430 --> 00:16:48,620
under under Del

276
00:16:48,620 --> 00:16:52,570
which I I think anybody has been in
Python for

277
00:16:52,570 --> 00:16:55,769
a little while have bad experiences with
Dow

278
00:16:55,769 --> 00:16:59,199
up and some the main problem with with

279
00:16:59,199 --> 00:17:03,459
under under dell has led when arbiter
TLK to be a

280
00:17:03,459 --> 00:17:07,140
of of computer fairly arbitrary point in
your in the program

281
00:17:07,140 --> 00:17:11,600
and so on if you start running arbitrary
Python code in an arbitrary primary

282
00:17:11,600 --> 00:17:12,289
program

283
00:17:12,289 --> 00:17:15,850
stuff might not be initialized are you
might be in some

284
00:17:15,850 --> 00:17:18,860
we are parting shot down

285
00:17:18,860 --> 00:17:22,419
a so that's one per the unsafe miss

286
00:17:22,419 --> 00:17:25,470
the other part is that if you have

287
00:17:25,470 --> 00:17:29,299
finalize urs Witcher in a cycle then
it's hard to know

288
00:17:29,299 --> 00:17:32,650
which one to deallocate first

289
00:17:32,650 --> 00:17:35,690
because the final so in this example

290
00:17:35,690 --> 00:17:40,710
the final either in our big see couldn't
the object see has a reference to

291
00:17:40,710 --> 00:17:44,150
object the so it could tried own fetch
attributes

292
00:17:44,150 --> 00:17:47,910
love RBD York our method on it up

293
00:17:47,910 --> 00:17:52,110
and the same thing is true bob 2d and so
you don't know which one is safe to call

294
00:17:52,110 --> 00:17:52,960
first

295
00:17:52,960 --> 00:17:56,630
because they might be trying to use the
attributes of each other so it's it's a

296
00:17:56,630 --> 00:18:00,940
tangled web

297
00:18:00,940 --> 00:18:06,760
and so on the the solution to this and
see Python for a long time has been

298
00:18:06,760 --> 00:18:10,240
to just not not run finalize urs which
are in

299
00:18:10,240 --> 00:18:14,480
which are in cycles and was actually
means is that

300
00:18:14,480 --> 00:18:18,830
objects cycles which were which contain
finalize we get moved to this

301
00:18:18,830 --> 00:18:22,010
list in the garbage collection model
code: DC that garbage

302
00:18:22,010 --> 00:18:25,660
and so it would essentially leak them
and it's clear you can like

303
00:18:25,660 --> 00:18:29,929
use it for this listing DLK them safely
but a lot appeal that no other so if

304
00:18:29,929 --> 00:18:30,230
they

305
00:18:30,230 --> 00:18:34,610
someone had final I there's in cycles
then

306
00:18:34,610 --> 00:18:41,610
there they were essentially be lost

307
00:18:43,679 --> 00:18:47,220
up but this problem has been addressed
in C Python

308
00:18:47,220 --> 00:18:51,549
3.4 was like a pet for 42 I'll talk
about on the second and

309
00:18:51,549 --> 00:18:54,910
pie pie has always tried to do run the
final hours in a

310
00:18:54,910 --> 00:18:58,340
reasonable order and reasonable in this
case means do

311
00:18:58,340 --> 00:19:01,870
roughly do atop a logical sort the
object graph and

312
00:19:01,870 --> 00:19:06,150
so you try it you try to run the ones
which have the least are dependencies

313
00:19:06,150 --> 00:19:09,900
purse but at the end you pretty much
just had to pick an arbitrary finalize

314
00:19:09,900 --> 00:19:12,210
our to run it because the garbage
collector does not know

315
00:19:12,210 --> 00:19:15,559
which one is safe to run cell

316
00:19:15,559 --> 00:19:19,860
specifically in on come on

317
00:19:19,860 --> 00:19:23,620
okay specifically in pat 442 in C++
Python

318
00:19:23,620 --> 00:19:28,950
this is the WorkCover C Python developer
knee and toe on patrol

319
00:19:28,950 --> 00:19:34,470
I it proposed slowly Mon finest cyclic
garbage collector in C++ Python

320
00:19:34,470 --> 00:19:39,809
n the way it works now is that you
detect all the cycles

321
00:19:39,809 --> 00:19:44,419
in the program and then

322
00:19:44,419 --> 00:19:47,429
you

323
00:19:47,429 --> 00:19:51,799
you run finalizes on them and then you
see if the finalizes resurrect the

324
00:19:51,799 --> 00:19:54,419
objects because that's also something
you can do and finalize our

325
00:19:54,419 --> 00:19:57,690
and then if the

326
00:19:57,690 --> 00:20:02,750
the objects continue to be daddy not
have themselves to

327
00:20:02,750 --> 00:20:06,090
the alive part in the program then

328
00:20:06,090 --> 00:20:09,260
you can safely clear them so this allows

329
00:20:09,260 --> 00:20:13,010
cycles with finalizes to finally be
allocated and Ruben

330
00:20:13,010 --> 00:20:16,049
an annoyance or serve cause I weeks in
C++ Python

331
00:20:16,049 --> 00:20:19,390
programs ok

332
00:20:19,390 --> 00:20:22,409
so coming coming to the end might aikman

333
00:20:22,409 --> 00:20:27,360
me remind you both what what's I what
I'd like to cross is that

334
00:20:27,360 --> 00:20:31,970
the garbage collection can be very
subtle and difficult OPIC

335
00:20:31,970 --> 00:20:34,990
but also garbage collectors are awesome

336
00:20:34,990 --> 00:20:39,510
and especially Popeyes so she's part
time

337
00:20:39,510 --> 00:20:43,340
on and with that I will conclude my time

338
00:20:43,340 --> 00:20:46,900
and if anyone would like to lineup for
questions

339
00:20:46,900 --> 00:20:51,429
let me point you too some other sources
of information

340
00:20:51,429 --> 00:20:54,600
on I've there's there's a big topic

341
00:20:54,600 --> 00:20:57,750
and I have not covered all the many
things

342
00:20:57,750 --> 00:21:01,000
which are interesting time out for
example I did not talk about we crafts

343
00:21:01,000 --> 00:21:04,630
wreak references allow and you can
always

344
00:21:04,630 --> 00:21:07,630
look at the Wikipedia article and or

345
00:21:07,630 --> 00:21:11,110
are the sources I Z authoritative source

346
00:21:11,110 --> 00:21:18,110
true alright

347
00:21:23,790 --> 00:21:26,290
okay okay so

348
00:21:26,290 --> 00:21:30,300
you got your nursery industry has all
the fresh objects that you making

349
00:21:30,300 --> 00:21:33,440
and you keep intractable the point is
you making

350
00:21:33,440 --> 00:21:37,140
into that nursery is there an explicit
way

351
00:21:37,140 --> 00:21:40,140
to say making the nursery and a few

352
00:21:40,140 --> 00:21:43,400
halfway through then go actually you
know what discuss nursery

353
00:21:43,400 --> 00:21:47,430
I E suffer transactional memory has not
been looking into that

354
00:21:47,430 --> 00:21:52,040
are so there's not a way to control this
with

355
00:21:52,040 --> 00:21:55,130
a Python program are I

356
00:21:55,130 --> 00:21:58,660
I'm not quite sure with how garbage
collection works and that's %uh for

357
00:21:58,660 --> 00:21:59,830
transnational memory

358
00:21:59,830 --> 00:22:04,820
its I I'm I've not been working on that
so you'd you'd have to ask Carmen

359
00:22:04,820 --> 00:22:08,350
person who's been working on that abut I
do know that the garbage collector has

360
00:22:08,350 --> 00:22:09,590
very deep integration

361
00:22:09,590 --> 00:22:16,590
with suffer transactional memory
importation pipeline thanks for talking

362
00:22:17,220 --> 00:22:22,310
I one thing's a I'm notices most lived
like more recent

363
00:22:22,310 --> 00:22:25,820
developments and garbage collection all
assume that the garbage collection

364
00:22:25,820 --> 00:22:26,530
processes

365
00:22:26,530 --> 00:22:30,610
a synchronous so happened that some
arbitrary point in time after the are

366
00:22:30,610 --> 00:22:34,620
Jack becomes collectible I'm is there
any

367
00:22:34,620 --> 00:22:38,200
feeling in a pluggable part by by is
there any way to

368
00:22:38,200 --> 00:22:41,390
implement a garbage collector they would
have liked more synchronous behavior

369
00:22:41,390 --> 00:22:44,520
underscore search like the reference
count has reached zero

370
00:22:44,520 --> 00:22:49,770
cleaning up now yeah so pie pie is
actually had a reference counting

371
00:22:49,770 --> 00:22:51,960
garbage collection implementation

372
00:22:51,960 --> 00:22:55,590
I just to show that you could do it it
was pretty inefficient

373
00:22:55,590 --> 00:22:58,960
so it's certainly possible to do but I
think

374
00:22:58,960 --> 00:23:02,010
the the common

375
00:23:02,010 --> 00:23:05,220
the common feeling among most garbage
collection

376
00:23:05,220 --> 00:23:09,100
researchers is that a synchronous
garbage collectors

377
00:23:09,100 --> 00:23:12,170
allow for a lot more up our and

378
00:23:12,170 --> 00:23:17,150
flexibility in in optimizing them so
it's it's certainly possible in Popeyes

379
00:23:17,150 --> 00:23:17,730
model

380
00:23:17,730 --> 00:23:21,130
but I I don't it's probably not
something you'd actually want to use

381
00:23:21,130 --> 00:23:24,300
on hi

382
00:23:24,300 --> 00:23:27,780
thanks for the talk i was just wondering
the

383
00:23:27,780 --> 00:23:31,190
pipe a nursery sounds like the exact
same thing

384
00:23:31,190 --> 00:23:35,670
as the job eat in space is there some
notable difference that a missing

385
00:23:35,670 --> 00:23:38,950
on now the I'd I think the area so I
mean they

386
00:23:38,950 --> 00:23:42,070
deep they differ in in small details but
up

387
00:23:42,070 --> 00:23:45,670
a lot of the stuff was I mean a lot
everything that we've been implemented

388
00:23:45,670 --> 00:23:49,110
in dynamically which is now is like in
Scheme enter birds in the eighties so

389
00:23:49,110 --> 00:23:53,420
ok we're just dip II mean and this also
shared a lot of stuff with

390
00:23:53,420 --> 00:23:57,020
arm modern JavaScript garbage collectors
like

391
00:23:57,020 --> 00:24:00,320
to be aight and spider monkey also do
this kind so it's a

392
00:24:00,320 --> 00:24:03,890
it's a very as I say as a very common
idea in the importation a dynamic

393
00:24:03,890 --> 00:24:04,460
languages

394
00:24:04,460 --> 00:24:08,700
okay and then also was taken to know
that someone miss this

395
00:24:08,700 --> 00:24:11,740
is there to survive all spaces

396
00:24:11,740 --> 00:24:15,730
Lake what the Java garbage collector has
for young generations to

397
00:24:15,730 --> 00:24:20,020
word is played by do something else so
in the in their current

398
00:24:20,020 --> 00:24:23,320
implantation there's they're sort of

399
00:24:23,320 --> 00:24:27,040
to there's the nursery in and there's a
10-year generation arm

400
00:24:27,040 --> 00:24:31,250
but there's are in one of the other
garbage collectors you can have more

401
00:24:31,250 --> 00:24:32,120
generations

402
00:24:32,120 --> 00:24:36,250
in fact in the sea the Sea Pines on
cyclic garbage collector has three

403
00:24:36,250 --> 00:24:37,770
generations I think now

404
00:24:37,770 --> 00:24:43,370
okay thanks hey

405
00:24:43,370 --> 00:24:47,680
so on a building on the the previous
question

406
00:24:47,680 --> 00:24:51,780
arm their art are a lot of languages

407
00:24:51,780 --> 00:24:55,560
in the bigger family tree the Python
belongs to

408
00:24:55,560 --> 00:24:59,420
all the way from small talks very sinker
nations to

409
00:24:59,420 --> 00:25:02,940
self and he as well as JavaScript and

410
00:25:02,940 --> 00:25:07,410
I was wondering if there are amongst the
many different generator

411
00:25:07,410 --> 00:25:10,840
not senators are the many different GC's
bed i buy has

412
00:25:10,840 --> 00:25:15,630
I've there any new research directions
for object-based languages that you have

413
00:25:15,630 --> 00:25:16,510
been exploring

414
00:25:16,510 --> 00:25:22,290
that nobody else has hit upon yet Hong

415
00:25:22,290 --> 00:25:25,400
but see

416
00:25:25,400 --> 00:25:29,230
I it I'm I have to admit something which
is it's been it's been awhile since I

417
00:25:29,230 --> 00:25:31,670
worked intensely on the pipe I garbage
collector so

418
00:25:31,670 --> 00:25:34,860
YouTube you might have to ask arm in arm

419
00:25:34,860 --> 00:25:39,100
and there's another guy named Carl fruit
bowls about about that

420
00:25:39,100 --> 00:25:43,190
I I can't think of anything at the time
I had sorry Norris

421
00:25:43,190 --> 00:25:46,360
thank you very much I

422
00:25:46,360 --> 00:25:50,980
are for both C Python and by how loaded
garbage collectors deal with our

423
00:25:50,980 --> 00:25:54,790
fragmentation %ah yes I'll another son

424
00:25:54,790 --> 00:25:58,760
C Python once the al Qaeda operatives
there forever

425
00:25:58,760 --> 00:26:03,930
are so it its it's pretty much a
function of how good your

426
00:26:03,930 --> 00:26:08,340
your heap al Qaeda is your your
underlying

427
00:26:08,340 --> 00:26:12,500
a memory allocator well it because it
actually depends on the platform so see

428
00:26:12,500 --> 00:26:14,830
python has its own

429
00:26:14,830 --> 00:26:18,500
a memory allocation sorta

430
00:26:18,500 --> 00:26:21,810
thing called of my like which

431
00:26:21,810 --> 00:26:25,410
in theory should produce the
fragmentation be faster Python programs

432
00:26:25,410 --> 00:26:25,980
but

433
00:26:25,980 --> 00:26:29,680
up your kind of the kind of stuck where
you put the object

434
00:26:29,680 --> 00:26:34,650
and you can write programs which cause a
lot of fragmentation high in pipe I

435
00:26:34,650 --> 00:26:38,660
says you can move the object around 10
things you can do is kind of compact all

436
00:26:38,660 --> 00:26:40,330
the objects into one part memory

437
00:26:40,330 --> 00:26:43,370
up to in order to reduce fragmentation I
so

438
00:26:43,370 --> 00:26:46,530
pipe I can certainly address that

439
00:26:46,530 --> 00:26:50,310
go thanks

440
00:26:50,310 --> 00:26:52,870
thank you for coming looks like that the
profession thanks everyone

