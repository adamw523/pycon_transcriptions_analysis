1
00:00:02,480 --> 00:00:05,370
good afternoon everyone thank you so
much

2
00:00:05,370 --> 00:00:09,650
this is the last session I what does
give yourselves a round of applause you

3
00:00:09,650 --> 00:00:10,280
made it

4
00:00:10,280 --> 00:00:17,280
I hope you guys had a fantastic time
this has been a great conference

5
00:00:17,350 --> 00:00:21,100
um just a final note I do wanna push

6
00:00:21,100 --> 00:00:25,689
this sprints one last time as you may
well know this is not the last day

7
00:00:25,689 --> 00:00:29,289
a bike on their arse developments Prince
happening

8
00:00:29,289 --> 00:00:32,430
tomorrow onwards and this is

9
00:00:32,430 --> 00:00:36,120
the best time to work with the world's
best Python programmers the world's best

10
00:00:36,120 --> 00:00:37,320
minds in the

11
00:00:37,320 --> 00:00:40,730
you know like in this city you have the
advantage of working on high-profile

12
00:00:40,730 --> 00:00:43,670
projects like mercurial and type I

13
00:00:43,670 --> 00:00:47,450
in pyramid and all sorts of other
products including getting help for your

14
00:00:47,450 --> 00:00:52,789
own products um at the and the lightning
talks which I highly encourage that you

15
00:00:52,789 --> 00:00:53,640
go to

16
00:00:53,640 --> 00:00:58,590
I you will be able to pitch for 20
seconds whatever products that you want

17
00:00:58,590 --> 00:01:00,640
to have help with please go there

18
00:01:00,640 --> 00:01:04,930
pitcher project but any kind a product
that you wanted to have advice on

19
00:01:04,930 --> 00:01:08,210
even if it's a little hobby thing go and
pitch it

20
00:01:08,210 --> 00:01:12,799
show up to the sprints all our if you
get really excited about someone else

21
00:01:12,799 --> 00:01:15,810
project please go and contributes the
best way

22
00:01:15,810 --> 00:01:19,240
to get started in open source now

23
00:01:19,240 --> 00:01:22,810
it's my pleasure to introduce call Meyer

24
00:01:22,810 --> 00:01:25,900
who I'll when he's not hacking on
pipeline

25
00:01:25,900 --> 00:01:29,490
plays a mean Ultimate Frisbee and he's
gonna be talking about setting your code

26
00:01:29,490 --> 00:01:31,549
free releasing in maintaining

27
00:01:31,549 --> 00:01:34,560
and open source i dont live ripley's a
big round of path

28
00:01:34,560 --> 00:01:41,560
thank you

29
00:01:43,320 --> 00:01:48,040
i'm carl myer I work for our bird we
build web applications in Dubai time

30
00:01:48,040 --> 00:01:49,729
code consultation and review

31
00:01:49,729 --> 00:01:53,470
so if you want to hire a second let me
know are we talking about

32
00:01:53,470 --> 00:01:57,079
releasing in maintaining your first open
source Python library

33
00:01:57,079 --> 00:02:01,149
the premise of this talk is that you
have code

34
00:02:01,149 --> 00:02:04,880
writing that code is outside the scope
of this particular talk

35
00:02:04,880 --> 00:02:09,209
we presume you haven't already we're
presuming also

36
00:02:09,209 --> 00:02:13,640
that you want me to use your code and a
particular means is the open stall

37
00:02:13,640 --> 00:02:14,090
there's

38
00:02:14,090 --> 00:02:18,349
other methods of getting your code to
users web application deployment

39
00:02:18,349 --> 00:02:22,459
or creating gooey installers or
operating system packages

40
00:02:22,459 --> 00:02:26,459
those methods of getting code users are
also outside the scope of the stock

41
00:02:26,459 --> 00:02:32,050
will be discussing pip install and the
other premises that you want me to

42
00:02:32,050 --> 00:02:33,200
contribute to your code

43
00:02:33,200 --> 00:02:38,269
and presumably you want to be able to
accept my contributions without breaking

44
00:02:38,269 --> 00:02:40,200
your software or losing your sanity

45
00:02:40,200 --> 00:02:44,459
so you look up some documentation on the
internet about how to do this for the

46
00:02:44,459 --> 00:02:45,489
Python project

47
00:02:45,489 --> 00:02:50,989
and you may find

48
00:02:50,989 --> 00:02:55,750
more than one source of information and
documentation and more than one relevant

49
00:02:55,750 --> 00:02:56,590
project

50
00:02:56,590 --> 00:03:00,069
and it might be a little confusing
finding your way through and navigating

51
00:03:00,069 --> 00:03:04,280
the the various advice and documentation
when you're doing something for the

52
00:03:04,280 --> 00:03:04,980
first time

53
00:03:04,980 --> 00:03:08,840
too many choices can kill your
motivation to finish it

54
00:03:08,840 --> 00:03:12,280
so this talk the idea is to present to
set a rails

55
00:03:12,280 --> 00:03:16,379
for releasing in maintaining your first
open source Python project

56
00:03:16,379 --> 00:03:19,470
it's not the only way to do it there are
many choices that you could make

57
00:03:19,470 --> 00:03:24,440
this is one set of choices that can work
so will be long and opinions here short

58
00:03:24,440 --> 00:03:25,180
on traces

59
00:03:25,180 --> 00:03:28,450
the ideas from zero toss them in 20
minutes

60
00:03:28,450 --> 00:03:31,890
some of the awesome that wall have after
20 minutes are over

61
00:03:31,890 --> 00:03:35,890
includes public HTML documentation

62
00:03:35,890 --> 00:03:40,060
with responsive theme that automatically
updates when you push the repo

63
00:03:40,060 --> 00:03:44,659
I'm tests that automatically run every
time you push the repository

64
00:03:44,659 --> 00:03:49,280
a pip install working and a project
that's welcoming to new contributors

65
00:03:49,280 --> 00:03:52,730
and if you've done this before if you're
already the owner of a python open

66
00:03:52,730 --> 00:03:53,620
source project

67
00:03:53,620 --> 00:03:59,180
hopefully I'll still pick up a new
trigger to you the road map for this

68
00:03:59,180 --> 00:04:02,260
presentation includes talking about a
project structure

69
00:04:02,260 --> 00:04:05,739
choosing a license where to host your
code

70
00:04:05,739 --> 00:04:09,420
your documentation testing in continuous
integration

71
00:04:09,420 --> 00:04:12,430
packaging your code so people can
install it

72
00:04:12,430 --> 00:04:16,090
and setting up a community around your
project that's welcoming deter new

73
00:04:16,090 --> 00:04:20,410
contributors

74
00:04:20,410 --> 00:04:24,389
here's a bare-bones project structure
for a hypothetical project

75
00:04:24,389 --> 00:04:27,419
have named a hypothetical project
high-flyer which I was shocked to

76
00:04:27,419 --> 00:04:30,699
discover is not yet registered on the
paper and packaging decks

77
00:04:30,699 --> 00:04:33,970
so consider this the 0 day for that a

78
00:04:33,970 --> 00:04:36,919
who we'll see who's the first to
register and build something under that

79
00:04:36,919 --> 00:04:39,370
name

80
00:04:39,370 --> 00:04:42,740
while the docs directory with inner out
a repository directory for a

81
00:04:42,740 --> 00:04:44,300
documentation will live

82
00:04:44,300 --> 00:04:48,370
well have a top-level python package
containing all your Python code

83
00:04:48,370 --> 00:04:51,509
that's marked with every stirred under
in net dot pi file and probably some

84
00:04:51,509 --> 00:04:52,360
other

85
00:04:52,360 --> 00:04:56,910
Python modules what a test directory
where a test live

86
00:04:56,910 --> 00:05:02,740
a license file manifest dot in we'll
talk about a little later

87
00:05:02,740 --> 00:05:07,139
a read me and a set up top I which is
what makes a package installed by other

88
00:05:07,139 --> 00:05:09,960
users

89
00:05:09,960 --> 00:05:12,919
the first decision you have to make you
for going to release some code is open

90
00:05:12,919 --> 00:05:16,090
source is what license to release it
under

91
00:05:16,090 --> 00:05:20,979
obligatory disclaimer am NOT a lawyer
know what's on the slide as legal advice

92
00:05:20,979 --> 00:05:26,039
but your license is the conditions under
which I'm a user code

93
00:05:26,039 --> 00:05:29,300
if you don't have a license the default
is all rights reserved

94
00:05:29,300 --> 00:05:33,169
so the fact that you've pushed your code
to get herb does not mean I can use it

95
00:05:33,169 --> 00:05:36,669
if it doesn't have an open source
license then a

96
00:05:36,669 --> 00:05:42,560
you have not given me any conditions
under which I'm allowed to use your code

97
00:05:42,560 --> 00:05:46,910
if you aren't sure what license to use I
recommend starting with BSD your MIT

98
00:05:46,910 --> 00:05:48,680
license

99
00:05:48,680 --> 00:05:53,770
the XOR a less restrictive open source
licenses essentially all you ask from

100
00:05:53,770 --> 00:05:54,669
your users

101
00:05:54,669 --> 00:05:58,280
is that if they modifier redistribute or
code they preserve

102
00:05:58,280 --> 00:06:02,080
your name attached to it so you keep
your credit for writing the code

103
00:06:02,080 --> 00:06:05,560
and they preserve the license under
which you've released the code that you

104
00:06:05,560 --> 00:06:08,080
wrote

105
00:06:08,080 --> 00:06:11,090
so if you're interested in having people
use our software

106
00:06:11,090 --> 00:06:15,319
almost anyone can use our software under
those conditions

107
00:06:15,319 --> 00:06:18,370
other reasonable alternatives if you
know why you need them

108
00:06:18,370 --> 00:06:24,199
included the GPL or LGPL the Apache
License are the Mozilla Public License

109
00:06:24,199 --> 00:06:28,100
the GP on particulars a bit more
restrictive it requires

110
00:06:28,100 --> 00:06:32,580
a anyone redistributing or modifying
your code to resolve their contributions

111
00:06:32,580 --> 00:06:34,090
under the same license

112
00:06:34,090 --> 00:06:37,289
if you're concerned about freeloaders
you may think about that

113
00:06:37,289 --> 00:06:40,610
it will probably mean that some people
choose not to use our software so that's

114
00:06:40,610 --> 00:06:44,100
the tradeoff

115
00:06:44,100 --> 00:06:47,440
don't use any other licenses decides
these

116
00:06:47,440 --> 00:06:52,099
ago the goal the license is to it
clarify for someone else the terms under

117
00:06:52,099 --> 00:06:55,130
which they can use their software and
reduce their concern that they'll be

118
00:06:55,130 --> 00:06:57,580
getting into legal trouble by using our
software

119
00:06:57,580 --> 00:07:01,500
if you use a less well-known license
you're simply giving potential users

120
00:07:01,500 --> 00:07:02,780
have your software

121
00:07:02,780 --> 00:07:05,960
a reason to question whether it's safe
to use

122
00:07:05,960 --> 00:07:09,240
you don't want someone considering using
your code to feel like they have to go

123
00:07:09,240 --> 00:07:11,030
ask their legal department

124
00:07:11,030 --> 00:07:14,740
whether it's safe to do so so you avoid
that by using a well known in common

125
00:07:14,740 --> 00:07:19,020
license and you hope to avoid license
plate proliferation

126
00:07:19,020 --> 00:07:23,259
quick at it most other advice on the
slide comes from a lightning talk to

127
00:07:23,259 --> 00:07:27,289
Jacob Kaplan Moss gave a Django Connie
you 2010

128
00:07:27,289 --> 00:07:30,789
if you find my slides online laters this
is a link to that lighting talking you

129
00:07:30,789 --> 00:07:32,030
can view

130
00:07:32,030 --> 00:07:36,780
see that advice in a little more depth

131
00:07:36,780 --> 00:07:40,530
so here's a sample of how we apply a
licensed or corrode we simply put in the

132
00:07:40,530 --> 00:07:42,090
license to txt file

133
00:07:42,090 --> 00:07:45,789
or in some cases some people call the
file copying

134
00:07:45,789 --> 00:07:49,840
the tax title license you want to use
this is the to cause BSD license what

135
00:07:49,840 --> 00:07:50,470
are the ones I

136
00:07:50,470 --> 00:07:54,729
recommended as a a good choice

137
00:07:54,729 --> 00:07:57,449
we got a lot of items to get through the
stalks a think for some other mercury

138
00:07:57,449 --> 00:07:59,530
very short and sweet as one of them

139
00:07:59,530 --> 00:08:04,479
you should know Serco don't get hurt
because that's where the people are

140
00:08:04,479 --> 00:08:08,740
documentation is another one that
certain sweet

141
00:08:08,740 --> 00:08:11,830
i like reading code I read a lot of code

142
00:08:11,830 --> 00:08:16,289
I will happily Rieger code to find a bug
to find out what I'm doing wrong to fix

143
00:08:16,289 --> 00:08:17,090
a bug

144
00:08:17,090 --> 00:08:20,250
or just a better understand what your
library does

145
00:08:20,250 --> 00:08:23,610
but if I have to read your code in order
to even start using it to figure out the

146
00:08:23,610 --> 00:08:28,229
very first Apple have what I need to
call in what order to make it do a thing

147
00:08:28,229 --> 00:08:31,270
then I'm probably going to decide that
it's easier just to rate myself

148
00:08:31,270 --> 00:08:36,450
or use a competing library for the same
purpose

149
00:08:36,450 --> 00:08:39,580
fortunately how to write your docs and
how to host them are also very easy

150
00:08:39,580 --> 00:08:41,120
choices these days

151
00:08:41,120 --> 00:08:44,860
you should write your docs using Sphinx
which is the tool the Pythons on docs

152
00:08:44,860 --> 00:08:46,250
are written in

153
00:08:46,250 --> 00:08:50,880
and you should host a doc said read the
docs

154
00:08:50,880 --> 00:08:54,110
to get started with things will pip
install it

155
00:08:54,110 --> 00:08:58,660
change into the docs directory run the
Sphinx quick start to all

156
00:08:58,660 --> 00:09:02,000
which I just ask you a series of
questions for your first time most

157
00:09:02,000 --> 00:09:07,360
likely the default answered every one of
those questions will serve just fine

158
00:09:07,360 --> 00:09:11,200
once you've answered all those questions
you have a number files in your docs

159
00:09:11,200 --> 00:09:14,040
directory in one of them will be indexed
rst

160
00:09:14,040 --> 00:09:16,610
and you can just jump right and in
Dexter St and start writing

161
00:09:16,610 --> 00:09:18,110
documentation

162
00:09:18,110 --> 00:09:21,490
spring stocks are written in the
restructured text format

163
00:09:21,490 --> 00:09:24,600
if you haven't written restructure text
before it's very easy to get started

164
00:09:24,600 --> 00:09:25,680
with

165
00:09:25,680 --> 00:09:28,610
we have underlined headers you can have
different layers have headers with

166
00:09:28,610 --> 00:09:29,230
different

167
00:09:29,230 --> 00:09:33,250
underline characters we have in line
formatting bold

168
00:09:33,250 --> 00:09:37,790
we can have code liberals in line and we
can have code example just introduced

169
00:09:37,790 --> 00:09:39,029
with the double cone

170
00:09:39,029 --> 00:09:43,480
and this code example automatically the
syntax highlighted

171
00:09:43,480 --> 00:09:47,420
as Python code

172
00:09:47,420 --> 00:09:53,390
even if you write exactly this much
documentation for your package

173
00:09:53,390 --> 00:09:56,680
it's already miles ahead a package
without any documentation

174
00:09:56,680 --> 00:09:59,290
I can look at this and I already
understand to be the most basic thing

175
00:09:59,290 --> 00:10:00,459
with your package

176
00:10:00,459 --> 00:10:07,459
this is what I need to do and this this
would take five minutes to rate

177
00:10:07,810 --> 00:10:13,790
so then run make HTML to generate an
HTML version for documentation

178
00:10:13,790 --> 00:10:17,230
and after we've done that spinks gives
us this and ice

179
00:10:17,230 --> 00:10:20,510
table of contents based on our header
structure

180
00:10:20,510 --> 00:10:25,800
we see all our syntax highlighting their
inner cord example

181
00:10:25,800 --> 00:10:30,959
say just get html files so anyone host
is publicly and for that we use read the

182
00:10:30,959 --> 00:10:31,690
docs

183
00:10:31,690 --> 00:10:35,769
so we go to read the docs .org give read
the docs a few pieces of information and

184
00:10:35,769 --> 00:10:37,010
name for package

185
00:10:37,010 --> 00:10:41,399
in the repository URL and then we head
over to get herb

186
00:10:41,399 --> 00:10:46,320
and activate the redox web book from the
long list get a Web Works

187
00:10:46,320 --> 00:10:50,160
and push or project and will have
documentation built

188
00:10:50,160 --> 00:10:54,810
posted publicly read the docs .org using
their theme which is mobile responsive

189
00:10:54,810 --> 00:10:57,450
there's you can build not multiple
versions have your docs it'll

190
00:10:57,450 --> 00:11:00,970
automatically build one for various tags
are branches in your code base

191
00:11:00,970 --> 00:11:04,070
and gives you a virgin switcher for
people to choose which version they want

192
00:11:04,070 --> 00:11:10,880
to read

193
00:11:10,880 --> 00:11:15,110
if your code is changing over time and
you don't have automated tests for it

194
00:11:15,110 --> 00:11:18,850
or all secure a staff over time the
likelihood

195
00:11:18,850 --> 00:11:23,279
attack code being broken approaches one

196
00:11:23,279 --> 00:11:27,829
having tests is important for any code
but for open source code it can be

197
00:11:27,829 --> 00:11:31,209
especially important

198
00:11:31,209 --> 00:11:35,360
here's into the a a problem that open
source libraries often have is the

199
00:11:35,360 --> 00:11:37,149
dependency matrix problem

200
00:11:37,149 --> 00:11:40,660
if we have five versions a python we
want to support

201
00:11:40,660 --> 00:11:44,149
and five versions have a dependency say
Django in this case the for writing a

202
00:11:44,149 --> 00:11:47,230
project that depends on Django

203
00:11:47,230 --> 00:11:50,500
now we have 25 different boxes here

204
00:11:50,500 --> 00:11:54,019
that represent environments that we
ideally should be testing if we really

205
00:11:54,019 --> 00:11:58,709
mean to support all these versions of
all these dependencies

206
00:11:58,709 --> 00:12:02,500
if you aren't actually creating 25
virtual ends and running your tests

207
00:12:02,500 --> 00:12:04,410
under any one of those environments

208
00:12:04,410 --> 00:12:07,680
then your claim to support all those
environments is purely theoretical

209
00:12:07,680 --> 00:12:10,870
and over time it's almost certainly not
true

210
00:12:10,870 --> 00:12:15,529
fortunately there's a tool to help with
this problem

211
00:12:15,529 --> 00:12:19,660
the talks to with one command talks will
create a whole bunch a virtual ans all

212
00:12:19,660 --> 00:12:23,060
the ones we need for all the environment
in your test inside

213
00:12:23,060 --> 00:12:28,560
and will run your test in all those
environments

214
00:12:28,560 --> 00:12:32,120
here's an example the very simple talk
setup you

215
00:12:32,120 --> 00:12:35,180
placer talks configuration in the talks
that I and II file

216
00:12:35,180 --> 00:12:39,540
in the repository you give it list if
the environments

217
00:12:39,540 --> 00:12:43,269
in which you want to run your tests this
is a very simple talks that I and II

218
00:12:43,269 --> 00:12:47,300
we're just running our tests under
Python 2.7 Python 3 out for another pipe

219
00:12:47,300 --> 00:12:48,459
I

220
00:12:48,459 --> 00:12:51,519
regionally I had only the first year
then Alex Gaynor

221
00:12:51,519 --> 00:12:54,300
looked over my shoulder and saw my
slides men tied me up and wouldn't let

222
00:12:54,300 --> 00:12:58,940
me go on to lay out a pipe I

223
00:12:58,940 --> 00:13:02,589
then we also define the dependencies for
for testing our project so in this case

224
00:13:02,589 --> 00:13:04,990
will say we want to install pie test

225
00:13:04,990 --> 00:13:08,320
and then the commands the need to be run
to test our project in this case will

226
00:13:08,320 --> 00:13:09,649
just run pilot test

227
00:13:09,649 --> 00:13:13,089
you can stick anything in here that you
can run a shell prompt and talks will

228
00:13:13,089 --> 00:13:15,240
decide whether your test pastor failed

229
00:13:15,240 --> 00:13:18,760
simply based on the return code so you
can

230
00:13:18,760 --> 00:13:22,990
use any kind of testing framework can
imagine with talks

231
00:13:22,990 --> 00:13:26,740
you can of course do much more complex
things talks can handle the form

232
00:13:26,740 --> 00:13:30,700
a matrix of dependencies and Python
versions that we saw in the previous

233
00:13:30,700 --> 00:13:32,350
matrix

234
00:13:32,350 --> 00:13:35,220
I'm showing a very simple example here
if you wanna see are the more complex

235
00:13:35,220 --> 00:13:37,980
things you can check the documentation I
be happy to show you some

236
00:13:37,980 --> 00:13:41,399
real-life examples after the talk

237
00:13:41,399 --> 00:13:46,649
when we run talks it creates a packages
up our project it creates a virtual end

238
00:13:46,649 --> 00:13:50,050
for Python 2.7 in this case it installs
are dependencies

239
00:13:50,050 --> 00:13:53,440
installer project into the virtual and
runs our tests

240
00:13:53,440 --> 00:13:57,620
seriously the output from pie test
running our tests 3 three test passed

241
00:13:57,620 --> 00:14:01,240
and then you'll see exactly the same
output for Python 3.4 and again for pie

242
00:14:01,240 --> 00:14:04,100
pie

243
00:14:04,100 --> 00:14:06,850
and then at the end it informs us that
our test passed on all three

244
00:14:06,850 --> 00:14:07,639
environments

245
00:14:07,639 --> 00:14:11,050
and gives a smiley face

246
00:14:11,050 --> 00:14:14,260
so you have talk set up that's great
with one command you can run tests and

247
00:14:14,260 --> 00:14:16,740
verify the support all the environments
you claim to you

248
00:14:16,740 --> 00:14:20,800
so you get a poor request from someone
so you open your terminal

249
00:14:20,800 --> 00:14:24,970
you add the source of the poor request
as a get remote you fetch that branch

250
00:14:24,970 --> 00:14:29,250
the source branch for the poor request
and then you run talks

251
00:14:29,250 --> 00:14:32,720
just a lot nicer than having to run your
test 25 times that poor quest but

252
00:14:32,720 --> 00:14:33,660
they're still bitter

253
00:14:33,660 --> 00:14:36,820
boilerplate work in there you have to do
to review a poor request

254
00:14:36,820 --> 00:14:41,440
went to be nice if when you first look
at a poor request your project

255
00:14:41,440 --> 00:14:44,930
you already knew whether the test passed
or failed

256
00:14:44,930 --> 00:14:48,600
this used to be a hard thing to do to
set up today fortunately it's easy

257
00:14:48,600 --> 00:14:50,860
thanks to a number services

258
00:14:50,860 --> 00:14:54,920
wanna talk about today is Travis CI dork
because it's the one I've used

259
00:14:54,920 --> 00:14:58,230
droned I oh i think is another service
that does similar things

260
00:14:58,230 --> 00:15:01,920
there may be others Travis CI will

261
00:15:01,920 --> 00:15:08,350
provide continuous integration for free
for public data projects

262
00:15:08,350 --> 00:15:11,480
to use its very easy go to traverse the
I dot org

263
00:15:11,480 --> 00:15:15,269
log in with your YouTube account using a
lot it will give you a list of all your

264
00:15:15,269 --> 00:15:16,149
public get

265
00:15:16,149 --> 00:15:20,269
data repositories and you simply quickly
on button for any of them that you want

266
00:15:20,269 --> 00:15:23,160
to run your tests on Travis the I dot
org

267
00:15:23,160 --> 00:15:28,839
and it will automatically set up the web
or can't get hard for those projects

268
00:15:28,839 --> 00:15:31,889
second thing we have to do is tell
Travis how to run our tests we do this

269
00:15:31,889 --> 00:15:35,029
via Travis diagram of Iona repository

270
00:15:35,029 --> 00:15:38,949
it this there's a similar purpose to the
talks that I and I we tell Travis that

271
00:15:38,949 --> 00:15:40,680
it's a Python project

272
00:15:40,680 --> 00:15:43,810
we want to run our tests under these
three Python versions

273
00:15:43,810 --> 00:15:47,089
we need these install commands run
before the tests are run

274
00:15:47,089 --> 00:15:50,970
and this is the script for running our
tests I dot test

275
00:15:50,970 --> 00:15:54,350
there are tools to automatically convert

276
00:15:54,350 --> 00:15:57,490
talks that I and II to a travesty I am
on vice versa

277
00:15:57,490 --> 00:16:01,800
one is called pan CI you can also
districts you can use to it

278
00:16:01,800 --> 00:16:04,820
make you sadder talks environments
within your traversed I am or

279
00:16:04,820 --> 00:16:07,690
for my projects I tend to just maintain
them both in parallel they don't change

280
00:16:07,690 --> 00:16:10,310
that often it's not hard to do

281
00:16:10,310 --> 00:16:14,310
and simpler so once you've done that

282
00:16:14,310 --> 00:16:16,930
you'll get something like this from
Travis every time he pushed the

283
00:16:16,930 --> 00:16:18,000
repository

284
00:16:18,000 --> 00:16:20,759
it'll summarize whether the bill passed
or failed and show you teach

285
00:16:20,759 --> 00:16:22,610
environmental you specified

286
00:16:22,610 --> 00:16:28,860
whether that environment pastor failed

287
00:16:28,860 --> 00:16:32,519
and every time send someone sends a poor
request to your get have

288
00:16:32,519 --> 00:16:36,209
repository get help or even show you
about the poor request Travis will run

289
00:16:36,209 --> 00:16:38,670
your tests using the app or request code

290
00:16:38,670 --> 00:16:41,740
and get help I'll tell you whether the
test pastor failed so the first moment

291
00:16:41,740 --> 00:16:42,980
you look at APO request

292
00:16:42,980 --> 00:16:47,230
you already know whether bro protests

293
00:16:47,230 --> 00:16:51,620
so you also want someone to be able to
tap install your thing

294
00:16:51,620 --> 00:16:55,180
the key to that is the setup I file

295
00:16:55,180 --> 00:16:58,750
will just look at a sample set up top I
go through some other

296
00:16:58,750 --> 00:17:01,800
the key elements in it

297
00:17:01,800 --> 00:17:05,069
in this setup I we're gonna you setup
tools

298
00:17:05,069 --> 00:17:09,429
which is a third-party project it's not
part a python standard library

299
00:17:09,429 --> 00:17:12,919
in practice almost everyone has it if
you're concerned about people being able

300
00:17:12,919 --> 00:17:14,419
to pip install your code

301
00:17:14,419 --> 00:17:17,760
paper lies on setup tools see you can
assume that your users will have set up

302
00:17:17,760 --> 00:17:18,579
tools already

303
00:17:18,579 --> 00:17:23,660
in that scenario we have a remade rst
file

304
00:17:23,660 --> 00:17:27,439
which we wrote person very basic
documentation may be linking to our for

305
00:17:27,439 --> 00:17:29,030
documentation

306
00:17:29,030 --> 00:17:32,620
and I get help or displayed on the front
page for project on github

307
00:17:32,620 --> 00:17:36,840
an the Python package index has a
similar longdescription where you could

308
00:17:36,840 --> 00:17:40,010
have restructured text format it
description of your project

309
00:17:40,010 --> 00:17:43,980
so it's nice to reuse the read me we've
already written as our long description

310
00:17:43,980 --> 00:17:45,020
on the package index

311
00:17:45,020 --> 00:17:48,030
so we can do that and set up I just by
opening the read me

312
00:17:48,030 --> 00:17:52,120
and ass assigning its contents or long
description

313
00:17:52,120 --> 00:17:55,919
we call the setup function when you
execute supped up I the setup function

314
00:17:55,919 --> 00:17:59,620
will magically do some things based on
whatever command line arguments he gave

315
00:17:59,620 --> 00:18:04,679
every pass to set up I a variety of
meta-data about our package

316
00:18:04,679 --> 00:18:08,150
so the name in the package the version

317
00:18:08,150 --> 00:18:12,970
a short description are long description
the author's name the author's e-mail:

318
00:18:12,970 --> 00:18:16,730
URL homepage for the project the

319
00:18:16,730 --> 00:18:21,510
rest of Python packages in the projects
in this case we just have one top level

320
00:18:21,510 --> 00:18:22,130
package

321
00:18:22,130 --> 00:18:28,039
I fly install requires a story can
specify dependencies and other packages

322
00:18:28,039 --> 00:18:31,320
in this case will say world we depend on
the six package which is

323
00:18:31,320 --> 00:18:35,679
tools for supporting pipe onto and
Python 3 in a single code base

324
00:18:35,679 --> 00:18:40,260
and then lastly trove classifiers these
allow you provide extra meditate about

325
00:18:40,260 --> 00:18:44,130
your package which automated tools can
use to collect statistics on

326
00:18:44,130 --> 00:18:47,570
on the package index or make decisions
about

327
00:18:47,570 --> 00:18:50,990
about your to do things about your your
software these are not

328
00:18:50,990 --> 00:18:55,340
used by Pepe so specifying your Python
version support here won't affect what

329
00:18:55,340 --> 00:18:57,120
pic will or won't install

330
00:18:57,120 --> 00:19:00,820
but it can still be useful for knowing
how many packages

331
00:19:00,820 --> 00:19:04,980
a on on packaging tech support by phone
three for instance if you

332
00:19:04,980 --> 00:19:08,140
provide the versions the support here
and your license here

333
00:19:08,140 --> 00:19:15,140
also is it just providing information to
your users in a structured way

334
00:19:15,250 --> 00:19:18,600
another file we need for packaging is
manifest dot and

335
00:19:18,600 --> 00:19:21,780
when Python when you're supped up I

336
00:19:21,780 --> 00:19:25,549
build the source distribution is your
package it will include all your Python

337
00:19:25,549 --> 00:19:26,830
code automatically

338
00:19:26,830 --> 00:19:30,760
and if there's any non Python files you
want to include we need to specify them

339
00:19:30,760 --> 00:19:32,280
in our manifesto did

340
00:19:32,280 --> 00:19:37,400
so in this case will include our authors
file change log get the license file

341
00:19:37,400 --> 00:19:41,490
are manifest Rd NR read me and I will
include all the documentation so anyone

342
00:19:41,490 --> 00:19:44,100
who downloads the source distribution
for the package index

343
00:19:44,100 --> 00:19:49,100
also has access to the documentation and
source form

344
00:19:49,100 --> 00:19:53,850
once we have those two files can prepare
to release to the package index

345
00:19:53,850 --> 00:19:56,929
before we release what Hagar releasing
get up

346
00:19:56,929 --> 00:20:02,950
well pusher takes to get her but doesn't
happen by default

347
00:20:02,950 --> 00:20:06,760
and then we'll create a source
distribution Estes stands for source

348
00:20:06,760 --> 00:20:08,900
distribution is just basically a tarball

349
00:20:08,900 --> 00:20:13,970
have your code in some associated files
you can create that with Python set up I

350
00:20:13,970 --> 00:20:17,730
fastest there's also a new we all format

351
00:20:17,730 --> 00:20:21,370
which encourage you to look into it a
binary format so if your cur if your

352
00:20:21,370 --> 00:20:23,580
package has compiled extensions

353
00:20:23,580 --> 00:20:26,640
using the Wii or format will make it
much easier for people to install

354
00:20:26,640 --> 00:20:30,320
if it's a pure Python package in its
your first time it a party simpler just

355
00:20:30,320 --> 00:20:33,740
to stick with Estes that's the most
common form and storks very well for

356
00:20:33,740 --> 00:20:36,620
pure Python packages

357
00:20:36,620 --> 00:20:40,010
once you have your St Ste you can
actually install it directly with Pepe

358
00:20:40,010 --> 00:20:43,340
set up I will place the S test inside
the dist

359
00:20:43,340 --> 00:20:46,789
subdirectory and pick can install
directly from that terrible

360
00:20:46,789 --> 00:20:50,580
and that way you know you can test to
make sure that your packaging works

361
00:20:50,580 --> 00:20:54,380
correctly with your package installs and
you can import it and use it

362
00:20:54,380 --> 00:20:58,330
before you actually uploaded to the
package index

363
00:20:58,330 --> 00:21:02,010
now Python set up top I it does have a
command for uploading code

364
00:21:02,010 --> 00:21:05,799
uploading your Estes to the package
index unfortunately it works

365
00:21:05,799 --> 00:21:09,650
over a plate plane a an uninterrupted
connection

366
00:21:09,650 --> 00:21:12,780
so it actually passes your package index
credentials uninterrupted

367
00:21:12,780 --> 00:21:16,600
surrounded in using that we use a third
party package called twine which can

368
00:21:16,600 --> 00:21:17,740
securely upload

369
00:21:17,740 --> 00:21:21,690
your project to the package index open
stall twine

370
00:21:21,690 --> 00:21:24,860
and then we just ate wine upload and
pointed at our table

371
00:21:24,860 --> 00:21:31,860
arrest ist and uploaded to the package
index

372
00:21:32,460 --> 00:21:36,460
before you can do this step you need to
have already gone to the Python package

373
00:21:36,460 --> 00:21:37,860
index web page

374
00:21:37,860 --> 00:21:42,520
created an account and claimed your
package name on the package index and

375
00:21:42,520 --> 00:21:43,950
then you can use twenty upload

376
00:21:43,950 --> 00:21:50,039
to upload your %uh version of your
project

377
00:21:50,039 --> 00:21:53,549
once we've done that we should be able
to Pippin stop I fly in our packet wants

378
00:21:53,549 --> 00:21:59,350
to offer back in index

379
00:21:59,350 --> 00:22:02,570
for the last i'ma talk about are first

380
00:22:02,570 --> 00:22:05,900
come for more information about
packaging there's a lot more that could

381
00:22:05,900 --> 00:22:06,630
be covered

382
00:22:06,630 --> 00:22:11,270
packaging apartment at Oregon's
documentation their dire si channel pipe

383
00:22:11,270 --> 00:22:12,500
EA on freenode

384
00:22:12,500 --> 00:22:15,169
where there's people hanging out will be
glad to help you with your packaging

385
00:22:15,169 --> 00:22:16,169
problems

386
00:22:16,169 --> 00:22:21,460
and there's a dispute all signify that
our mailing list

387
00:22:21,460 --> 00:22:25,159
last to talk a little bit about building
a community around your project

388
00:22:25,159 --> 00:22:28,080
people join communities because they
make their lives better to building a

389
00:22:28,080 --> 00:22:31,179
community around your project is all
about finding ways to make your users

390
00:22:31,179 --> 00:22:33,960
and contributors lives better

391
00:22:33,960 --> 00:22:37,740
a lot of that has to do with valuing
their time so talk about some ways to

392
00:22:37,740 --> 00:22:39,830
value the time in your users and
contributors

393
00:22:39,830 --> 00:22:44,370
one way to value users time is to
communicate clearly about changes

394
00:22:44,370 --> 00:22:47,740
to your software that will affect them
semantic versioning

395
00:22:47,740 --> 00:22:51,350
is a technique to use your version
numbers to communicate information to

396
00:22:51,350 --> 00:22:54,500
your users about changes in your
software

397
00:22:54,500 --> 00:22:57,940
the idea is that if you ever version
number like X dot wide-eyed Z

398
00:22:57,940 --> 00:23:01,120
your increment acts

399
00:23:01,120 --> 00:23:04,650
anytime you make breaking changes to
your API

400
00:23:04,650 --> 00:23:09,390
so someone knows that if the upgrade
from version 1.0 died 02 version 2.0

401
00:23:09,390 --> 00:23:12,880
they're likely to need to update their
code to use your softer differently

402
00:23:12,880 --> 00:23:14,919
because he made breaking changes:

403
00:23:14,919 --> 00:23:20,730
your increment why for future changes
that are backwards compatible

404
00:23:20,730 --> 00:23:26,900
enduring increments easy for releases
that include only bug fixes

405
00:23:26,900 --> 00:23:30,470
cember .org has more information on
semantic versioning

406
00:23:30,470 --> 00:23:33,539
another part a value your users time

407
00:23:33,539 --> 00:23:36,659
when someone sees the you've made
backers incompatible changes

408
00:23:36,659 --> 00:23:39,870
the change log is where they can look to
find out what those changes are

409
00:23:39,870 --> 00:23:43,990
and what kinda things don't need
updating their code system integration

410
00:23:43,990 --> 00:23:47,360
in tells users about the magnitude in
the typeof changes in a release

411
00:23:47,360 --> 00:23:51,020
and the change law gives them details
change log

412
00:23:51,020 --> 00:23:55,539
is not just a something you can generate
automatically from your commit log

413
00:23:55,539 --> 00:23:59,260
it should pull out user interesting
changes and summarize the many user

414
00:23:59,260 --> 00:24:00,539
friendly way

415
00:24:00,539 --> 00:24:07,539
here's an example of how I structure
change log using restructure text

416
00:24:09,220 --> 00:24:12,940
so wat you can value your contributors
time and save yourself time

417
00:24:12,940 --> 00:24:16,250
is by having a contributing document
here's a

418
00:24:16,250 --> 00:24:19,779
some things you might want to include in
your contributing document will call it

419
00:24:19,779 --> 00:24:22,450
contributing at rst in the router
repository

420
00:24:22,450 --> 00:24:26,390
you can include things like how to get
setup for development

421
00:24:26,390 --> 00:24:29,429
how we contributor can run the tests for
your project

422
00:24:29,429 --> 00:24:32,480
but they should include a bug reporter
poor request

423
00:24:32,480 --> 00:24:36,240
what coding standards or test coverage
standards are other requirements you

424
00:24:36,240 --> 00:24:40,070
have for contributing to your code base
that they should know about Advance

425
00:24:40,070 --> 00:24:43,380
and my side effect if you have a
top-level filing a report called

426
00:24:43,380 --> 00:24:44,950
contributing dot something

427
00:24:44,950 --> 00:24:48,400
get have will find it an automatic we
provide a link to it prominently

428
00:24:48,400 --> 00:24:52,570
on top of the new poor requester the new
issue form

429
00:24:52,570 --> 00:24:56,279
so contributors will be guided to your
contributing guidelines before they

430
00:24:56,279 --> 00:25:00,480
contribute

431
00:25:00,480 --> 00:25:03,600
so I'm all excited to fix a bug I found
in your project

432
00:25:03,600 --> 00:25:06,600
i download it I follow your contributing
guidelines I get all set up for

433
00:25:06,600 --> 00:25:10,370
development I install the dependencies a
more excited to run the tests so that I

434
00:25:10,370 --> 00:25:13,390
can have a clean slate to work from a
tram not breaking anything with my

435
00:25:13,390 --> 00:25:14,760
change

436
00:25:14,760 --> 00:25:19,200
and four tests fail and my motivation to
contribute your project

437
00:25:19,200 --> 00:25:26,200
is gone so one very important thing you
can do is keep your test passing

438
00:25:28,590 --> 00:25:31,500
another way to value contributors time
in contribution is to give quick

439
00:25:31,500 --> 00:25:32,539
feedback

440
00:25:32,539 --> 00:25:36,830
when you get bug reports reporter quests
you may not have time to deal with the

441
00:25:36,830 --> 00:25:39,799
right away or thankfully through the
future requester

442
00:25:39,799 --> 00:25:44,600
how to fix the bug but you can very
easily have a one line response on the

443
00:25:44,600 --> 00:25:46,370
issue report request saying

444
00:25:46,370 --> 00:25:50,270
have time to look at this now I really
appreciate the contribution I'll look at

445
00:25:50,270 --> 00:25:52,190
next week or in a month or

446
00:25:52,190 --> 00:25:56,020
maybe in three years or whatever the
truth is

447
00:25:56,020 --> 00:26:01,610
but you can give immediate feedback for
contributions

448
00:26:01,610 --> 00:26:05,570
and when people pitch in you can give
them props you can do that in a commit

449
00:26:05,570 --> 00:26:06,210
message

450
00:26:06,210 --> 00:26:09,400
you can do that in your change log you
can do that in an author's file that

451
00:26:09,400 --> 00:26:10,760
lists all your contributors

452
00:26:10,760 --> 00:26:14,789
you can do that with tweets you can all
kinds of ways you can give people props

453
00:26:14,789 --> 00:26:16,110
and give them credit for their work

454
00:26:16,110 --> 00:26:19,539
but that motivate people to contribute

455
00:26:19,539 --> 00:26:22,590
even beyond that if you have helpful
contributors who have submitted a couple

456
00:26:22,590 --> 00:26:23,980
good poor requests

457
00:26:23,980 --> 00:26:28,090
you can be very quick to give them
commit access with dove distributed

458
00:26:28,090 --> 00:26:32,159
version control commit access is it is
technically important as it used to be

459
00:26:32,159 --> 00:26:35,370
but it's still a market confidence that
store social signal that you trust

460
00:26:35,370 --> 00:26:35,970
someone

461
00:26:35,970 --> 00:26:40,130
to handle your project correctly and
forgiving commit access to someone

462
00:26:40,130 --> 00:26:43,690
will motivate greater involvement from
them and

463
00:26:43,690 --> 00:26:46,789
chances are someday you're gonna be
tired maintaining this project you're

464
00:26:46,789 --> 00:26:48,740
gonna move on to other things

465
00:26:48,740 --> 00:26:52,840
you can have other things to manage your
time so giving commit access

466
00:26:52,840 --> 00:26:57,020
to someone is preparing someone to
possibly take over the project from you

467
00:26:57,020 --> 00:27:00,750
in the future when you're done with it

468
00:27:00,750 --> 00:27:04,850
the very last thing but definitely not
least

469
00:27:04,850 --> 00:27:08,130
anytime you get a bike or a poor
requesting your software

470
00:27:08,130 --> 00:27:13,029
even if it's irritating or it's phrased
in a aggressive way or someone hasn't

471
00:27:13,029 --> 00:27:15,529
done their homework and read the
contributing document or whatever it

472
00:27:15,529 --> 00:27:16,400
might be

473
00:27:16,400 --> 00:27:19,520
it still represents someone who took the
time to did

474
00:27:19,520 --> 00:27:23,120
to to take the initiative to make a
contribution to your project because

475
00:27:23,120 --> 00:27:24,159
they wanted to be better

476
00:27:24,159 --> 00:27:27,380
because they cared about it to represent
someone who cares about your project due

477
00:27:27,380 --> 00:27:28,590
to time and energy

478
00:27:28,590 --> 00:27:32,600
to try to make it better and regardless
of what other issues you may have with

479
00:27:32,600 --> 00:27:33,679
their contribution

480
00:27:33,679 --> 00:27:37,370
you can always thank them for taking
their time and energy

481
00:27:37,370 --> 00:27:40,289
for every one person that you
communicate with directly in a public

482
00:27:40,289 --> 00:27:42,950
way via an issuer pork Western get other

483
00:27:42,950 --> 00:27:46,909
there's or mailing list dryers your
whatever there maybe ten or twenty or

484
00:27:46,909 --> 00:27:48,520
fifty or a hundred other people

485
00:27:48,520 --> 00:27:52,320
who will see that interaction either now
or in the future

486
00:27:52,320 --> 00:27:56,169
and based on what they see in an
interaction may make a decision about

487
00:27:56,169 --> 00:27:58,730
whether it's worth their time to
interact with you and contribute your

488
00:27:58,730 --> 00:27:59,860
project

489
00:27:59,860 --> 00:28:02,799
there is nothing to be lost by being
nice to everyone who contributes to your

490
00:28:02,799 --> 00:28:06,840
project

491
00:28:06,840 --> 00:28:13,840
so go forth and release code

492
00:28:22,520 --> 00:28:23,360
agree have about

493
00:28:23,360 --> 00:28:30,360
four minutes for questions thank you
very much for nice summary of

494
00:28:32,169 --> 00:28:35,659
many good things you could do to your
project and few comments

495
00:28:35,659 --> 00:28:40,289
I don't know why give people did but you
don't want to tack on the

496
00:28:40,289 --> 00:28:44,350
tag and and attack you want to use
annotated or sin tax

497
00:28:44,350 --> 00:28:48,340
because if you ski describe command
which is really useful to define where

498
00:28:48,340 --> 00:28:49,039
you are

499
00:28:49,039 --> 00:28:52,470
in this actually he threw development
those will not be used

500
00:28:52,470 --> 00:28:57,190
so use those with this am you can
provide even message was discredited

501
00:28:57,190 --> 00:28:58,700
right there in the common line

502
00:28:58,700 --> 00:29:04,909
then for from for licenses I i'm sorry
I've missed that part but

503
00:29:04,909 --> 00:29:09,760
I asked around if you're using
third-party code in your code

504
00:29:09,760 --> 00:29:13,049
it would be great if you come up with
description of what code

505
00:29:13,049 --> 00:29:16,429
have used for this to cooperate with his
license license and self

506
00:29:16,429 --> 00:29:21,029
without Cup right doesn't matter so it
needs to be a bundle of cooperate in the

507
00:29:21,029 --> 00:29:21,700
license

508
00:29:21,700 --> 00:29:25,730
also be careful about looking at the
third party modules which have more

509
00:29:25,730 --> 00:29:28,340
restricted licenses if you use to peel
code

510
00:29:28,340 --> 00:29:32,309
and your project is a meteor bees the
effectively at runtime

511
00:29:32,309 --> 00:29:35,520
is GPL so those guys in the next room

512
00:29:35,520 --> 00:29:40,020
who compile their code write and deliver
it that will build Ridge appealed code

513
00:29:40,020 --> 00:29:41,549
you would need to provide your sources

514
00:29:41,549 --> 00:29:45,279
well not in these both the words
important since we do it open source

515
00:29:45,279 --> 00:29:46,090
anyway laurie

516
00:29:46,090 --> 00:29:49,799
and if you do semantic versioning that
thats awesome

517
00:29:49,799 --> 00:29:53,130
and but if you want to verify somebody's
else version

518
00:29:53,130 --> 00:29:57,340
you could use these two deals lose
version and strict version to do proper

519
00:29:57,340 --> 00:29:58,140
comparison

520
00:29:58,140 --> 00:30:01,809
not like breaking to topple and then
compared some other ways because that

521
00:30:01,809 --> 00:30:02,850
might fail badly

522
00:30:02,850 --> 00:30:06,710
if you use development persons other
projects thank you again

523
00:30:06,710 --> 00:30:11,029
great that's was a great addition thank
you from via

524
00:30:11,029 --> 00:30:15,260
I originally included ash s in the get a
gym and then you should definitely sign

525
00:30:15,260 --> 00:30:15,940
your dick

526
00:30:15,940 --> 00:30:19,279
tags if you have a a pgp setup

527
00:30:19,279 --> 00:30:23,899
also if you have pgp synergy PG setup
you should also use dash dash signer

528
00:30:23,899 --> 00:30:25,600
dasher signer twine upload

529
00:30:25,600 --> 00:30:29,510
and that will sign your fastest file on
the package index

530
00:30:29,510 --> 00:30:33,080
I remove those who don't work people who
don't have GPG set up

531
00:30:33,080 --> 00:30:36,370
but if your gonna be releasing software
as pie with your time to

532
00:30:36,370 --> 00:30:40,620
get a GPG key set up and make sure sign
those things I thank you very much

533
00:30:40,620 --> 00:30:44,440
our thank you's a great talk common lot
information

534
00:30:44,440 --> 00:30:48,179
arm how do you feel about using get have
is a source of are requesting people

535
00:30:48,179 --> 00:30:52,159
hoping a project in the sunset you have
an idea of where you want the project to

536
00:30:52,159 --> 00:30:52,620
be

537
00:30:52,620 --> 00:30:56,510
and you have a certain level skill and
you kinda got it to get started but you

538
00:30:56,510 --> 00:30:57,700
need assistance to you

539
00:30:57,700 --> 00:31:00,860
see that is bad way to get started her

540
00:31:00,860 --> 00:31:05,029
arm using did have to get contributors

541
00:31:05,029 --> 00:31:09,760
how exactly I'm in the sense that you
you're you're not at the level that you

542
00:31:09,760 --> 00:31:13,120
need you need you need assistance in
your project but you have some sort of

543
00:31:13,120 --> 00:31:16,630
working coli collect the boilerplate a
bit in a sense it's me died

544
00:31:16,630 --> 00:31:20,919
you would like other people to help
contribute to your project doesn't hurt

545
00:31:20,919 --> 00:31:21,470
to try

546
00:31:21,470 --> 00:31:25,020
I mean usually my experience is that you
get contributors because you've got

547
00:31:25,020 --> 00:31:26,600
something useful that helps them

548
00:31:26,600 --> 00:31:30,789
and then they need something else you to
do something else and so they're

549
00:31:30,789 --> 00:31:31,549
motivated to

550
00:31:31,549 --> 00:31:36,260
to edit add to it so if you you put
something up or get out that's more

551
00:31:36,260 --> 00:31:40,260
her more an idea than an actual working
code I think in most cases there

552
00:31:40,260 --> 00:31:41,880
probably won't be that successful but

553
00:31:41,880 --> 00:31:45,580
if it's something that a lot of people
really wants doesn't hurt

554
00:31:45,580 --> 00:31:49,899
thanks hi

555
00:31:49,899 --> 00:31:53,980
haves as a ring if your advice for
maintaining does manifest on

556
00:31:53,980 --> 00:31:57,070
files like I've broken libraries the
EU's

557
00:31:57,070 --> 00:32:01,130
internally because I've made code
changes in forgot to update

558
00:32:01,130 --> 00:32:04,669
the man sign in part include so

559
00:32:04,669 --> 00:32:11,669
their tools are there are tools that I
use to help maintain manifest started

560
00:32:12,380 --> 00:32:15,679
there may be some other than I don't
know if yeah that is a problem

561
00:32:15,679 --> 00:32:18,899
it's a good reason to to test your Estes

562
00:32:18,899 --> 00:32:22,679
be before you upload them the package
index another thing I should try mention

563
00:32:22,679 --> 00:32:23,179
is that

564
00:32:23,179 --> 00:32:26,630
a when they had enough time to include
in the slides is what to do if you have

565
00:32:26,630 --> 00:32:27,610
made a bad release

566
00:32:27,610 --> 00:32:30,970
you do you upload a release to the
package index that doesn't work

567
00:32:30,970 --> 00:32:35,530
and the answer is you should not remove
or change that release want to talk on

568
00:32:35,530 --> 00:32:36,539
the package index

569
00:32:36,539 --> 00:32:39,919
you should consider there for good you
just upload a new release with the

570
00:32:39,919 --> 00:32:46,919
pumped micro version number and move on

571
00:32:51,000 --> 00:32:56,179
yep

572
00:32:56,179 --> 00:32:58,559
I have one more question last question

573
00:32:58,559 --> 00:33:01,590
thank you for the talk and I know

574
00:33:01,590 --> 00:33:06,610
its still alive stops and its at least
it's a lot like last last year must

575
00:33:06,610 --> 00:33:10,509
complicated for now but do you feel that
what extent do you think that service

576
00:33:10,509 --> 00:33:11,679
that can be automated

577
00:33:11,679 --> 00:33:15,960
in the future perhaps to make it much
more forgetting

578
00:33:15,960 --> 00:33:21,120
packages it's already a lot more
automated than it was a few years ago I

579
00:33:21,120 --> 00:33:24,139
mean a few years ago for a given the
stock we wouldn't have had read the docs

580
00:33:24,139 --> 00:33:27,690
when about Travis the eye and so there's
a very important steps

581
00:33:27,690 --> 00:33:32,299
a here's where it would have been a way
harder a couple years ago so

582
00:33:32,299 --> 00:33:36,220
yeah I presume that that I hope that
things will continue to get easier

583
00:33:36,220 --> 00:33:40,059
particularly on the on the packaging
side of things is definitely movement in

584
00:33:40,059 --> 00:33:40,590
that area

585
00:33:40,590 --> 00:33:47,590
so we'll see yeah I know

586
00:33:50,210 --> 00:33:53,600
I'll be in the hallway if anybody wants
to talk more about but things are you

587
00:33:53,600 --> 00:33:53,860
about them

