1
00:00:02,620 --> 00:00:05,330
okay everyone it's at ten past 12 time
for the

2
00:00:05,330 --> 00:00:08,570
next talk the third and final talk over
this session

3
00:00:08,570 --> 00:00:12,389
before lunch and pick to introduce you
do Christine's bang

4
00:00:12,389 --> 00:00:16,500
gonna tell us about FF I in why you
should use FF I rather than some

5
00:00:16,500 --> 00:00:23,500
processed

6
00:00:26,470 --> 00:00:28,600
hi everybody I'm Christine

7
00:00:28,600 --> 00:00:32,760
huh huh hi

8
00:00:32,760 --> 00:00:38,160
%uh first things first I want to thank
you all for being here in this room

9
00:00:38,160 --> 00:00:41,680
I've been a part of the pipe on
community for a number of years but this

10
00:00:41,680 --> 00:00:43,140
is my first time on stage

11
00:00:43,140 --> 00:00:47,680
and I'm really really excited to give
back to the community

12
00:00:47,680 --> 00:00:51,980
a community that I really really love so

13
00:00:51,980 --> 00:00:56,120
before I jump into my material here
today adds a tiny little bit about me

14
00:00:56,120 --> 00:00:59,570
I i got my start in the Python community
I

15
00:00:59,570 --> 00:01:04,619
in Boston after I graduated from MIT and
boss and I was a cofounder of the possum

16
00:01:04,619 --> 00:01:05,729
pie pan workshop

17
00:01:05,729 --> 00:01:09,869
and others involved in the pipe and use
a group there and also use papon in my

18
00:01:09,869 --> 00:01:10,280
work

19
00:01:10,280 --> 00:01:13,810
at it can be called his place and now I

20
00:01:13,810 --> 00:01:17,570
yeah I moved to San Francisco answered
the company called inbox

21
00:01:17,570 --> 00:01:21,640
at you I learn more about Max you can
talk to me later and but that's not what

22
00:01:21,640 --> 00:01:22,740
the stock is about

23
00:01:22,740 --> 00:01:25,950
at in bucks and a

24
00:01:25,950 --> 00:01:30,220
in my personal hacking I we love Python
a reason price uk buy time for

25
00:01:30,220 --> 00:01:31,040
everything

26
00:01:31,040 --> 00:01:34,369
an height and a really great language
for

27
00:01:34,369 --> 00:01:38,040
a figuring out what you want to write
and rainy quickly

28
00:01:38,040 --> 00:01:41,330
so this talk is about

29
00:01:41,330 --> 00:01:45,259
the times when your writing Python but

30
00:01:45,259 --> 00:01:48,619
you have some other care that you want
to run that's not paid on

31
00:01:48,619 --> 00:01:52,320
sometimes is now a library available to
do what you want are sometimes it's not

32
00:01:52,320 --> 00:01:53,229
fast enough

33
00:01:53,229 --> 00:01:56,020
sometimes you just want to be able to
quickly sell it to some code that

34
00:01:56,020 --> 00:01:57,189
already exists

35
00:01:57,189 --> 00:02:00,340
so we're gonna talk about these to do
different

36
00:02:00,340 --> 00:02:03,950
Anna past you running external code via
Python

37
00:02:03,950 --> 00:02:08,660
the first one is at running an external
binary from papon

38
00:02:08,660 --> 00:02:12,280
and the second one will be wrapping a C
library from papon

39
00:02:12,280 --> 00:02:15,860
and so this kind of stuff the systems
level stuff

40
00:02:15,860 --> 00:02:19,329
is very platform dependent so I wanna
get it out there

41
00:02:19,329 --> 00:02:23,799
from the get-go that I'm talking a/c
pipe on I'm talking about Python 2.7

42
00:02:23,799 --> 00:02:28,519
and also talking about 1x so there be a
few details that are specific to these

43
00:02:28,519 --> 00:02:34,040
particular platforms and but the general
principles definitely our cross-platform

44
00:02:34,040 --> 00:02:37,270
you just need a like figure out the
exact details I have to do with your

45
00:02:37,270 --> 00:02:38,020
platform

46
00:02:38,020 --> 00:02:41,060
r8

47
00:02:41,060 --> 00:02:44,890
the first part a the doc why you
shouldn't shell out

48
00:02:44,890 --> 00:02:48,370
and sometimes why you should so

49
00:02:48,370 --> 00:02:51,550
CIA I and to at work

50
00:02:51,550 --> 00:02:56,390
I me and we have to a building email
platform

51
00:02:56,390 --> 00:02:59,660
and email you consider taxed and

52
00:02:59,660 --> 00:03:03,360
and it turns out the text is rain in
every single language at their

53
00:03:03,360 --> 00:03:07,480
and especially email there a lot two
different ways to represent that text to

54
00:03:07,480 --> 00:03:08,190
computer

55
00:03:08,190 --> 00:03:11,440
and these are called character encodings
and

56
00:03:11,440 --> 00:03:14,660
it turns out the Python only sit a
supports

57
00:03:14,660 --> 00:03:18,209
a subset of all the character encodings
out there at the box

58
00:03:18,209 --> 00:03:21,720
I suspect this is for portability
reasons it has its own implementations a

59
00:03:21,720 --> 00:03:22,840
character in Qatar's

60
00:03:22,840 --> 00:03:26,239
and but it doesn't support

61
00:03:26,239 --> 00:03:29,690
everything and if you want to build a
some software that

62
00:03:29,690 --> 00:03:33,970
is able to handle email from everywhere
in the world also it's a crazy spam

63
00:03:33,970 --> 00:03:34,950
stuff like that

64
00:03:34,950 --> 00:03:39,319
you need to support all them and so I
ran into this problem

65
00:03:39,319 --> 00:03:43,670
where and I wanted to build the Kodak
surprise and in support

66
00:03:43,670 --> 00:03:47,409
so a the first idea I we had here was

67
00:03:47,409 --> 00:03:52,549
and to use this this program called I
calmed which is pretty the standard way

68
00:03:52,549 --> 00:03:57,540
the standard library for and dealing
with that text conversions

69
00:03:57,540 --> 00:04:02,500
on Alex platforms and there's a there's
like manly program called I calm that

70
00:04:02,500 --> 00:04:06,209
you can use on the command line and use
it to convert text from one encoding to

71
00:04:06,209 --> 00:04:06,720
another

72
00:04:06,720 --> 00:04:10,019
so if you want to use this program we
can

73
00:04:10,019 --> 00:04:14,750
and rate a little script and Python say
will call it convert utf8

74
00:04:14,750 --> 00:04:18,820
Anna might look like this: so

75
00:04:18,820 --> 00:04:23,430
you see here super simple and there's
really will only one not lying here

76
00:04:23,430 --> 00:04:25,500
that's actually doing anything
interesting

77
00:04:25,500 --> 00:04:29,690
so we just don't work or pursing some
command line arguments

78
00:04:29,690 --> 00:04:33,800
and then there's one line read the
bottom here says some process that check

79
00:04:33,800 --> 00:04:34,500
call

80
00:04:34,500 --> 00:04:37,789
and then we we see our I calmed command
line program

81
00:04:37,789 --> 00:04:43,199
and all the all the arguments that you
would center down the command line

82
00:04:43,199 --> 00:04:47,060
so this is an example of shelling out
and by shelling out I don't mean using a

83
00:04:47,060 --> 00:04:48,150
shell actually

84
00:04:48,150 --> 00:04:52,050
is not necessarily at like a command
line shell involved here

85
00:04:52,050 --> 00:04:55,560
though there are some arguments to use a
process model dick that can make you

86
00:04:55,560 --> 00:04:57,720
pass your command three shell first

87
00:04:57,720 --> 00:05:01,270
I'm just talking about running this
external program it from

88
00:05:01,270 --> 00:05:05,650
at from tight on and this would
obviously usually be part a

89
00:05:05,650 --> 00:05:11,330
a bigger system but I just cut down the
sample here to make it really simple

90
00:05:11,330 --> 00:05:14,540
alright so what's actually happening
here this is one line of code but it

91
00:05:14,540 --> 00:05:19,050
turns out there's a lot that's happening
behind the scenes

92
00:05:19,050 --> 00:05:22,470
and we want to find out what's going on
so

93
00:05:22,470 --> 00:05:25,590
the first thing I might do when trying
to figure out what's happening in a

94
00:05:25,590 --> 00:05:27,669
particular line up a tankard

95
00:05:27,669 --> 00:05:32,699
and is use the documentation so pet
owners is gray introspection

96
00:05:32,699 --> 00:05:36,100
capabilities so I could just call help
on the function

97
00:05:36,100 --> 00:05:41,440
and shown right here an have at what
exactly is the help string4

98
00:05:41,440 --> 00:05:44,630
check all and we can take a look at it
and

99
00:05:44,630 --> 00:05:48,490
we see it says Iran commended are you
entry for committee completes

100
00:05:48,490 --> 00:05:52,729
every so it doesn't really tell us
what's going on it does tell us how to

101
00:05:52,729 --> 00:05:53,259
use it

102
00:05:53,259 --> 00:05:57,240
which is great that's all you really
need to know but I wanna know more

103
00:05:57,240 --> 00:06:01,300
an and in the case that I wanna know
more I want to know exactly what's

104
00:06:01,300 --> 00:06:03,380
happening with the peace pipe anchored

105
00:06:03,380 --> 00:06:06,449
when I'm gonna do is I'm gonna read the
source

106
00:06:06,449 --> 00:06:11,460
so since I don't open source II can just
take a look at the source code for it so

107
00:06:11,460 --> 00:06:16,060
I let's do that right now so

108
00:06:16,060 --> 00:06:20,050
at yeah I Han hear your just pointing
out one thing

109
00:06:20,050 --> 00:06:24,370
if you want to find the source cared for
any particular Python module

110
00:06:24,370 --> 00:06:28,530
and there's a a python stimuli remodel
called inspects

111
00:06:28,530 --> 00:06:32,900
that will help you with this as you
might have used like but Dunder file

112
00:06:32,900 --> 00:06:37,990
a attribute other model a easier way is
to use the inspect model because

113
00:06:37,990 --> 00:06:41,900
Dunder file it it it doesn't necessarily
always had the right thing in it that

114
00:06:41,900 --> 00:06:42,620
you want

115
00:06:42,620 --> 00:06:46,520
and also will show you that that the
compiled Python file and not the

116
00:06:46,520 --> 00:06:51,460
the source file so you can import this
this function get source file

117
00:06:51,460 --> 00:06:55,080
and then you can call their on your
model and

118
00:06:55,080 --> 00:07:00,410
it'll tell you where the source code is
so we can hold the source can like this

119
00:07:00,410 --> 00:07:04,289
Sarah II pipeline here I'm gonna pull up
this

120
00:07:04,289 --> 00:07:09,650
and this file harry and I mean at it

121
00:07:09,650 --> 00:07:13,509
is a little bit too big he ran specials
more

122
00:07:13,509 --> 00:07:17,620
8 so answer starting out if I know
what's happening here so the first thing

123
00:07:17,620 --> 00:07:18,750
I do is

124
00:07:18,750 --> 00:07:24,190
I am so the the cali wonders call check
call

125
00:07:24,190 --> 00:07:27,349
an so

126
00:07:27,349 --> 00:07:32,310
you can search for that r8 and we just
kinda follow the cold chain downed

127
00:07:32,310 --> 00:07:36,310
until we find out where the actual work
is happening at so you can see this

128
00:07:36,310 --> 00:07:37,069
calls a

129
00:07:37,069 --> 00:07:41,169
another faction called call and it does
some stuff with the return cared to wrap

130
00:07:41,169 --> 00:07:42,259
it properly

131
00:07:42,259 --> 00:07:46,550
so actually calls are here and this is
classic and is wrapping this

132
00:07:46,550 --> 00:07:50,620
this this P open class so we go again

133
00:07:50,620 --> 00:07:54,139
an effort turned out if you like Paul
this call chain down

134
00:07:54,139 --> 00:07:58,720
at far enough and you get to a place
where

135
00:07:58,720 --> 00:08:01,830
a he calls this this line of code

136
00:08:01,830 --> 00:08:05,639
West up for work and if you look at the
documentation for our stuff work

137
00:08:05,639 --> 00:08:11,949
this is a wrapper for and these the fork
system call on your system

138
00:08:11,949 --> 00:08:15,629
right so what's actually happening there

139
00:08:15,629 --> 00:08:20,360
what's a system call sewer system call
is the interface between a user space

140
00:08:20,360 --> 00:08:21,410
application

141
00:08:21,410 --> 00:08:25,699
such as this little script confer utf8
and

142
00:08:25,699 --> 00:08:31,590
the operating system a the machine that
you're running on such as Linux

143
00:08:31,590 --> 00:08:36,010
so let's talk a little bit about the
fork system call and what it does

144
00:08:36,010 --> 00:08:39,610
so if you wanna learn more about a
system call weekend use and

145
00:08:39,610 --> 00:08:43,719
man page to you read about it so
everyone exist and I

146
00:08:43,719 --> 00:08:46,990
should come with able said a man pages
for

147
00:08:46,990 --> 00:08:51,569
at the system calls 9 night that the
next program's annual

148
00:08:51,569 --> 00:08:54,750
and so if we take a look at the fork
system call

149
00:08:54,750 --> 00:08:58,990
man page it gives a lot of information
about what what's happening here

150
00:08:58,990 --> 00:09:02,209
so tells us that fork works by
duplicating

151
00:09:02,209 --> 00:09:05,740
at the process that's calling for work
so when we

152
00:09:05,740 --> 00:09:09,930
do this suppresses call we're actually
duplicating or Python process

153
00:09:09,930 --> 00:09:13,240
how that's interesting right so let's

154
00:09:13,240 --> 00:09:16,300
look a little bit about at at a visual
representation

155
00:09:16,300 --> 00:09:19,660
have what is actually happening we call
for here

156
00:09:19,660 --> 00:09:24,330
at is a few other system calls involved
when we're doing this suppresses call

157
00:09:24,330 --> 00:09:28,589
so what happens is that the Python
interpreter calls for work

158
00:09:28,589 --> 00:09:32,750
at splits into two processes one is
apparent and one is the child

159
00:09:32,750 --> 00:09:35,950
at the parent ends up sitting around
waiting for the child so there's a

160
00:09:35,950 --> 00:09:36,800
system called

161
00:09:36,800 --> 00:09:40,410
call we pitted an and

162
00:09:40,410 --> 00:09:45,899
the the child actually runs as other
system call called exec

163
00:09:45,899 --> 00:09:49,630
and that loads this other program icon
into memory

164
00:09:49,630 --> 00:09:55,450
and then runs it

165
00:09:55,450 --> 00:09:58,649
great so few more details about fork

166
00:09:58,649 --> 00:10:03,200
sOooo I said that the Python interpreter
copies itself

167
00:10:03,200 --> 00:10:06,839
are the operating system copy is a
Python interpreter when

168
00:10:06,839 --> 00:10:12,110
you call for work an this would be
really really expensive if they weren't

169
00:10:12,110 --> 00:10:13,890
a specific way that this happened

170
00:10:13,890 --> 00:10:18,200
and that made it so it wasn't so it
didn't take so long

171
00:10:18,200 --> 00:10:21,260
so when you copy a process you have to
decree

172
00:10:21,260 --> 00:10:25,430
an entire copy at the memory stack but
if week really copy every single

173
00:10:25,430 --> 00:10:29,760
pc memory they belong to that process it
would take a long time and it also use a

174
00:10:29,760 --> 00:10:30,980
lot of memory

175
00:10:30,980 --> 00:10:35,160
so it turns out that at the lips curl
implements this fork

176
00:10:35,160 --> 00:10:38,750
forecast system call by by making the
new process

177
00:10:38,750 --> 00:10:43,649
Use the Memory at low prices into it way
called copy on write

178
00:10:43,649 --> 00:10:47,450
so that means that Italy copies the
pages if the new process

179
00:10:47,450 --> 00:10:51,380
ends up rating to those pages are
changing them

180
00:10:51,380 --> 00:10:54,709
so that way it's it's a lot faster but
it still it still has all this

181
00:10:54,709 --> 00:10:57,709
overhead love abusing operating system
whenever we

182
00:10:57,709 --> 00:11:00,779
and ask for something from the operating
system it has two

183
00:11:00,779 --> 00:11:04,649
the the computer has to do the single
the context which and switches into like

184
00:11:04,649 --> 00:11:05,750
the kernel-mode

185
00:11:05,750 --> 00:11:09,720
and does stuff for the the program and
then it switches back

186
00:11:09,720 --> 00:11:14,510
and in the case have a doing a fork
within a two processes that the

187
00:11:14,510 --> 00:11:19,540
the next girl that has a schedule
between

188
00:11:19,540 --> 00:11:23,910
so to illustrate a little bit more about
this copy on right thing

189
00:11:23,910 --> 00:11:28,120
and have shown to a little excerpt a a
top command running

190
00:11:28,120 --> 00:11:32,329
and a Python program that I F I look at
a lot of stuff into memory and then I

191
00:11:32,329 --> 00:11:33,220
fort

192
00:11:33,220 --> 00:11:37,760
an and the night I captured on top and
you can see here that

193
00:11:37,760 --> 00:11:40,829
and demand a memory being used by

194
00:11:40,829 --> 00:11:44,180
those who prostheses is more than is
actually available on this particular

195
00:11:44,180 --> 00:11:45,480
machine

196
00:11:45,480 --> 00:11:48,839
and it's not using add you heard of us
what cease

197
00:11:48,839 --> 00:11:52,230
there's no spot is being used on this
machine right now so it's not swap

198
00:11:52,230 --> 00:11:52,690
that's

199
00:11:52,690 --> 00:11:56,880
that's taking up that slack it just so
happens that this this tool top

200
00:11:56,880 --> 00:11:59,920
doesn't really know lab oka pran I just

201
00:11:59,920 --> 00:12:03,800
it just thinks that and that memories
being used

202
00:12:03,800 --> 00:12:09,970
an so in order to be able to do this
pork thing

203
00:12:09,970 --> 00:12:13,870
and the Linux kernel has to have a a
certain way it's like looking at memory

204
00:12:13,870 --> 00:12:15,380
allocation

205
00:12:15,380 --> 00:12:18,660
on so those hoping which has two to

206
00:12:18,660 --> 00:12:21,800
assume that process could possibly

207
00:12:21,800 --> 00:12:25,240
on share all of its pages after does a
fork

208
00:12:25,240 --> 00:12:29,149
so it has this this sermon feature that
I wanna talk about a little bit that

209
00:12:29,149 --> 00:12:32,800
allows it to kinda like assume that it's
going to be okay

210
00:12:32,800 --> 00:12:37,029
entered industry how that works a when I
compare this to

211
00:12:37,029 --> 00:12:42,089
to how on surveillance colonel its
memory allocator it

212
00:12:42,089 --> 00:12:45,190
it reads memory allocation a bit Lake
how

213
00:12:45,190 --> 00:12:48,779
airports and our airlines treats an

214
00:12:48,779 --> 00:12:52,000
at selling tickets for flights so

215
00:12:52,000 --> 00:12:56,399
the goal love an airline is to maximize
their profit by

216
00:12:56,399 --> 00:12:59,570
a having other fights be as full as
possible

217
00:12:59,570 --> 00:13:03,930
and so they do this by actually selling
more tickets

218
00:13:03,930 --> 00:13:07,389
then their seats on the flight

219
00:13:07,389 --> 00:13:10,450
because it turns out that most the time
some

220
00:13:10,450 --> 00:13:15,339
at some passengers don't show up but you
still wants to you have a full flight

221
00:13:15,339 --> 00:13:19,160
see sell a few too many tickets and then
some people to show up and then you hope

222
00:13:19,160 --> 00:13:20,350
that it works out

223
00:13:20,350 --> 00:13:24,230
just so that and the man feel they don't
show up are bad as many tickets as the

224
00:13:24,230 --> 00:13:25,139
oversold

225
00:13:25,139 --> 00:13:29,350
and of course you can do models to to
make sure you like it approximately the

226
00:13:29,350 --> 00:13:30,480
right amount

227
00:13:30,480 --> 00:13:34,880
and usually work said okay and supply
skurdal basically does the same thing

228
00:13:34,880 --> 00:13:35,899
with memory

229
00:13:35,899 --> 00:13:39,380
and it has a speaker called over commit
in which

230
00:13:39,380 --> 00:13:43,630
it it actually it turns out that most at
user space processes

231
00:13:43,630 --> 00:13:47,010
also asked for more memory than and
abusing and so it

232
00:13:47,010 --> 00:13:50,060
it will allow people to request an

233
00:13:50,060 --> 00:13:53,899
more memory than they actually end up
didn't than actually is available

234
00:13:53,899 --> 00:13:56,940
and this is what allows the Linux kernel
to be like okay

235
00:13:56,940 --> 00:14:00,130
you can fork its cabin rain an

236
00:14:00,130 --> 00:14:04,180
but you my own share everything but it's
okay

237
00:14:04,180 --> 00:14:07,990
so just a little more Mac over commit
you get a tweak these

238
00:14:07,990 --> 00:14:12,730
settings on the kernel an you can I
change that how it how it actually

239
00:14:12,730 --> 00:14:14,459
allocates

240
00:14:14,459 --> 00:14:17,470
a response to requests if you disable
overcommitted

241
00:14:17,470 --> 00:14:20,570
at fork if it will take up more memory

242
00:14:20,570 --> 00:14:24,190
if if copying the entire process would
take up more memory than

243
00:14:24,190 --> 00:14:28,050
on is available the machine or dispel

244
00:14:28,050 --> 00:14:32,810
and its can get a bit more complicated
if you aster involving virtualization

245
00:14:32,810 --> 00:14:34,800
and containers

246
00:14:34,800 --> 00:14:38,050
and sometimes a

247
00:14:38,050 --> 00:14:41,510
your run into situations where and

248
00:14:41,510 --> 00:14:46,160
the police Colonel actually does exhibit
too much memory and

249
00:14:46,160 --> 00:14:50,570
DM equivalent to the airline and giving
people doubters

250
00:14:50,570 --> 00:14:55,360
for and taking a different flight is
actually the single button killer

251
00:14:55,360 --> 00:15:00,079
in which it uses algorithm to just pick
in random processes to kill

252
00:15:00,079 --> 00:15:05,029
and that's not really a good situation

253
00:15:05,029 --> 00:15:08,889
but the point that I am trying to get
across your is mostly that

254
00:15:08,889 --> 00:15:13,209
there's a lot of things going on under
the hood when you call it's a process

255
00:15:13,209 --> 00:15:16,529
you can run into weird failure modes
depending on what your setup is

256
00:15:16,529 --> 00:15:20,399
and also there's a lot of overhead in in
in that it has to ask for a lot of

257
00:15:20,399 --> 00:15:21,380
things from

258
00:15:21,380 --> 00:15:26,199
the underlying operating system at Cedar
under problems there

259
00:15:26,199 --> 00:15:30,089
but and they're also like a lot of
reasons to use a process

260
00:15:30,089 --> 00:15:34,570
and turns out that most the time I I do
use a like shelling out a lot

261
00:15:34,570 --> 00:15:39,029
an it's really simple if there's just
command line program that you have that

262
00:15:39,029 --> 00:15:39,949
you

263
00:15:39,949 --> 00:15:44,300
and did you want to run from a Python
script I would just chill out

264
00:15:44,300 --> 00:15:47,370
it's super easy and it was that it works

265
00:15:47,370 --> 00:15:51,209
and is pretty flexible on at plus-one of
in most cases

266
00:15:51,209 --> 00:15:56,290
you can like read the standard air and a
standard air and communicate via pipes

267
00:15:56,290 --> 00:16:00,199
and spy drones rappers will will for
Python exceptions you have to deal

268
00:16:00,199 --> 00:16:02,329
return codes really

269
00:16:02,329 --> 00:16:05,610
but there's these dangers attacker the
overhead

270
00:16:05,610 --> 00:16:09,940
it also it is the case that its limited
API if you disconnect mickey over the

271
00:16:09,940 --> 00:16:10,860
command line

272
00:16:10,860 --> 00:16:14,490
and also if you have to transfer a lot
of data to an

273
00:16:14,490 --> 00:16:17,589
to this program you're into battery
issues

274
00:16:17,589 --> 00:16:21,470
if you're after a you you'll have
overhead from I O if you're writing out

275
00:16:21,470 --> 00:16:23,769
temporary files because you can just

276
00:16:23,769 --> 00:16:27,420
transfer data in memory at two to the
process

277
00:16:27,420 --> 00:16:30,540
and if you're using an about original
pipe

278
00:16:30,540 --> 00:16:34,160
I if you like sending information to to
the process and get information back you

279
00:16:34,160 --> 00:16:35,769
can run into deadlocking issues

280
00:16:35,769 --> 00:16:38,920
soaking in a little complicated and I
would say that

281
00:16:38,920 --> 00:16:42,060
if you're trying to do something more
than a simple just like run and look at

282
00:16:42,060 --> 00:16:43,339
the center towers center dare

283
00:16:43,339 --> 00:16:49,120
you probably don't actually want to be
shelling out

284
00:16:49,120 --> 00:16:52,300
rate to do it anyway usually I i do it
all the time

285
00:16:52,300 --> 00:16:55,639
and but never gonna talk about

286
00:16:55,639 --> 00:16:59,759
an a different case so there are a lot
of times when

287
00:16:59,759 --> 00:17:02,810
shelling out to process is not good
enough and

288
00:17:02,810 --> 00:17:06,370
those those cases are are usually when

289
00:17:06,370 --> 00:17:09,919
you care a lot about performance like
you're gonna be invoking that program a

290
00:17:09,919 --> 00:17:11,320
lot of times

291
00:17:11,320 --> 00:17:14,720
an or decide you need a more flexible
interface

292
00:17:14,720 --> 00:17:17,810
and it mainly program just doesn't work
have enough

293
00:17:17,810 --> 00:17:23,679
and it doesn't want you to just to
invoke a single function

294
00:17:23,679 --> 00:17:27,760
so how do we do that how do we call as
he cared for by Don

295
00:17:27,760 --> 00:17:31,410
so this is all something called a
foreign function interface and foreign

296
00:17:31,410 --> 00:17:33,380
function interface is just a way that

297
00:17:33,380 --> 00:17:37,130
at ruling which translates between the
Konkan mentions 0 one language and the

298
00:17:37,130 --> 00:17:37,789
other

299
00:17:37,789 --> 00:17:42,130
and reps like the data structures and
makes them available

300
00:17:42,130 --> 00:17:46,130
so there but two different options for
calling seek aid from papon

301
00:17:46,130 --> 00:17:49,539
I hope to shine a little bit late on the
landscape here

302
00:17:49,539 --> 00:17:54,390
so the first to go option is to racy
extension

303
00:17:54,390 --> 00:17:58,760
so python is just RC pipeline at least
is just a C++ program

304
00:17:58,760 --> 00:18:01,840
and you can make at more code

305
00:18:01,840 --> 00:18:04,980
available for Python I just rating more

306
00:18:04,980 --> 00:18:08,610
at the same period as a rate moore's C
Python

307
00:18:08,610 --> 00:18:11,679
and then you have more papon available

308
00:18:11,679 --> 00:18:16,490
you to bring a lot of see that way
newspaper ANSI API

309
00:18:16,490 --> 00:18:19,620
teen you see types which is

310
00:18:19,620 --> 00:18:25,140
per the Python standard library I wrap
sis other library called live better 5

311
00:18:25,140 --> 00:18:28,830
you don't you C compiler and you can
just load the

312
00:18:28,830 --> 00:18:32,280
the model rain to memory and it's a bit
tedious

313
00:18:32,280 --> 00:18:35,950
its kinda computer has a few a few
drawbacks

314
00:18:35,950 --> 00:18:39,710
and isn't is this thing called site on
which eyes have like hybrid language

315
00:18:39,710 --> 00:18:41,140
between president seen

316
00:18:41,140 --> 00:18:45,440
and employees at more for leaking
optimizing speed than just like

317
00:18:45,440 --> 00:18:46,220
accessing

318
00:18:46,220 --> 00:18:49,750
external libraries are just like ined I
have this

319
00:18:49,750 --> 00:18:53,440
this one little function and that's and
kinda slow

320
00:18:53,440 --> 00:18:57,990
somewhere really great insight on and
use that and the option to talk about a

321
00:18:57,990 --> 00:18:59,720
bit more is called see if I'm

322
00:18:59,720 --> 00:19:03,190
this was written by the pipe I authors
on

323
00:19:03,190 --> 00:19:08,539
to address and c-type shortcomings and
you can use it at the EPIA be available

324
00:19:08,539 --> 00:19:09,830
so you can

325
00:19:09,830 --> 00:19:15,360
and rated against like this see and the
API that the CIA provides or you can

326
00:19:15,360 --> 00:19:19,890
do to EVA eyes like that the compiled
version which is less flexible and like

327
00:19:19,890 --> 00:19:22,090
a bit more brittle but you don't use a
compiler

328
00:19:22,090 --> 00:19:27,539
which is kinda nice art so wanna talk a
little bit more about these different

329
00:19:27,539 --> 00:19:30,240
options in the context a problem that I
had at work

330
00:19:30,240 --> 00:19:35,610
which we talked about before so in order
to get around this like oh I have to

331
00:19:35,610 --> 00:19:37,179
excel at every time I wanna

332
00:19:37,179 --> 00:19:40,650
and it converts in tax from these weird
in coatings an

333
00:19:40,650 --> 00:19:44,030
we looked at and wrapping

334
00:19:44,030 --> 00:19:48,799
at this this library that a icon
provides cool if I come

335
00:19:48,799 --> 00:19:52,000
and turns out that the M the command
line program icon just

336
00:19:52,000 --> 00:19:56,530
a is just a a command-line rapper to
this library

337
00:19:56,530 --> 00:20:00,250
so it turns out there's eighty
electrical live by comp that's available

338
00:20:00,250 --> 00:20:00,789
on

339
00:20:00,789 --> 00:20:04,820
I P I that eg implement sissy extension
module

340
00:20:04,820 --> 00:20:09,390
for Python and looks a bit like this and
again she a bit more

341
00:20:09,390 --> 00:20:12,700
about it

342
00:20:12,700 --> 00:20:18,299
go to Mexico

343
00:20:18,299 --> 00:20:23,950
a here it is so you can see it's like
about 250 landed see

344
00:20:23,950 --> 00:20:27,039
now looks like seeing me and this

345
00:20:27,039 --> 00:20:31,700
this ray here's kinda the media there's
there's like three API functions in that

346
00:20:31,700 --> 00:20:33,750
live by conference at

347
00:20:33,750 --> 00:20:37,659
provides it's super simple at a called
icon open

348
00:20:37,659 --> 00:20:40,870
icons and I comes close

349
00:20:40,870 --> 00:20:45,010
an so the main one is called icon which
does the actual conversion

350
00:20:45,010 --> 00:20:48,860
and you can see this rapper here a

351
00:20:48,860 --> 00:20:52,250
string seeker can be a a bit tedious
cell

352
00:20:52,250 --> 00:20:56,530
you know is that there's like and I've
shinyuka pager code here and it's

353
00:20:56,530 --> 00:20:58,809
actually just still pursing the AM

354
00:20:58,809 --> 00:21:03,020
the the that the arguments to this
function

355
00:21:03,020 --> 00:21:07,240
an so definitely a lot less concise than
Python

356
00:21:07,240 --> 00:21:10,360
and not really doing anything here that
involves

357
00:21:10,360 --> 00:21:13,770
actually interfacing with the library
yet

358
00:21:13,770 --> 00:21:17,179
sale know this is really interesting

359
00:21:17,179 --> 00:21:20,480
until we get to hear where we actually
ran

360
00:21:20,480 --> 00:21:24,980
performing the conversion and actually
read a lot of this code when

361
00:21:24,980 --> 00:21:29,059
and I was thinking a very rating it and
and it is like a few

362
00:21:29,059 --> 00:21:32,700
questionable things I has a few bugs
that I want to fix

363
00:21:32,700 --> 00:21:35,980
but I can't decide that that whole
approach that they were taking was not

364
00:21:35,980 --> 00:21:38,010
very good after all in that

365
00:21:38,010 --> 00:21:43,370
at Lake converts things to a cutie
F-sixteen and then

366
00:21:43,370 --> 00:21:47,520
dumps that directly into pythons
internal on

367
00:21:47,520 --> 00:21:50,799
internal unico representation our view
the

368
00:21:50,799 --> 00:21:54,820
like that papon's see API and like

369
00:21:54,820 --> 00:21:59,039
that's actually at dependent on like the
platform you're on

370
00:21:59,039 --> 00:22:02,090
answer I was a presidentially works but
I prime means that I'm

371
00:22:02,090 --> 00:22:06,400
just running on the same platform as the
person who wrote it

372
00:22:06,400 --> 00:22:09,770
so there are a couple reasons that I
want to improve this bed

373
00:22:09,770 --> 00:22:16,630
can I have decided that I didn't
actually want to use it after all

374
00:22:16,630 --> 00:22:20,960
great so I decided to you ready
different implementation using see if I

375
00:22:20,960 --> 00:22:21,530
which

376
00:22:21,530 --> 00:22:24,710
I'd heard was pretty much the best
option for

377
00:22:24,710 --> 00:22:29,150
on shelling out to an external library
from Petrino

378
00:22:29,150 --> 00:22:32,320
and we show you a bit about I the

379
00:22:32,320 --> 00:22:37,799
implementation I wrote so this is an
excerpt which is actually the

380
00:22:37,799 --> 00:22:41,470
and the interesting part but i wanna put
up in a terminal so you can look at some

381
00:22:41,470 --> 00:22:46,220
more

382
00:22:46,220 --> 00:22:49,250
and gosh this is too big any

383
00:22:49,250 --> 00:22:53,470
set the whole thing you pry can't read a
lot of it by alt a little bit

384
00:22:53,470 --> 00:22:57,210
that something's in so this whole
filings are being

385
00:22:57,210 --> 00:23:02,970
and 150 lines and I have like actually a
lot of documentation in here

386
00:23:02,970 --> 00:23:06,110
so I'll tail around house you for
fireworks

387
00:23:06,110 --> 00:23:09,140
so it's pretty simple to setup and

388
00:23:09,140 --> 00:23:12,429
and you have like a little boy %oh point
here we have to i get a hand on it a

389
00:23:12,429 --> 00:23:14,140
fight class

390
00:23:14,140 --> 00:23:17,140
and then you gotta tell see for 5k

391
00:23:17,140 --> 00:23:21,270
an a little bit about the seeker that
you're wrapping just so it knows how do

392
00:23:21,270 --> 00:23:22,270
I setup the

393
00:23:22,270 --> 00:23:26,190
the mapping from sea to papon and so
here I am just like

394
00:23:26,190 --> 00:23:29,940
at giving some declarations but I can
actually an

395
00:23:29,940 --> 00:23:33,770
I can leave a few different a few things
out here so I i tell it that there's

396
00:23:33,770 --> 00:23:35,120
some constants I want to use

397
00:23:35,120 --> 00:23:39,350
but are the Telit white the constant
with the value of the conference are

398
00:23:39,350 --> 00:23:42,720
and because it turns out the super
Viking figure that out on its own

399
00:23:42,720 --> 00:23:46,070
and I see there's like this some see
struck said I want to use but I don't

400
00:23:46,070 --> 00:23:47,000
have a tell it

401
00:23:47,000 --> 00:23:50,720
and the size of the struct or what the
individual members are because

402
00:23:50,720 --> 00:23:55,549
see if I can also figure that iron which
is pretty pretty sweet

403
00:23:55,549 --> 00:23:58,630
an and then you run this verifying call

404
00:23:58,630 --> 00:24:02,230
which is what and in development

405
00:24:02,230 --> 00:24:06,179
see for viola actually transparently
invoke your compiler behind the scenes

406
00:24:06,179 --> 00:24:07,059
which is really sweet

407
00:24:07,059 --> 00:24:10,960
an you end up not having to go through
that

408
00:24:10,960 --> 00:24:14,270
the typical see workflow and found you
and your code

409
00:24:14,270 --> 00:24:17,860
and invoke make aren't like manually
compile and then

410
00:24:17,860 --> 00:24:21,230
your check and see if it works are
running it as you see provide for

411
00:24:21,230 --> 00:24:23,470
development just does that behind the
scenes for you

412
00:24:23,470 --> 00:24:27,980
which is really magical experience
hearse Inc

413
00:24:27,980 --> 00:24:34,610
a yes it is verify Sep is just what
wants you provide us for like figure and

414
00:24:34,610 --> 00:24:38,270
what's what what are the sizes are these
things in setting up

415
00:24:38,270 --> 00:24:42,480
and the mapping to fight on as a lot of
the rest to this file

416
00:24:42,480 --> 00:24:46,480
actually ends up being papon and when
the

417
00:24:46,480 --> 00:24:50,210
amazing things about using gallery likes
you for FY is

418
00:24:50,210 --> 00:24:56,010
that you end up being able to you see
code but also use Python

419
00:24:56,010 --> 00:25:00,230
Python mechanisms for abstraction to
rate here I'm actually I'm reading a

420
00:25:00,230 --> 00:25:00,990
class

421
00:25:00,990 --> 00:25:04,590
calling i com and giving it my fans

422
00:25:04,590 --> 00:25:07,690
and I also implement

423
00:25:07,690 --> 00:25:10,880
it as a context manager so I can use a

424
00:25:10,880 --> 00:25:15,960
the with statement with it and you have
it automatically know call I come close

425
00:25:15,960 --> 00:25:19,230
when it's done

426
00:25:19,230 --> 00:25:23,090
so it's really nice to to building used
the better abstraction mechanisms that

427
00:25:23,090 --> 00:25:26,230
the pipe and provides and to not have to
a great

428
00:25:26,230 --> 00:25:32,360
all my curry in a typical as see fashion

429
00:25:32,360 --> 00:25:35,440
rate so it's a little bit about the
interesting part here

430
00:25:35,440 --> 00:25:39,919
so inching heard this code is this one

431
00:25:39,919 --> 00:25:44,150
an this one method I com and

432
00:25:44,150 --> 00:25:47,840
a lot of the I love the work years
actually an

433
00:25:47,840 --> 00:25:51,289
is actually just allocating a buncha

434
00:25:51,289 --> 00:25:55,039
at cd2 structures from Python is really
cool

435
00:25:55,039 --> 00:26:00,200
am taken call a fight at new here in the
passage character pointer hand

436
00:26:00,200 --> 00:26:04,500
live like I'll keep his memory and I
have a Hamilton papon

437
00:26:04,500 --> 00:26:08,330
and thence then see for FY handles a
bunch of things behind the scenes

438
00:26:08,330 --> 00:26:13,159
and have magically in that you can use a
Python string and assign it to a

439
00:26:13,159 --> 00:26:14,230
character array

440
00:26:14,230 --> 00:26:17,779
a/c character and it will do the right
thing

441
00:26:17,779 --> 00:26:21,100
an and it has a bunch a different

442
00:26:21,100 --> 00:26:24,400
other different features I love this is
just

443
00:26:24,400 --> 00:26:31,400
an is just setting up the proper
pointers and and strings and batteries

444
00:26:33,529 --> 00:26:37,549
and then to have this one call here
where I a call the icon

445
00:26:37,549 --> 00:26:40,850
CE function from from

446
00:26:40,850 --> 00:26:46,710
fight on and then I actually cast it to
an integer

447
00:26:46,710 --> 00:26:50,720
and that's that's the interesting for
here it's like a belt 40 lines at code

448
00:26:50,720 --> 00:26:52,750
that actually interfaces with C

449
00:26:52,750 --> 00:26:57,390
which is definitely a far cry from the
250 lines that

450
00:26:57,390 --> 00:27:00,400
that we saw in that Python extension

451
00:27:00,400 --> 00:27:03,630
so you see that if you go from

452
00:27:03,630 --> 00:27:08,370
this is not like it completes at like a
totally production-ready virginian

453
00:27:08,370 --> 00:27:12,110
I have to a fix a few bags and also
package it properly

454
00:27:12,110 --> 00:27:15,380
and its system single development file
right now

455
00:27:15,380 --> 00:27:18,610
an but in the general case

456
00:27:18,610 --> 00:27:22,960
you in a break it a ton last see if
using something like see if I

457
00:27:22,960 --> 00:27:27,150
9 stuttering issue extension

458
00:27:27,150 --> 00:27:30,610
and that's really great because it means
we

459
00:27:30,610 --> 00:27:34,779
she is really awesome and it allows you
to eat to be really close to the machine

460
00:27:34,779 --> 00:27:35,690
and

461
00:27:35,690 --> 00:27:41,559
if you like a wizard and do a lot of
things that you can t from had none

462
00:27:41,559 --> 00:27:44,779
but it doesn't mean that we want to be
writing see all the time

463
00:27:44,779 --> 00:27:48,360
I don't want to be spending pages have
could pursing

464
00:27:48,360 --> 00:27:52,610
at like argument sir I dealing with a
lot of different string things

465
00:27:52,610 --> 00:27:56,320
and so if I can

466
00:27:56,320 --> 00:28:00,440
make them manage see that I rate just
the amount that I need to interface with

467
00:28:00,440 --> 00:28:03,740
this library and do kinda interesting
see things that

468
00:28:03,740 --> 00:28:06,830
that the library provides an my life is
in me a lot

469
00:28:06,830 --> 00:28:09,980
easier I mean it's been a lot less time
in team things

470
00:28:09,980 --> 00:28:13,419
it can be faster to rate in also an

471
00:28:13,419 --> 00:28:18,370
easier to debug

472
00:28:18,370 --> 00:28:21,669
so the conclusion a this'll section is
to

473
00:28:21,669 --> 00:28:27,440
rate lissy and for all those reasons
that I just mentioned

474
00:28:27,440 --> 00:28:32,210
little serene the pregnancy extension
that we looked at dinner 59 to see me

475
00:28:32,210 --> 00:28:35,500
see fire ever 120 lines of Python and
C++

476
00:28:35,500 --> 00:28:40,669
rare forty those actually interface with
C

477
00:28:40,669 --> 00:28:43,899
r8 so let's

478
00:28:43,899 --> 00:28:47,600
take a look at everything that we talked
about here what do we learn

479
00:28:47,600 --> 00:28:52,840
first we talked about calling external
process scenes from some process

480
00:28:52,840 --> 00:28:56,200
and this is the really simple simple way
to do things

481
00:28:56,200 --> 00:29:00,000
and but it has a few caveats one is that
its release pensions

482
00:29:00,000 --> 00:29:05,500
a King do crazy things that memory and I
can take a lot of computation time

483
00:29:05,500 --> 00:29:08,070
because at the context switches between
userspace

484
00:29:08,070 --> 00:29:13,880
and curl space and insulin flexible

485
00:29:13,880 --> 00:29:17,740
so if Ed if that's not gonna be
sufficient for your needs

486
00:29:17,740 --> 00:29:21,419
you might want to look at rapping C
library an

487
00:29:21,419 --> 00:29:26,210
and we showed you that one night example
from and this from the tires having

488
00:29:26,210 --> 00:29:29,890
and wish a reduce the amount I see that
her

489
00:29:29,890 --> 00:29:33,559
or rather I do some options

490
00:29:33,559 --> 00:29:36,809
an and heredity extension even you see
types

491
00:29:36,809 --> 00:29:40,220
axle Kanchi are you can you see if I and

492
00:29:40,220 --> 00:29:45,960
and using seaver file as you to minimize
the amount of see that your rating

493
00:29:45,960 --> 00:29:50,570
and there's obviously cases where you
not gonna did were some other option is

494
00:29:50,570 --> 00:29:53,350
going to be better there's tons a
different rappers out there

495
00:29:53,350 --> 00:29:56,480
like if you're using sepals plus you may
want to use a boost Python or something

496
00:29:56,480 --> 00:29:57,260
like that

497
00:29:57,260 --> 00:30:00,899
but if you for the civil case where
you're wrapping issue library

498
00:30:00,899 --> 00:30:06,149
and supervisor leary option

499
00:30:06,149 --> 00:30:10,740
and so we talked a bit about alive like
system sobel things that to think about

500
00:30:10,740 --> 00:30:12,250
when you're writing code

501
00:30:12,250 --> 00:30:15,409
an and i really wanna highlight here
that

502
00:30:15,409 --> 00:30:19,539
even though most the time we spend
writing a high-level languages like

503
00:30:19,539 --> 00:30:20,270
Python

504
00:30:20,270 --> 00:30:24,520
a high-level language means that that
there's a lot of levels

505
00:30:24,520 --> 00:30:28,200
underneath your level and all those
different pieces

506
00:30:28,200 --> 00:30:33,000
affect what you're doing so you need to
understand them

507
00:30:33,000 --> 00:30:36,490
sometimes most the time you can you
cannot think about them because things

508
00:30:36,490 --> 00:30:38,390
just work but when things go wrong

509
00:30:38,390 --> 00:30:41,919
you still need to understand the pieces
that are underneath and paid on

510
00:30:41,919 --> 00:30:45,620
so it pays to to learn those those
pieces

511
00:30:45,620 --> 00:30:49,330
lanting's about your operating system in
interface between pat on your operating

512
00:30:49,330 --> 00:30:50,590
system

513
00:30:50,590 --> 00:30:54,720
it'll really payoff when you have to be
optimizing things for speed

514
00:30:54,720 --> 00:31:01,720
we have to be debunking weird errors now
in Ft running systems in production

515
00:31:02,799 --> 00:31:06,789
and that's all I have for you today
thanks so much for coming

516
00:31:06,789 --> 00:31:11,230
I say hi to me and you follow me on
twitter all the code that I a show you

517
00:31:11,230 --> 00:31:14,850
today is on get herbs again how dot com
slash spanning

518
00:31:14,850 --> 00:31:20,080
if you have any questions about an Icee
are several see their systems or

519
00:31:20,080 --> 00:31:23,590
inbox and ask

520
00:31:23,590 --> 00:31:26,970
ask away I'll be here I guess lunch is
up next cerro

521
00:31:26,970 --> 00:31:33,970
and I can hang around for a few minutes
after its a problem

522
00:31:38,040 --> 00:31:41,980
but plenty of time for questions if
anybody wants to use the microphone

523
00:31:41,980 --> 00:31:48,980
man I'll and the other side I'll so when
you were writing the CFI code

524
00:31:49,679 --> 00:31:53,270
huh how did you debug sec faults I

525
00:31:53,270 --> 00:31:58,760
um there's always you can you can still
print things Fran

526
00:31:58,760 --> 00:32:03,920
using see if if I as well he just kinda
do print our friend from Python

527
00:32:03,920 --> 00:32:08,020
that there are a few things but I had to
deal with in that and

528
00:32:08,020 --> 00:32:11,140
doing all that text processing from
Taipan an

529
00:32:11,140 --> 00:32:15,179
is often so those are you like you know
cast something to the wrong type and

530
00:32:15,179 --> 00:32:15,690
Mike

531
00:32:15,690 --> 00:32:19,000
I get my some crazy 0.0 reich I it was
giving it

532
00:32:19,000 --> 00:32:22,190
a pointer to the wrong data structure
and we just crash

533
00:32:22,190 --> 00:32:25,460
and but it's pretty much the same as
seeing separates nicer because you

534
00:32:25,460 --> 00:32:27,300
provide us to compile set for you

535
00:32:27,300 --> 00:32:31,670
which is which is present thanks

536
00:32:31,670 --> 00:32:34,970
I do you have any suggestions on
resources for

537
00:32:34,970 --> 00:32:38,240
learning more about the layers between

538
00:32:38,240 --> 00:32:42,210
Python and everything under Python yes
sure

539
00:32:42,210 --> 00:32:46,280
um for Linux there's a great book called
The the Luminex

540
00:32:46,280 --> 00:32:50,840
programming interface TLD PKI ads really
good book you should check it out

541
00:32:50,840 --> 00:32:55,700
and ever have anything else I can think
about the top my head but I can think

542
00:32:55,700 --> 00:32:57,350
about it a bit and migrate something out

543
00:32:57,350 --> 00:33:00,880
cool is using us he tapes

544
00:33:00,880 --> 00:33:04,030
as like is the a lot more complicated
and see if that I

545
00:33:04,030 --> 00:33:07,990
'em I haven't done it personally because
an

546
00:33:07,990 --> 00:33:12,390
everything I read said that see if I
would be easier and I use and it worked

547
00:33:12,390 --> 00:33:16,850
cerro and I've heard ever heard that its
kinda clicking after Mr cared and

548
00:33:16,850 --> 00:33:18,100
there's some problems are then

549
00:33:18,100 --> 00:33:25,100
and as a civic Sam

550
00:33:25,510 --> 00:33:29,670
yet prevent I it seems like to see if I
might be a decent sort of

551
00:33:29,670 --> 00:33:34,030
the a bridge step to some to someone who
with experience ring Python

552
00:33:34,030 --> 00:33:37,440
wanting to learn more about reading see

553
00:33:37,440 --> 00:33:41,060
up but I can also see %uh that might not
be the case in much as wonder what your

554
00:33:41,060 --> 00:33:41,630
penis

555
00:33:41,630 --> 00:33:47,120
our much I think if you're like a very
beginner you probably you want to start

556
00:33:47,120 --> 00:33:47,930
is writing see

557
00:33:47,930 --> 00:33:52,470
actually aka an just there's fewer
moving parts so

558
00:33:52,470 --> 00:33:57,080
your things together on at if you just
near ratings he found compiling in

559
00:33:57,080 --> 00:34:00,040
and you want to know about that stuff
anyway because if something goes wrong

560
00:34:00,040 --> 00:34:02,280
with Steve Irvine then you don't know
what's going on

561
00:34:02,280 --> 00:34:05,910
coolant we get the other ranked like
actually

562
00:34:05,910 --> 00:34:09,530
thanks for the turkey does great
location

563
00:34:09,530 --> 00:34:13,080
and then i'm new slavery supports J

564
00:34:13,080 --> 00:34:16,830
them some Java libraries calls um

565
00:34:16,830 --> 00:34:20,080
I I don't think it does it supports pipe
I

566
00:34:20,080 --> 00:34:23,760
but and it's obviously dependent on the

567
00:34:23,760 --> 00:34:27,450
the back end okay thinkin

568
00:34:27,450 --> 00:34:30,600
a are you have you tried so big

569
00:34:30,600 --> 00:34:34,550
or is there is is there any reason you
didn't use a week because it would look

570
00:34:34,550 --> 00:34:35,230
like a

571
00:34:35,230 --> 00:34:38,640
how to the books kinda easy solution for
C especially I

572
00:34:38,640 --> 00:34:43,350
I didn't you swing on my mission this
week in the desert like code generation

573
00:34:43,350 --> 00:34:48,630
and like the Kanata automatic stuff
issue fighters was really an

574
00:34:48,630 --> 00:34:52,030
appealing to me but there's like a lot
of options so

575
00:34:52,030 --> 00:34:55,720
the reason that I haven't real them is
mostly that there's a lot of options

576
00:34:55,720 --> 00:35:01,040
okay thanks you know

577
00:35:01,040 --> 00:35:04,440
us

578
00:35:04,440 --> 00:35:11,440
looks like that's it for question so
thank you Christine I hereby declare at

579
00:35:11,529 --> 00:35:11,859
lunch time

