1
00:00:01,610 --> 00:00:03,199
welcome just an Abrams

2
00:00:03,199 --> 00:00:06,299
self-talk computer programmer is going
to share with us computer science for

3
00:00:06,299 --> 00:00:07,339
the soft top forever

4
00:00:07,339 --> 00:00:12,540
thanks very much hello everyone

5
00:00:12,540 --> 00:00:16,880
a as as he said and Justin Abrams and i
wanna talk about

6
00:00:16,880 --> 00:00:21,380
computer science force of top
programmers a little bit about me

7
00:00:21,380 --> 00:00:25,920
on I am a director product jeering at a
company called Quick left

8
00:00:25,920 --> 00:00:29,920
we do you consulting and also in a
product that I work on

9
00:00:29,920 --> 00:00:33,710
constantly which is a project management
app we're hiring security

10
00:00:33,710 --> 00:00:37,219
talk about that let me know I'm also the
author in motor

11
00:00:37,219 --> 00:00:40,460
which is a tool that will take static
analysis

12
00:00:40,460 --> 00:00:45,550
stuff like violent or JS and and pipe
that in to get her code review comments

13
00:00:45,550 --> 00:00:49,000
and you can find me online under the
name just neighbors

14
00:00:49,000 --> 00:00:52,140
am so

15
00:00:52,140 --> 00:00:56,420
an overview this talk I am we're going
to talk about Big O notation

16
00:00:56,420 --> 00:00:59,840
and how I learned about it what it is
how do you do it

17
00:00:59,840 --> 00:01:03,020
and then some wisdom and resources
around

18
00:01:03,020 --> 00:01:06,640
so too star of

19
00:01:06,640 --> 00:01:10,170
I am I work for a design agency in New
York City

20
00:01:10,170 --> 00:01:13,740
a several years ago and this was my
first

21
00:01:13,740 --> 00:01:19,080
career job that where I was really
working on things that were important

22
00:01:19,080 --> 00:01:22,790
and they're important to think to people
and it was a product that mattered

23
00:01:22,790 --> 00:01:26,070
and before that I work for a newspaper
and

24
00:01:26,070 --> 00:01:29,530
the the things that we did were

25
00:01:29,530 --> 00:01:32,540
very quick to start they had a limited
shelf life

26
00:01:32,540 --> 00:01:35,729
and then they can have trailed off and
no one really it didn't really matter

27
00:01:35,729 --> 00:01:36,400
anymore

28
00:01:36,400 --> 00:01:41,700
as examples that might be like and so
was reading an article about aids and in

29
00:01:41,700 --> 00:01:44,909
various counties and they wanna
visualizations a bill that and then the

30
00:01:44,909 --> 00:01:46,649
article publishers and three weeks later

31
00:01:46,649 --> 00:01:50,399
no one has ever know it's gonna visit
that site anymore and

32
00:01:50,399 --> 00:01:53,820
so I did some work for a

33
00:01:53,820 --> 00:01:56,969
ticket seller and the sole Broadway
tickets

34
00:01:56,969 --> 00:02:01,060
am and I might my responsibilities were

35
00:02:01,060 --> 00:02:06,030
to gonna build the entire thing from an
architectural same point and I did the

36
00:02:06,030 --> 00:02:06,719
schema design

37
00:02:06,719 --> 00:02:11,520
and and the to getting example of what

38
00:02:11,520 --> 00:02:14,720
a seen at a model looks like you can see
here

39
00:02:14,720 --> 00:02:18,739
you have a module and it this model has
dependencies

40
00:02:18,739 --> 00:02:23,520
on other modules and and they're very
clearly define relationships

41
00:02:23,520 --> 00:02:27,129
and and then here was our data model and

42
00:02:27,129 --> 00:02:30,940
there was a an erroneous requirement
laid out which is

43
00:02:30,940 --> 00:02:34,540
that everything had to be related to
everything I am

44
00:02:34,540 --> 00:02:40,010
which is a unfortunate because we didn't
just have three objects in a data model

45
00:02:40,010 --> 00:02:43,190
we had a lot of objects in a data model
and

46
00:02:43,190 --> 00:02:46,940
and any unfortunate thing about this is
that it was really slow when it came

47
00:02:46,940 --> 00:02:47,860
time to launch

48
00:02:47,860 --> 00:02:51,360
and and this kinda represented wanted

49
00:02:51,360 --> 00:02:55,690
biggest feelings I've had in my career
and it and it boiled down to not

50
00:02:55,690 --> 00:02:57,980
questioning the requirements given

51
00:02:57,980 --> 00:03:01,680
and not really understanding the
implications of what I was doing

52
00:03:01,680 --> 00:03:05,090
a corker mine igor and

53
00:03:05,090 --> 00:03:08,239
came to at the project

54
00:03:08,239 --> 00:03:11,590
after it was it deemed a very slow and
he said

55
00:03:11,590 --> 00:03:16,099
and he he was like all of course this is
slow you doing in place once elects

56
00:03:16,099 --> 00:03:20,150
now is like ol that some bad what is in
place once lets

57
00:03:20,150 --> 00:03:24,090
and and so this is what in plus one
select SAR

58
00:03:24,090 --> 00:03:27,810
and we're going to get a list love posts

59
00:03:27,810 --> 00:03:32,629
for this website and number in a loop
through those and then fix them for that

60
00:03:32,629 --> 00:03:33,750
from the database

61
00:03:33,750 --> 00:03:38,930
and so we make a single query to get
some post ID's and then

62
00:03:38,930 --> 00:03:42,610
for each one of those we we make another
sequel harry didn't get the rest to the

63
00:03:42,610 --> 00:03:43,290
information

64
00:03:43,290 --> 00:03:47,780
and this kind of this happens due to
have abusing jingle foreign guy jerk

65
00:03:47,780 --> 00:03:48,599
foreign keys

66
00:03:48,599 --> 00:03:52,620
and by it this was kinda my first

67
00:03:52,620 --> 00:03:57,010
introduction into this like in plus Y
and kind of syntax that I'd never really

68
00:03:57,010 --> 00:03:57,780
heard before

69
00:03:57,780 --> 00:04:00,920
and said he questions which is

70
00:04:00,920 --> 00:04:04,680
how did I not know this had a missed
this thing how did igor know about him

71
00:04:04,680 --> 00:04:07,120
plus one selection I had never heard and
was one selects

72
00:04:07,120 --> 00:04:10,340
and then how can I make sure this never
happens again and

73
00:04:10,340 --> 00:04:14,569
like I it it was very and interesting
because

74
00:04:14,569 --> 00:04:18,639
it identified a gap in my knowledge and
and

75
00:04:18,639 --> 00:04:22,449
so I guess that begs the question i've

76
00:04:22,449 --> 00:04:27,370
white is big in addition will be to
notation describes limiting behavior

77
00:04:27,370 --> 00:04:31,330
as a function tends toward infinity
using simply functions

78
00:04:31,330 --> 00:04:35,000
which means absolutely no one nothing to
anyone unless you already know

79
00:04:35,000 --> 00:04:35,960
everything about

80
00:04:35,960 --> 00:04:41,139
the connotation a so begin at Asian is
how programmers talk about

81
00:04:41,139 --> 00:04:45,350
how the two pieces of code relate

82
00:04:45,350 --> 00:04:48,389
II in terms of performance

83
00:04:48,389 --> 00:04:51,729
and and this this was really important
when I

84
00:04:51,729 --> 00:04:55,070
went to my interview with Google and so

85
00:04:55,070 --> 00:04:58,350
in prepping for this interview there was
a study was I had

86
00:04:58,350 --> 00:05:03,300
and needed to know data structures and
algorithms and system design in Java

87
00:05:03,300 --> 00:05:05,380
stuff and concurrency stuff

88
00:05:05,380 --> 00:05:08,800
and you know this that be does not on
this list

89
00:05:08,800 --> 00:05:12,080
these are the big no items and no one

90
00:05:12,080 --> 00:05:15,770
no Institute done in your view and says
here's a function was the connotation a

91
00:05:15,770 --> 00:05:16,560
dysfunction

92
00:05:16,560 --> 00:05:19,639
and its kind of assumed knowledge

93
00:05:19,639 --> 00:05:23,280
for these topics and this is kind of how
you

94
00:05:23,280 --> 00:05:27,840
express your knowledge in those topics
and

95
00:05:27,840 --> 00:05:30,889
and so it's it's probably worth talking
about a

96
00:05:30,889 --> 00:05:34,729
brief overview of data structures and
algorithms a data structure is how you

97
00:05:34,729 --> 00:05:36,080
structure your data

98
00:05:36,080 --> 00:05:39,949
and it is kinda how you organize things
and

99
00:05:39,949 --> 00:05:43,750
NN kinda and oversimplification would be

100
00:05:43,750 --> 00:05:47,150
if Python didn't give you lists and sets
and dictionaries and it only gave you

101
00:05:47,150 --> 00:05:51,410
object how would you build lists and
sets and all that other stuff

102
00:05:51,410 --> 00:05:55,160
am that how is is data structures

103
00:05:55,160 --> 00:06:00,360
an and algorithms are a step-by-step
procedure for doing nothing

104
00:06:00,360 --> 00:06:03,380
and so a

105
00:06:03,380 --> 00:06:07,050
and algorithm for making a peanut butter
and jelly sandwich would be

106
00:06:07,050 --> 00:06:10,430
arrest just the recipe it's the
instruction set up how you do it

107
00:06:10,430 --> 00:06:14,729
and and after them is also one of those
words that makes you sound super fancy

108
00:06:14,729 --> 00:06:17,190
to people who don't know that

109
00:06:17,190 --> 00:06:20,319
it just means recipe and so

110
00:06:20,319 --> 00:06:24,090
let's talk about to go notation this is
kinda but begun addition looks like

111
00:06:24,090 --> 00:06:27,539
and there is an ok function it is a big
O

112
00:06:27,539 --> 00:06:30,660
and it has a few

113
00:06:30,660 --> 00:06:34,350
I think they can go inside princes and

114
00:06:34,350 --> 00:06:37,530
so that had to go that there are are
with one

115
00:06:37,530 --> 00:06:40,880
which is how you be this a loved one I
am

116
00:06:40,880 --> 00:06:45,680
at which is called constant I'm a over
login is logarithmic

117
00:06:45,680 --> 00:06:48,789
with and is linear open squares
quadratic

118
00:06:48,789 --> 00:06:52,710
and 00 in factorial spec toria and and

119
00:06:52,710 --> 00:06:57,509
there more than this these are the main
ones that you're most likely to see

120
00:06:57,509 --> 00:07:02,250
I'm probably not going to talk about or
than factorial because it's

121
00:07:02,250 --> 00:07:06,830
a little you see it but it's not super
easy to graph and have a few grass in

122
00:07:06,830 --> 00:07:07,599
here that

123
00:07:07,599 --> 00:07:10,960
make things make sense and if you're
your math class

124
00:07:10,960 --> 00:07:14,259
a was a little long ago look it has been
for me you might

125
00:07:14,259 --> 00:07:18,030
not quite remember what these things
look like and so

126
00:07:18,030 --> 00:07:21,220
this is a graph have and

127
00:07:21,220 --> 00:07:24,849
the various up complexities which is and
what you talk

128
00:07:24,849 --> 00:07:27,970
runtime: complexities which is can how
we talk about big

129
00:07:27,970 --> 00:07:31,780
things and so in squared is the line in
blue

130
00:07:31,780 --> 00:07:35,729
that goes up really quickly and a within
his red

131
00:07:35,729 --> 00:07:39,699
and kinda increases in a flatline to
happen to the right

132
00:07:39,699 --> 00:07:43,970
and the Green Line that you can see just
above the

133
00:07:43,970 --> 00:07:47,280
Orange Line is login and it doesn't

134
00:07:47,280 --> 00:07:51,340
its its a group faster than an

135
00:07:51,340 --> 00:07:55,250
constant time which is the other line
but not by a lot and certainly not by as

136
00:07:55,250 --> 00:07:56,919
fast as everything else does

137
00:07:56,919 --> 00:08:01,759
so the axis and axes being bald here our
time is the y-axis how long something

138
00:08:01,759 --> 00:08:02,449
takes

139
00:08:02,449 --> 00:08:05,900
and the X axis is

140
00:08:05,900 --> 00:08:09,759
at the number I've items input into the
function so

141
00:08:09,759 --> 00:08:13,680
if you had at five items and you gave it
to a function that was

142
00:08:13,680 --> 00:08:17,009
11 squared which is the blue line

143
00:08:17,009 --> 00:08:21,419
you know you can have track this up and
you can see that it's at maybe 35

144
00:08:21,419 --> 00:08:25,360
units a time however we want to meet
measure time but if you're the pass it

145
00:08:25,360 --> 00:08:26,220
to the same function

146
00:08:26,220 --> 00:08:29,780
on the and on the orange it would be one
unit

147
00:08:29,780 --> 00:08:34,500
because is a constant amount of time no
matter how many items you have

148
00:08:34,500 --> 00:08:37,779
and so it's kinda go through

149
00:08:37,779 --> 00:08:42,820
and some examples a these time
complexities

150
00:08:42,820 --> 00:08:46,279
and this is and over one function

151
00:08:46,279 --> 00:08:50,220
it is pitching something from a list

152
00:08:50,220 --> 00:08:53,380
from from a an array by index

153
00:08:53,380 --> 00:09:00,040
and and the reason this is constant time
is because it doesn't matter if the

154
00:09:00,040 --> 00:09:03,640
index into the array is 5

155
00:09:03,640 --> 00:09:07,140
items big the item is are the array is
five times bigger or if it's five

156
00:09:07,140 --> 00:09:08,180
hundred items day

157
00:09:08,180 --> 00:09:12,850
it takes the same amount of time and in
this this makes little sense when you

158
00:09:12,850 --> 00:09:16,370
have a kinda conceptual understanding
how arrays work

159
00:09:16,370 --> 00:09:19,890
which is that they're all memory assets
into

160
00:09:19,890 --> 00:09:23,420
at sun block of memory so to say and

161
00:09:23,420 --> 00:09:27,730
and going from you know block 18 to
block twenty is no

162
00:09:27,730 --> 00:09:32,779
different it's just the same it's the
same physical operation in Chi

163
00:09:32,779 --> 00:09:35,930
and over then

164
00:09:35,930 --> 00:09:39,380
is I am Kenneth canonically

165
00:09:39,380 --> 00:09:43,070
a for loop for loops mean its north and
then

166
00:09:43,070 --> 00:09:47,420
and or that that instruction is or then
we're in is the sizeof

167
00:09:47,420 --> 00:09:51,810
the thing you're looking over and so
this is a function that

168
00:09:51,810 --> 00:09:56,000
checks whether something is contained in
and unordered list

169
00:09:56,000 --> 00:09:59,600
and so we look over the list if the
thing we're looking for

170
00:09:59,600 --> 00:10:02,890
is the thing that we were we have found
in this current

171
00:10:02,890 --> 00:10:07,019
iteration of the loop your turn true
otherwise return false

172
00:10:07,019 --> 00:10:10,470
so you might be asking I see the for
loop and

173
00:10:10,470 --> 00:10:13,829
who is second there's other stuff going
on in their function besides just a for

174
00:10:13,829 --> 00:10:14,100
loop

175
00:10:14,100 --> 00:10:17,730
what happened all that are not coming in
and

176
00:10:17,730 --> 00:10:21,110
so let's its gonna break down this
function and

177
00:10:21,110 --> 00:10:24,390
as I said a the for loop means it's an
all

178
00:10:24,390 --> 00:10:29,130
in operation we're in is the size a the
lst variable

179
00:10:29,130 --> 00:10:32,430
and checking whether an injury is

180
00:10:32,430 --> 00:10:36,040
people to the item we're looking for is
constant I'm

181
00:10:36,040 --> 00:10:39,500
you can kinda think this says comparing
two numbers that's the the simplest

182
00:10:39,500 --> 00:10:40,339
version

183
00:10:40,339 --> 00:10:44,149
and detecting whether one is able to to
you

184
00:10:44,149 --> 00:10:47,930
should be the same speed as checking
whether one is able to 2000

185
00:10:47,930 --> 00:10:51,950
nasa it's not dependent on the size
above the thing you're getting

186
00:10:51,950 --> 00:10:55,190
and and then the return true is

187
00:10:55,190 --> 00:10:58,829
is a constant thing

188
00:10:58,829 --> 00:11:02,880
doesn't matter what your turn it's the
same sixty and

189
00:11:02,880 --> 00:11:07,660
so that gives us a within times over
one-plus old one

190
00:11:07,660 --> 00:11:11,050
right so we add up all those those
things and

191
00:11:11,050 --> 00:11:15,019
so the question an expression is why
don't we just say

192
00:11:15,019 --> 00:11:19,010
old n times over one plus 01

193
00:11:19,010 --> 00:11:22,320
and and the answer is that that's really

194
00:11:22,320 --> 00:11:27,410
people to say Anna mine hurts to say all
that functions within ten to one puzzle

195
00:11:27,410 --> 00:11:28,160
on

196
00:11:28,160 --> 00:11:32,600
a and and for a better

197
00:11:32,600 --> 00:11:36,269
answer we have to go back to at kinda
the formal definition

198
00:11:36,269 --> 00:11:40,350
and any and if I would translate that
into non Matty terms

199
00:11:40,350 --> 00:11:43,760
what that means is that if we plot our
function I

200
00:11:43,760 --> 00:11:47,950
we can also apply another function which
is n which is some constant that we make

201
00:11:47,950 --> 00:11:48,730
up

202
00:11:48,730 --> 00:11:52,570
times the Big O have the function and

203
00:11:52,570 --> 00:11:55,579
and all values to the right

204
00:11:55,579 --> 00:11:59,139
have that function and

205
00:11:59,139 --> 00:12:02,899
we should should be under and so we have
two lines

206
00:12:02,899 --> 00:12:06,540
and and those lines should never cross

207
00:12:06,540 --> 00:12:11,240
going for the right after a certain
point and I'll kinda break this down

208
00:12:11,240 --> 00:12:14,380
I am so the question is how we plot to
go

209
00:12:14,380 --> 00:12:18,670
okay so we have bigger love 11 times
love one possible one

210
00:12:18,670 --> 00:12:22,579
and we're gonna plot something and

211
00:12:22,579 --> 00:12:25,959
so over then always means X in our
graphing

212
00:12:25,959 --> 00:12:29,870
and that's because it increases over
time

213
00:12:29,870 --> 00:12:33,200
and we want to see how this function
changes

214
00:12:33,200 --> 00:12:36,529
its the amount of time it takes changes
over time

215
00:12:36,529 --> 00:12:40,389
an so we

216
00:12:40,389 --> 00:12:43,410
substitute X 40 then and

217
00:12:43,410 --> 00:12:47,220
over one is a constant its constant
times he could pick any constant

218
00:12:47,220 --> 00:12:50,370
I picked 59 because they make progress
easier

219
00:12:50,370 --> 00:12:54,029
and so now we have the to plot

220
00:12:54,029 --> 00:12:57,360
X times five plus nine which looks a bit
like that

221
00:12:57,360 --> 00:13:03,560
just a straight line going to the right
and so if we were to

222
00:13:03,560 --> 00:13:06,579
if this is truly a with n an

223
00:13:06,579 --> 00:13:11,310
or at then we should be able to multiply
or event I'm some constant

224
00:13:11,310 --> 00:13:15,410
and and this blue line should stay under

225
00:13:15,410 --> 00:13:19,019
the new line I am and so here is

226
00:13:19,019 --> 00:13:23,050
applauding and with the concept n so
what this is online flooding

227
00:13:23,050 --> 00:13:28,779
10x and you can see the blue line is
never going to cross that red-line

228
00:13:28,779 --> 00:13:31,980
after about 3 a

229
00:13:31,980 --> 00:13:35,470
so we can say that this function is 00
then

230
00:13:35,470 --> 00:13:40,410
for all values greater than three and

231
00:13:40,410 --> 00:13:43,970
so this that's how we know that 11 is
correct

232
00:13:43,970 --> 00:13:48,199
at so you might be curious at what and
counterexamples to this are

233
00:13:48,199 --> 00:13:52,000
and so let's ask the question is this: a
loved one

234
00:13:52,000 --> 00:13:55,089
I of 1 means are constant I'm right

235
00:13:55,089 --> 00:13:58,910
and concert I means that we should be
able to plot

236
00:13:58,910 --> 00:14:03,050
some constant number to seize the same
regardless I love the x value

237
00:14:03,050 --> 00:14:07,199
and we're here x is equal to 15% to
applying that

238
00:14:07,199 --> 00:14:11,600
the line 5815 and and you can see that
the blue line

239
00:14:11,600 --> 00:14:14,810
is in fact above this redline

240
00:14:14,810 --> 00:14:19,519
am and and because it that the and

241
00:14:19,519 --> 00:14:22,600
we know this is not a constant I'm
function

242
00:14:22,600 --> 00:14:27,130
okay and so the next question is is it
the next higher

243
00:14:27,130 --> 00:14:30,180
complexity level is it 11 squared

244
00:14:30,180 --> 00:14:33,519
and and you can see here for values
greater than 7

245
00:14:33,519 --> 00:14:37,100
that blue line is never going to cross
this red line cuz that red-line shit up

246
00:14:37,100 --> 00:14:38,110
very quickly

247
00:14:38,110 --> 00:14:42,519
and and services applying Eq squares the
red line

248
00:14:42,519 --> 00:14:45,519
and you can see the yeah I actually for
for

249
00:14:45,519 --> 00:14:49,050
values greater than 6 this will never
cross

250
00:14:49,050 --> 00:14:52,139
and so it is true that this

251
00:14:52,139 --> 00:14:55,820
X times five plus nine is in accordance
weird operation

252
00:14:55,820 --> 00:14:59,380
it just also happens to be an with in
operation

253
00:14:59,380 --> 00:15:03,050
and so that's to say that it is

254
00:15:03,050 --> 00:15:06,100
it is true to say that something he is

255
00:15:06,100 --> 00:15:10,019
a higher degree of complexity it's just
not the best answer

256
00:15:10,019 --> 00:15:14,370
and so that would be like saying the
number 10 is greater than 5

257
00:15:14,370 --> 00:15:18,480
yes but it's also greater than seven and
nine it doesn't make any

258
00:15:18,480 --> 00:15:22,220
one less true but and kinda gives you

259
00:15:22,220 --> 00:15:26,350
a you really want the the lower blows
number

260
00:15:26,350 --> 00:15:30,160
that you can that you can choose their
and

261
00:15:30,160 --> 00:15:34,839
so Big O is an approximation up
algorithmic complexity

262
00:15:34,839 --> 00:15:39,370
which is which is to say that and Big O
is and how you

263
00:15:39,370 --> 00:15:43,519
approximate how complex something is how
much how much time or how many

264
00:15:43,519 --> 00:15:46,920
operations that will take and

265
00:15:46,920 --> 00:15:50,529
so to get back to the code we still have
the same code as before

266
00:15:50,529 --> 00:15:53,720
but both the list is empty and is the

267
00:15:53,720 --> 00:15:56,810
if the list is empty then we're gonna
returns for ever gonna return false

268
00:15:56,810 --> 00:15:57,560
immediately

269
00:15:57,560 --> 00:16:01,810
and but bigger notation deals with the
worst-case performance at something

270
00:16:01,810 --> 00:16:04,829
and even if it's empty we want to know
how bad it could be

271
00:16:04,829 --> 00:16:09,320
if it had 10 items in it and and

272
00:16:09,320 --> 00:16:12,360
there are other Big O flavors for you
know

273
00:16:12,360 --> 00:16:15,870
that don't deal with the best at the
worst-case an

274
00:16:15,870 --> 00:16:19,699
but we're not gonna cover that has its
it's not really brought up as often

275
00:16:19,699 --> 00:16:22,980
in in cap act please

276
00:16:22,980 --> 00:16:26,930
on okay so transitioning into or login

277
00:16:26,930 --> 00:16:31,300
and this is logarithmic time and a good

278
00:16:31,300 --> 00:16:34,420
where he's going to the same that things
before

279
00:16:34,420 --> 00:16:37,589
I we're gonna find something analysts
been said that being in unsorted list

280
00:16:37,589 --> 00:16:39,250
we're going to sort the list

281
00:16:39,250 --> 00:16:43,610
and that allows for more efficient
lookup for the sort of that

282
00:16:43,610 --> 00:16:47,850
unless kinda discuss why as we have this
list of 10 integers

283
00:16:47,850 --> 00:16:51,949
and we want to see if the number four is
in how my research works

284
00:16:51,949 --> 00:16:56,050
is we choose a center point in our list
and then say

285
00:16:56,050 --> 00:16:59,690
is for equal to 6% will know fours not
able to six

286
00:16:59,690 --> 00:17:03,550
so because this is sorted we can rule
out everything added in an index higher

287
00:17:03,550 --> 00:17:04,049
than

288
00:17:04,049 --> 00:17:07,640
the index six was an I so we can say
that

289
00:17:07,640 --> 00:17:11,490
you know everything because in six is
not gonna have for it because it's all

290
00:17:11,490 --> 00:17:12,390
sorted

291
00:17:12,390 --> 00:17:16,049
and so we split again and

292
00:17:16,049 --> 00:17:19,839
and we see is is for equal to three no
it's not

293
00:17:19,839 --> 00:17:24,500
and so that leaves us two numbers and
and we take a sporty before and it is

294
00:17:24,500 --> 00:17:28,010
asl at this is logarithmic because

295
00:17:28,010 --> 00:17:31,660
for every iteration this sample size we
have to operate on

296
00:17:31,660 --> 00:17:35,530
is a fraction of the size if that makes
sense

297
00:17:35,530 --> 00:17:39,840
and okay so the next one of these is
over then squared

298
00:17:39,840 --> 00:17:42,890
and this will make at ice

299
00:17:42,890 --> 00:17:46,450
I'll a list have payers in

300
00:17:46,450 --> 00:17:49,960
from an from a list and so

301
00:17:49,960 --> 00:17:54,250
this is a EE nested for loop and these
the Big O

302
00:17:54,250 --> 00:17:58,200
this is the big over that so as I said

303
00:17:58,200 --> 00:18:02,270
for loops are or then and and

304
00:18:02,270 --> 00:18:05,789
generating list is will call that of
wine and and returning

305
00:18:05,789 --> 00:18:09,770
one independent well and

306
00:18:09,770 --> 00:18:12,840
the once we at all these up and Kenneth

307
00:18:12,840 --> 00:18:16,750
in algebra terms we get over one-plus oh
then times or than

308
00:18:16,750 --> 00:18:19,850
times over one-plus or one which is
again insane

309
00:18:19,850 --> 00:18:23,299
and so let's break this down a little
bit I am

310
00:18:23,299 --> 00:18:26,559
so we can read let's rearrange this this
plus

311
00:18:26,559 --> 00:18:30,970
this plus love wanna move that to the
end and makes things a little

312
00:18:30,970 --> 00:18:34,360
easier and then we'll plug in some
numbers like we did before

313
00:18:34,360 --> 00:18:38,559
we Rosa and become axes and Constance
become numbers that we

314
00:18:38,559 --> 00:18:42,440
decide arbitrarily and

315
00:18:42,440 --> 00:18:46,070
and that went once we simplify this at
this reduces to

316
00:18:46,070 --> 00:18:49,490
exc weird plus 29 okay so

317
00:18:49,490 --> 00:18:53,340
now let's play X cleared plus 29 it
looks kinda like this

318
00:18:53,340 --> 00:18:57,690
I am so if this is true we all within
squared

319
00:18:57,690 --> 00:19:01,610
we should be able to apply some constant
times in squared

320
00:19:01,610 --> 00:19:06,309
and this function will never cross it so
he replied in 10 times

321
00:19:06,309 --> 00:19:10,780
X squared I'm and you'll notice that the
blue line will never cross those red

322
00:19:10,780 --> 00:19:11,580
line

323
00:19:11,580 --> 00:19:15,980
a for values greater than three so this
does in fact Valley

324
00:19:15,980 --> 00:19:19,910
that and this is an or then squared

325
00:19:19,910 --> 00:19:23,299
function and

326
00:19:23,299 --> 00:19:26,660
so there there are few gots is when it
comes to you to

327
00:19:26,660 --> 00:19:30,049
tracking the Big O or something

328
00:19:30,049 --> 00:19:33,190
and and a big one is that the

329
00:19:33,190 --> 00:19:36,929
baidoa function might not matter if you

330
00:19:36,929 --> 00:19:40,720
happen old in squared operation and

331
00:19:40,720 --> 00:19:44,140
and yours the the size the list that
you're going to past something

332
00:19:44,140 --> 00:19:48,860
is 5 items and 5 squared is 25

333
00:19:48,860 --> 00:19:52,150
rate so you're gonna do 25 operations

334
00:19:52,150 --> 00:19:56,570
am the computers are pretty fast

335
00:19:56,570 --> 00:20:00,320
and 25 operations are basically instant
and

336
00:20:00,320 --> 00:20:03,950
and so for really small sample sizes and
this is

337
00:20:03,950 --> 00:20:07,770
not as it can it can just not matter

338
00:20:07,770 --> 00:20:12,650
like your computer may be fast enough
that you can just ignore the field

339
00:20:12,650 --> 00:20:15,809
and another gotcha is that be

340
00:20:15,809 --> 00:20:18,940
theoretical speed have something is
different than the actual speed or

341
00:20:18,940 --> 00:20:19,789
something

342
00:20:19,789 --> 00:20:24,030
and and as we said that constancy it is
to pick a number

343
00:20:24,030 --> 00:20:28,380
when you're wrapping and the reality is
that those numbers may be really large

344
00:20:28,380 --> 00:20:31,390
and so you might have a constant that
always takes

345
00:20:31,390 --> 00:20:35,740
200,000 operations to do something but
it doesn't matter how big the list is

346
00:20:35,740 --> 00:20:38,929
just always 600,000 operations an

347
00:20:38,929 --> 00:20:42,059
and on so you could have

348
00:20:42,059 --> 00:20:45,380
constant I'm operations that are slower
than your

349
00:20:45,380 --> 00:20:49,190
an yours all within squared operations
because as we said

350
00:20:49,190 --> 00:20:52,610
innocence as five you have 25 operations

351
00:20:52,610 --> 00:20:56,100
its dramatically less than 200,000 so

352
00:20:56,100 --> 00:20:59,549
this these numbers in practicality

353
00:20:59,549 --> 00:21:03,450
might not pan out and the other thing is
that this is probably not gonna make

354
00:21:03,450 --> 00:21:04,470
your app faster

355
00:21:04,470 --> 00:21:08,620
and a lot of the the performance
bottlenecks that come in in

356
00:21:08,620 --> 00:21:12,789
most applications are kinda tied to you

357
00:21:12,789 --> 00:21:16,809
input/output operations so like speaking
to a database ready to a file system

358
00:21:16,809 --> 00:21:21,270
those things will will often dwarf the

359
00:21:21,270 --> 00:21:24,809
the speed have I've any particular
operation

360
00:21:24,809 --> 00:21:28,179
and one exception to this is kinda CPU
bounce off

361
00:21:28,179 --> 00:21:32,179
and and changing which data structures
and algorithms

362
00:21:32,179 --> 00:21:35,870
her user is Palin make that difference

363
00:21:35,870 --> 00:21:40,620
which is kinda where ago and and while
this is not going to make your apt

364
00:21:40,620 --> 00:21:41,250
faster

365
00:21:41,250 --> 00:21:44,700
is going to make your learning easier
and it's going to make

366
00:21:44,700 --> 00:21:47,679
especially as you get into data
structures and algorithms and then that

367
00:21:47,679 --> 00:21:48,600
aspect

368
00:21:48,600 --> 00:21:52,590
and and it's also going to make your
code review criticisms more articulate

369
00:21:52,590 --> 00:21:58,030
so you can say that this is this is bad
code and this is bad code because this

370
00:21:58,030 --> 00:21:58,390
is an

371
00:21:58,390 --> 00:22:01,909
oh that's weird operation and you can
instead use and/or an operation which is

372
00:22:01,909 --> 00:22:03,250
better

373
00:22:03,250 --> 00:22:06,659
and so let's look at some

374
00:22:06,659 --> 00:22:09,710
resources and that you can look at for

375
00:22:09,710 --> 00:22:14,049
continuing and this is the algorithm
design manual

376
00:22:14,049 --> 00:22:17,320
by Skeena and he is a fantastic book am

377
00:22:17,320 --> 00:22:20,980
is the first quarter up the book

378
00:22:20,980 --> 00:22:24,360
is a and overview Big O

379
00:22:24,360 --> 00:22:28,960
from more mathematical perspective am
data structures and algorithms and the

380
00:22:28,960 --> 00:22:29,630
last

381
00:22:29,630 --> 00:22:32,820
three quarters at the book are so you
have this problem

382
00:22:32,820 --> 00:22:36,799
you want to sort allister integers well
here are some ways you can do that

383
00:22:36,799 --> 00:22:40,159
these are the rent on complexities of
them add ol

384
00:22:40,159 --> 00:22:42,919
are your numbers all less than a hundred
maybe you want to use this other other

385
00:22:42,919 --> 00:22:46,150
than instead which is a little faster if
you have that one special case

386
00:22:46,150 --> 00:22:49,390
this is a really great book and I I
recommend everyone

387
00:22:49,390 --> 00:22:53,120
take a look there is a Corsair course

388
00:22:53,120 --> 00:22:57,820
and run by Stanford called algorithms
design analysis

389
00:22:57,820 --> 00:23:01,350
and they go over a lot of this graphing
things and

390
00:23:01,350 --> 00:23:05,610
and how to I had care how to do that

391
00:23:05,610 --> 00:23:08,780
and and its it said a good course

392
00:23:08,780 --> 00:23:11,840
it has a lotta I'm

393
00:23:11,840 --> 00:23:15,320
it has a lot of math stuff in there so
when I was going through this course I

394
00:23:15,320 --> 00:23:16,190
also had to kinda

395
00:23:16,190 --> 00:23:19,880
read up on the math so it's a little
slower and

396
00:23:19,880 --> 00:23:23,830
but it's still a really great resource
I'm also in the process of reading a

397
00:23:23,830 --> 00:23:26,030
book called computer science for
software programmers

398
00:23:26,030 --> 00:23:29,510
and so that might be a

399
00:23:29,510 --> 00:23:32,809
views it's not released yet but if you

400
00:23:32,809 --> 00:23:36,049
message me i'm happy to you let you know
when it's

401
00:23:36,049 --> 00:23:41,110
went to be available so you might be
asking however Michael differently now

402
00:23:41,110 --> 00:23:44,779
the answer is that knowing they go
doesn't mean he radioed any differently

403
00:23:44,779 --> 00:23:49,720
and because let's face it were mostly
colours in here if you need to know it

404
00:23:49,720 --> 00:23:50,820
to rate your code better

405
00:23:50,820 --> 00:23:54,150
you probably already know by now and but

406
00:23:54,150 --> 00:23:57,480
that the thing that is this is useful
for is it the baseline knowledge for

407
00:23:57,480 --> 00:23:58,919
data structures and algorithms

408
00:23:58,919 --> 00:24:02,080
and data structures and algorithms will
make greater differently

409
00:24:02,080 --> 00:24:06,770
and also this is a communication tool
similar to design patterns which

410
00:24:06,770 --> 00:24:10,080
you informally use but don't know what
you're using you don't know what to call

411
00:24:10,080 --> 00:24:12,600
them it's a vocabulary that you can use

412
00:24:12,600 --> 00:24:15,620
to you make your life easier in
communication with other programmers

413
00:24:15,620 --> 00:24:17,240
better

414
00:24:17,240 --> 00:24:20,990
so taken a recap Big O is useful in
communicating about the complexity of

415
00:24:20,990 --> 00:24:21,570
your code

416
00:24:21,570 --> 00:24:24,679
II is big just basic algorithm

417
00:24:24,679 --> 00:24:28,010
at basic arithmetic and algebra and

418
00:24:28,010 --> 00:24:31,630
it's used in talking about algorithms
and data structures

419
00:24:31,630 --> 00:24:35,760
and it's not as hard as it originally
sounds and

420
00:24:35,760 --> 00:24:40,820
so thanks I'm Justin and if you want to
hear more about this book I'm reading

421
00:24:40,820 --> 00:24:45,370
or no tap or quick left email me to be
fine at this conference and I'd love to

422
00:24:45,370 --> 00:24:46,179
talk to you

423
00:24:46,179 --> 00:24:53,179
thank you

424
00:25:23,730 --> 00:25:24,210
okay so

425
00:25:24,210 --> 00:25:27,310
Allen to your second question for
switches how different is

426
00:25:27,310 --> 00:25:30,410
and login compared to you and or login

427
00:25:30,410 --> 00:25:33,490
and see if you remember the graph from
the beginning which

428
00:25:33,490 --> 00:25:40,090
let's go back there and in log n

429
00:25:40,090 --> 00:25:44,330
is in times login so

430
00:25:44,330 --> 00:25:48,470
n is this red line going up into the
right login is this green line that

431
00:25:48,470 --> 00:25:50,200
barely increases about constant

432
00:25:50,200 --> 00:25:54,320
and so it's a little slower than

433
00:25:54,320 --> 00:25:58,830
its as the that difference between in

434
00:25:58,830 --> 00:26:03,640
and in login is the difference between
this constant I'm Orange Line

435
00:26:03,640 --> 00:26:06,670
and the login you rate so its

436
00:26:06,670 --> 00:26:11,210
it's actually end times login it's
almost an but not quite

437
00:26:11,210 --> 00:26:15,230
too little slower than that and in the
first question was how

438
00:26:15,230 --> 00:26:22,230
how do you know what numbers up again

439
00:26:29,660 --> 00:26:32,260
okay so the question is how do you know
whether to add or multiply

440
00:26:32,260 --> 00:26:35,830
in in these items so

441
00:26:35,830 --> 00:26:40,120
this and the 0 the first over one
operation here

442
00:26:40,120 --> 00:26:43,190
if entries able to items is done once

443
00:26:43,190 --> 00:26:46,440
every time in for the for loop so

444
00:26:46,440 --> 00:26:50,810
it happens and be one-time

445
00:26:50,810 --> 00:26:54,700
times the number items in the list so

446
00:26:54,700 --> 00:26:58,250
you think I know if view everything that
happens inside the for loop

447
00:26:58,250 --> 00:27:02,190
as being in parentheses and saying like
this number

448
00:27:02,190 --> 00:27:05,940
the size at this for loop times the
number the waivers happening inside

449
00:27:05,940 --> 00:27:10,270
and then again if we can advanced up to

450
00:27:10,270 --> 00:27:14,360
the in squared operation we have this

451
00:27:14,360 --> 00:27:17,600
and this for loop with inside is another
for loop

452
00:27:17,600 --> 00:27:22,490
so we have this and times in times one

453
00:27:22,490 --> 00:27:25,560
because the four I to enlist we do

454
00:27:25,560 --> 00:27:28,610
one concert I'm operation for each item
in list

455
00:27:28,610 --> 00:27:33,300
rain and then we multiplied that by the
numbers in the first list

456
00:27:33,300 --> 00:27:36,470
a so that's how you know where than with
an immersion

457
00:27:36,470 --> 00:27:42,800
I had

458
00:27:42,800 --> 00:27:49,800
yes so that the beginning and the things
that are just some one searches

459
00:27:53,869 --> 00:27:57,989
the quality operator itself is another
algorithm so that could have

460
00:27:57,989 --> 00:28:01,409
not 01 operation time

461
00:28:01,409 --> 00:28:05,259
if it's a string for example I P O M or
like the whatever thats Prince

462
00:28:05,259 --> 00:28:09,009
your your energy example I think I saw
one but for other

463
00:28:09,009 --> 00:28:13,129
object item may not be yes that is true
thank you

464
00:28:13,129 --> 00:28:16,980
I i think is probably worth mentioning
man

465
00:28:16,980 --> 00:28:21,190
I'm by no means an expert in Big O
notation this is kind of

466
00:28:21,190 --> 00:28:26,190
practical Big O there there's a lot of
the intricacies and people who

467
00:28:26,190 --> 00:28:29,960
really no big oh well from a theoretical
perspective might have some quibbles

468
00:28:29,960 --> 00:28:30,879
about how

469
00:28:30,879 --> 00:28:34,080
I presented it but the this is enough to
pass a

470
00:28:34,080 --> 00:28:37,269
Google interview and enough to be able
to speak

471
00:28:37,269 --> 00:28:40,820
about it in a way that makes you not
seem crazy

472
00:28:40,820 --> 00:28:45,210
so hopefully that colors this little
that

473
00:28:45,210 --> 00:28:49,909
better what's your other favorite tool
for actually evaluating Steve

474
00:28:49,909 --> 00:28:53,049
function I am IRC

475
00:28:53,049 --> 00:28:57,029
is my favorite tool and asking people I
think this is this

476
00:28:57,029 --> 00:29:01,259
let's talk about it because it's II
eight don't

477
00:29:01,259 --> 00:29:04,539
know who love a tool that will just spit
out the answer

478
00:29:04,539 --> 00:29:08,289
and so it's a lot of looking at this and
saying

479
00:29:08,289 --> 00:29:11,320
and okay so peerless equals new array

480
00:29:11,320 --> 00:29:15,789
that's our new list what happens when we
built a list well we probably allocates

481
00:29:15,789 --> 00:29:18,220
memory in that memory reallocate is

482
00:29:18,220 --> 00:29:22,470
prolly the same size the matter what we
do so

483
00:29:22,470 --> 00:29:25,529
I'll are just call it the constant a

484
00:29:25,529 --> 00:29:29,919
at and thence you you ask someone else
and and I'll tell you

485
00:29:29,919 --> 00:29:33,369
it really boils down to you having a

486
00:29:33,369 --> 00:29:37,009
a really solid understanding of what the
heck your kids doing until it when

487
00:29:37,009 --> 00:29:39,039
you're building an array what is
actually happening

488
00:29:39,039 --> 00:29:43,989
and the knowledge and data structures
and algorithms

489
00:29:43,989 --> 00:29:48,389
help you because they will tell you oh
you're doing

490
00:29:48,389 --> 00:29:54,409
Insur into and array well inserts into
array have a worst-case performance

491
00:29:54,409 --> 00:29:58,649
with whatever and then you say oh well
I'm gonna happen generate look up in

492
00:29:58,649 --> 00:30:00,259
this data structures documentation

493
00:30:00,259 --> 00:30:07,070
what is the unit Asian let's give just
another runner plus thank you very much

