1
00:00:03,169 --> 00:00:04,190
the storm in welcome

2
00:00:04,190 --> 00:00:07,799
Kate Helston she's going to talk about
how it is to be a full stack developer

3
00:00:07,799 --> 00:00:14,780
I

4
00:00:14,780 --> 00:00:19,050
hi everybody welcome I am so my name is
Kate huddleston

5
00:00:19,050 --> 00:00:22,670
I'm a software engineer hell from San
Francisco California

6
00:00:22,670 --> 00:00:26,010
that is a picture me and then also my
self portrait

7
00:00:26,010 --> 00:00:29,970
I A do it because my mom decided
recently that she wanted to embroider

8
00:00:29,970 --> 00:00:33,070
jean jacket for me with an image of a
computer girl

9
00:00:33,070 --> 00:00:36,540
cell I was three jean jacket without on
the back if you want to find me later in

10
00:00:36,540 --> 00:00:37,370
the conference

11
00:00:37,370 --> 00:00:40,660
I so why am I getting the stock

12
00:00:40,660 --> 00:00:43,860
I summit this presentation because I

13
00:00:43,860 --> 00:00:47,719
I'm in applications developer and when I
started doing contract work

14
00:00:47,719 --> 00:00:50,969
I had to manage the whole stack myself
and

15
00:00:50,969 --> 00:00:54,460
am it turns up I than is usually part of
a much larger system

16
00:00:54,460 --> 00:00:58,120
and when you come outside at the
application layer be it can be very

17
00:00:58,120 --> 00:00:58,899
confusing

18
00:00:58,899 --> 00:01:03,350
you can get lost there are a lot of
pieces and that's pretty much roughly

19
00:01:03,350 --> 00:01:05,590
how I play Tetris as well as how I
program

20
00:01:05,590 --> 00:01:08,869
I am so it can there's a lot of stuff
going on

21
00:01:08,869 --> 00:01:11,950
and it's important to understand how the
system works as a whole

22
00:01:11,950 --> 00:01:15,830
okay so what we're gonna talk about
today

23
00:01:15,830 --> 00:01:19,070
I'm gonna walk you through a semi
typical web application

24
00:01:19,070 --> 00:01:22,720
and I say semi typical because missus
computers in are always a lot of

25
00:01:22,720 --> 00:01:24,119
different ways to do things

26
00:01:24,119 --> 00:01:27,490
I'm gonna walk you through kinda the
system of systems which is

27
00:01:27,490 --> 00:01:30,799
development staging and production
environments as well as deployed

28
00:01:30,799 --> 00:01:34,579
and along the way I'm going to talk to
you about some helpful Python libraries

29
00:01:34,579 --> 00:01:37,799
what we are not going to talk about
today

30
00:01:37,799 --> 00:01:40,909
we are not going to talk about massively
scalable applications

31
00:01:40,909 --> 00:01:44,509
so if you're looking to build something
like Google or Facebook or

32
00:01:44,509 --> 00:01:47,850
understand those were not going to talk
about that today we're not gonna talk

33
00:01:47,850 --> 00:01:48,210
about

34
00:01:48,210 --> 00:01:51,579
every single insulation on the machine
there are things missing from this

35
00:01:51,579 --> 00:01:53,479
presentation because I cannot cover

36
00:01:53,479 --> 00:01:57,259
everything in 25 minutes and we're not
going to go into the nitty-gritty

37
00:01:57,259 --> 00:01:58,880
details up anything

38
00:01:58,880 --> 00:02:02,130
okay so

39
00:02:02,130 --> 00:02:06,229
ASME typical web application how many of
you have heard

40
00:02:06,229 --> 00:02:09,910
the term lamp a LAMP stack nice

41
00:02:09,910 --> 00:02:13,690
I've actually never programmed a lamp
staff stacked specifically

42
00:02:13,690 --> 00:02:17,430
but what it refers to is Linux Apache

43
00:02:17,430 --> 00:02:21,450
mighty Quinn PHP in his/her kinda the
four core parts

44
00:02:21,450 --> 00:02:24,650
love a and small for SAC web application

45
00:02:24,650 --> 00:02:27,920
its key operating system which in this
case is 1x

46
00:02:27,920 --> 00:02:32,640
the web server which is Apache the
database which is my sequel

47
00:02:32,640 --> 00:02:36,220
and the application language which is
PHP however most of us here probably

48
00:02:36,220 --> 00:02:37,920
don't program that sac WI

49
00:02:37,920 --> 00:02:41,060
I program something like and Lynn limp

50
00:02:41,060 --> 00:02:44,370
Ellen pp amor Linex

51
00:02:44,370 --> 00:02:49,610
and an axe post crests paper so you can
change out the parts of this stack

52
00:02:49,610 --> 00:02:52,980
um the next part of his presentation

53
00:02:52,980 --> 00:02:56,470
I can either speaker or I can do in song

54
00:02:56,470 --> 00:03:00,170
because I kind of came up with the theme
song one day was getting ready

55
00:03:00,170 --> 00:03:04,069
so soon have a strong preference either
way

56
00:03:04,069 --> 00:03:08,330
song okay I was kinda hoping and writing
that you would say that alright

57
00:03:08,330 --> 00:03:11,360
its to the tune of the Brady Bunch theme
song

58
00:03:11,360 --> 00:03:15,730
in alright its

59
00:03:15,730 --> 00:03:21,540
the store even Evelyn xserver and that
was hosting a patchy in some Epsom

60
00:03:21,540 --> 00:03:25,230
although them around in Python because
it's awesome

61
00:03:25,230 --> 00:03:29,170
the smallest one with flask and is the
story

62
00:03:29,170 --> 00:03:32,480
opposed to server that was busy with
some data

63
00:03:32,480 --> 00:03:36,560
up its own it was clear these two should
come together

64
00:03:36,560 --> 00:03:40,560
that's the way we build our first ball
sack web app both back where

65
00:03:40,560 --> 00:03:46,420
about it boesak whereabouts at that's
the way we built our first full stack

66
00:03:46,420 --> 00:03:48,030
lab after dun dun dun

67
00:03:48,030 --> 00:03:55,030
hey mean the

68
00:03:58,159 --> 00:04:00,569
yes you are free to laugh at me now
nothing

69
00:04:00,569 --> 00:04:04,950
an but this actually had the right
content amazingly enough

70
00:04:04,950 --> 00:04:08,330
being pretty as corny as it is it some
with all the parts %uh

71
00:04:08,330 --> 00:04:12,580
a small full stack web application that
has operating system the web server

72
00:04:12,580 --> 00:04:17,400
the application and the database and so
I'm if you take a look at these parts

73
00:04:17,400 --> 00:04:21,970
the web server is what receives requests
and gives back responses

74
00:04:21,970 --> 00:04:26,090
and annexin G unicorn or a patch in mud
whiskey are

75
00:04:26,090 --> 00:04:30,970
typical tools that people use for their
web servers the application layer which

76
00:04:30,970 --> 00:04:31,650
is where at

77
00:04:31,650 --> 00:04:34,900
the a book up a lot of Engineers spend
most of their time

78
00:04:34,900 --> 00:04:38,699
this is where frameworks like genuine
flask live Python libraries

79
00:04:38,699 --> 00:04:42,850
severe front-end code maybe a static
files although those can technically be

80
00:04:42,850 --> 00:04:43,860
served from anywhere

81
00:04:43,860 --> 00:04:47,199
because they are static and then finally
our database

82
00:04:47,199 --> 00:04:50,580
and a lot of people use relational
databases like post-crescent quell my

83
00:04:50,580 --> 00:04:52,070
sequel sequel server

84
00:04:52,070 --> 00:04:56,000
you can also use alternate dated
alternative data stores

85
00:04:56,000 --> 00:04:59,650
like you value stores I'm such as red as
a Mongo DB

86
00:04:59,650 --> 00:05:03,130
you can use those in conjunction with or
in love

87
00:05:03,130 --> 00:05:06,479
a relational database people kinda do
either these days

88
00:05:06,479 --> 00:05:09,690
so you start adding stuff to a small

89
00:05:09,690 --> 00:05:13,450
web application now you've got things up
and running you have a website

90
00:05:13,450 --> 00:05:17,849
it you know served by pages you might
have user authentication and

91
00:05:17,849 --> 00:05:21,139
and things like that and so now you want
some logging you wanna know what's going

92
00:05:21,139 --> 00:05:23,710
on you wanna know who's accessing about
application

93
00:05:23,710 --> 00:05:27,110
and these can just live as log files on
the machine for now

94
00:05:27,110 --> 00:05:30,280
because you have one server and it's
pretty small see just have maybe it's

95
00:05:30,280 --> 00:05:31,820
unicorn access log

96
00:05:31,820 --> 00:05:36,560
some Python logs whatever you also
probably have something for version

97
00:05:36,560 --> 00:05:37,160
control

98
00:05:37,160 --> 00:05:40,660
he probably don't just have cut hope
code hosted on this server

99
00:05:40,660 --> 00:05:44,550
and so for version control people use
get an SPN

100
00:05:44,550 --> 00:05:49,020
and they use get her orbit bucket to
host code repositories

101
00:05:49,020 --> 00:05:52,849
but

102
00:05:52,849 --> 00:05:56,229
so next now that everything's working
and running you have a web application

103
00:05:56,229 --> 00:05:57,960
people come again

104
00:05:57,960 --> 00:06:01,469
it you know does whatever it is that you
want your application to do you like I

105
00:06:01,469 --> 00:06:03,320
wanna start sending and receiving emails

106
00:06:03,320 --> 00:06:07,219
maybe I would like to send by users
newsletters or I would like to verify

107
00:06:07,219 --> 00:06:08,960
the e-mail address when they

108
00:06:08,960 --> 00:06:12,710
sign up for my site now you have to set
up an SMTP server

109
00:06:12,710 --> 00:06:16,690
you can host this yourself or you can
use some other great services out there

110
00:06:16,690 --> 00:06:17,289
for it

111
00:06:17,289 --> 00:06:20,419
like postmark ap Sen grid Amazon s yes

112
00:06:20,419 --> 00:06:24,409
and they have really great freemium
tears Mike 15,000 free

113
00:06:24,409 --> 00:06:28,060
emails i still havent is the mall happen

114
00:06:28,060 --> 00:06:32,669
so now you have your website sending
emails

115
00:06:32,669 --> 00:06:36,570
doing other stuff but you realize as the
User is registering

116
00:06:36,570 --> 00:06:39,820
can't put in there username password
email they had register

117
00:06:39,820 --> 00:06:43,440
from these tasks are taking a long time
in the kinda blocking the UI

118
00:06:43,440 --> 00:06:47,010
which is a bad experience for your user
you like I would like some %uh these

119
00:06:47,010 --> 00:06:48,430
tasks to run in the background

120
00:06:48,430 --> 00:06:52,870
like to kick them to an a synchronous
task service and you also might wanna do

121
00:06:52,870 --> 00:06:53,889
some web crawling

122
00:06:53,889 --> 00:06:57,900
so if you wanna go out and get data
across the web you might do that in the

123
00:06:57,900 --> 00:07:01,200
background might wanna schedule tasks to
do that so there's a lot of things that

124
00:07:01,200 --> 00:07:01,669
year

125
00:07:01,669 --> 00:07:05,190
it thinking you might want to have run
in the background if your application

126
00:07:05,190 --> 00:07:08,570
so setting up in a synchronous tasks to
some make sense now

127
00:07:08,570 --> 00:07:12,550
it's important to note that a
synchronous tasks usually have some sort

128
00:07:12,550 --> 00:07:13,469
of data store

129
00:07:13,469 --> 00:07:16,700
that there on time so I could read s or
rabbit MQ

130
00:07:16,700 --> 00:07:20,469
to store the tasks that you're running
so

131
00:07:20,469 --> 00:07:24,450
things that people typically use Python
are accused a Python library for a

132
00:07:24,450 --> 00:07:27,630
synchronous tasks and you can use a
readiness to store the tasks

133
00:07:27,630 --> 00:07:31,570
am celery in route and he was also a
really really comment sack for this

134
00:07:31,570 --> 00:07:35,919
I mention a synchronous frameworks
because there are a lot of talk Sep icon

135
00:07:35,919 --> 00:07:36,570
about them

136
00:07:36,570 --> 00:07:41,210
so twisted and tornado am and you guys
can go to the stocks if you wanna

137
00:07:41,210 --> 00:07:44,650
learn more about that section okay

138
00:07:44,650 --> 00:07:48,190
so you've got everything set up you can

139
00:07:48,190 --> 00:07:51,659
run tasks in the background do but
calling you had a pretty Bell bust

140
00:07:51,659 --> 00:07:55,580
what application now and you're starting
to have

141
00:07:55,580 --> 00:07:58,389
some airs the people are emailing you
and you don't really know what's going

142
00:07:58,389 --> 00:08:01,440
on sale like I should probably set up
some exception handling

143
00:08:01,440 --> 00:08:05,210
am and right now exception handling can
just be emails

144
00:08:05,210 --> 00:08:09,450
you have your SMTP server setup so every
time Python urging go throws an

145
00:08:09,450 --> 00:08:10,289
exception

146
00:08:10,289 --> 00:08:13,890
you can email yourself and know that
there's a problem see you can go in and

147
00:08:13,890 --> 00:08:14,240
fix

148
00:08:14,240 --> 00:08:17,940
is

149
00:08:17,940 --> 00:08:22,250
writes this is where we're at this is a
a pretty small single server

150
00:08:22,250 --> 00:08:26,539
web application I'm you have the other
services like version control in SMTP

151
00:08:26,539 --> 00:08:27,849
server

152
00:08:27,849 --> 00:08:30,700
but now we're gonna start pulling things
out in two separate services because

153
00:08:30,700 --> 00:08:32,690
your web application is getting larger

154
00:08:32,690 --> 00:08:35,839
it does not fit on one server doctor
database

155
00:08:35,839 --> 00:08:39,110
has a lot of data in it now and it's
growing faster then

156
00:08:39,110 --> 00:08:42,659
your web application and so you pulled
out into a separate server

157
00:08:42,659 --> 00:08:45,860
so now you've got two servers here at
your front end server your database

158
00:08:45,860 --> 00:08:46,959
server

159
00:08:46,959 --> 00:08:50,839
and you have to make network calls to
database

160
00:08:50,839 --> 00:08:55,570
see also do some math any realized that
there's someday to the people in the lot

161
00:08:55,570 --> 00:08:59,450
that doesn't change very often and so
you can add any cash so that you don't

162
00:08:59,450 --> 00:09:03,110
have to make this number calls and so
you can serve up the state a really fast

163
00:09:03,110 --> 00:09:06,269
some typical things that people use for
caches are men cashed

164
00:09:06,269 --> 00:09:09,959
reddest or varnish you'll notice read as
can be used for a lot of different

165
00:09:09,959 --> 00:09:10,930
things

166
00:09:10,930 --> 00:09:14,050
an monitoring

167
00:09:14,050 --> 00:09:16,880
see you have logging an exception
handling but now you need more

168
00:09:16,880 --> 00:09:19,910
monitoring you wanna know what's going
on you wanna know what the performance

169
00:09:19,910 --> 00:09:22,850
looks like he one of your site goes down

170
00:09:22,850 --> 00:09:26,560
so there it was like New Relic they do
great performance monitoring

171
00:09:26,560 --> 00:09:30,300
am NOT geo stirs IT infrastructure
monitoring Pingdom will tell you if your

172
00:09:30,300 --> 00:09:31,540
site is up or down

173
00:09:31,540 --> 00:09:35,250
seeking a really delightful text message
at four in the morning that your website

174
00:09:35,250 --> 00:09:37,160
is down and you have to fix it

175
00:09:37,160 --> 00:09:40,940
because that's what I love doing it for
the morning

176
00:09:40,940 --> 00:09:44,149
okay your synchronous tasks these are
growing

177
00:09:44,149 --> 00:09:47,240
a lot is taking up a ton of the
processing power under single front end

178
00:09:47,240 --> 00:09:48,140
web server

179
00:09:48,140 --> 00:09:51,580
so you have to pull these out into a
separate server cancer right

180
00:09:51,580 --> 00:09:55,480
the database you still kick past two at
the same way but you can scale that

181
00:09:55,480 --> 00:09:58,779
independently now as well

182
00:09:58,779 --> 00:10:01,880
exception handling is also growing as
you get more users

183
00:10:01,880 --> 00:10:05,709
and %um our code you generally get more
exceptions although

184
00:10:05,709 --> 00:10:09,760
hopefully not but probably so emails are
insufficient

185
00:10:09,760 --> 00:10:12,970
you can use tools like sentry will give
a shout out to Senshi cuz I think David

186
00:10:12,970 --> 00:10:14,290
came as here somewhere

187
00:10:14,290 --> 00:10:17,730
that conference a and it will aggregate
your exceptions

188
00:10:17,730 --> 00:10:20,170
and give you a lot of really great
information about the types of

189
00:10:20,170 --> 00:10:23,529
exceptions that people are hitting

190
00:10:23,529 --> 00:10:27,279
finally win a pole logging out into its
own service you can

191
00:10:27,279 --> 00:10:32,730
either hosts your own log server or you
can use tools like locklear Splunk

192
00:10:32,730 --> 00:10:36,519
when you have multiple servers running
you need to aggregate those logs across

193
00:10:36,519 --> 00:10:39,209
the service otherwise you're gonna have
to log into each server

194
00:10:39,209 --> 00:10:43,060
check the logs on the machine and thats
inefficient as you grow

195
00:10:43,060 --> 00:10:46,760
so you an aggregate all the logs and you
wanna do some

196
00:10:46,760 --> 00:10:50,240
public data mining on them to get useful
information on dove

197
00:10:50,240 --> 00:10:53,820
user patterns another sub so ugly in
spunk will do that for you or you can

198
00:10:53,820 --> 00:10:57,010
build it yourself

199
00:10:57,010 --> 00:11:00,320
okay so be sure to point that out in two
separate services but

200
00:11:00,320 --> 00:11:04,779
your web traffic is growing even more so
one front end web server

201
00:11:04,779 --> 00:11:08,170
is not sufficient miss restart to have
two or more

202
00:11:08,170 --> 00:11:11,540
servers the load balancer in front the
load balancer

203
00:11:11,540 --> 00:11:15,860
world will kick your traffic and across
the web servers they can also talk to

204
00:11:15,860 --> 00:11:18,910
the same database the same a synchronous
task servers

205
00:11:18,910 --> 00:11:22,529
and to the user books like the same
website but you can now skillet

206
00:11:22,529 --> 00:11:27,660
as your traffic grows you still have all
these other services by the way

207
00:11:27,660 --> 00:11:33,410
that you need to manage and remember and
login target Ashburton take a look at

208
00:11:33,410 --> 00:11:36,529
and then the final step for our web
server is

209
00:11:36,529 --> 00:11:40,370
database replication so you don't want
any single point of failure

210
00:11:40,370 --> 00:11:43,560
you might actually have done this
earlier but you can set up a master

211
00:11:43,560 --> 00:11:44,190
database

212
00:11:44,190 --> 00:11:48,170
never replicate to a slave database if
you master goes down or something bad

213
00:11:48,170 --> 00:11:51,120
happens you then have a backup that you
can fail over to

214
00:11:51,120 --> 00:11:54,560
you can also do cool stuff like right
data into the master and read of %uh

215
00:11:54,560 --> 00:11:56,019
read slates

216
00:11:56,019 --> 00:11:58,769
at this point you might also have
multiple servers here a synchronous

217
00:11:58,769 --> 00:12:02,060
tasks cuz if you're doing a lot of web
calling getting a lot of data

218
00:12:02,060 --> 00:12:04,610
you're gonna need multiple service for
that and so you can scale them

219
00:12:04,610 --> 00:12:06,130
independently

220
00:12:06,130 --> 00:12:10,589
so this is a pretty robust small to
medium-size web application

221
00:12:10,589 --> 00:12:13,910
at this point you probably can't manage
it all alone

222
00:12:13,910 --> 00:12:17,130
to be totally honest especially if you
have the web but traffic that justifies

223
00:12:17,130 --> 00:12:18,529
multiple servers

224
00:12:18,529 --> 00:12:21,829
and all that okay next up

225
00:12:21,829 --> 00:12:26,079
the system of systems so the storyline
happens at the same time as the

226
00:12:26,079 --> 00:12:28,249
storyline that I was just talking about

227
00:12:28,249 --> 00:12:32,110
at some point in building your
production web server

228
00:12:32,110 --> 00:12:35,970
you realize that you can't edit the code
on production

229
00:12:35,970 --> 00:12:39,889
well people are hitting at so production
represent everything that we just talked

230
00:12:39,889 --> 00:12:42,889
about all the stuff down into one tiny
box

231
00:12:42,889 --> 00:12:45,749
so you build out a development
environment where you can write code

232
00:12:45,749 --> 00:12:48,769
tested and other stuff before you do a
very simple deployed tear production

233
00:12:48,769 --> 00:12:51,649
machine

234
00:12:51,649 --> 00:12:55,360
thing about that is that you want to be
as close as possible to production

235
00:12:55,360 --> 00:12:58,660
if not the exact same and there are some
tools to help you do that

236
00:12:58,660 --> 00:13:02,490
if you have a Mac or usable until Fri
operating system

237
00:13:02,490 --> 00:13:05,810
you can use the end in the end rapper
locally to set up a

238
00:13:05,810 --> 00:13:09,779
environments that have all the paper
cancellations if you use Windows

239
00:13:09,779 --> 00:13:12,949
or you want really really exact replica
of production

240
00:13:12,949 --> 00:13:16,269
you can use a vagrant and VirtualBox to
create VM's

241
00:13:16,269 --> 00:13:19,810
that have the exact operating system and
installations

242
00:13:19,810 --> 00:13:23,149
up production so those are really great
tools for that

243
00:13:23,149 --> 00:13:26,749
deploy this point might be really simple
it might just be a get push

244
00:13:26,749 --> 00:13:29,769
gonna get pole tier one server and
restart services

245
00:13:29,769 --> 00:13:36,769
this will not scale down but this is a
place to start when you have one server

246
00:13:36,779 --> 00:13:39,930
alright so now you've written tests like
a developer

247
00:13:39,930 --> 00:13:43,860
but you want that to be automated you
want to have automated testing running

248
00:13:43,860 --> 00:13:47,939
so that you know your tests are passing
before you ever pushed to production

249
00:13:47,939 --> 00:13:54,040
so you had an attesting where in you can
use Jenkins circle CI Travis CI

250
00:13:54,040 --> 00:13:57,399
these are tools that will help you run
your tests on a medically either

251
00:13:57,399 --> 00:13:58,230
periodically

252
00:13:58,230 --> 00:14:03,709
or every time you push to your get help
repel

253
00:14:03,709 --> 00:14:08,170
finally you are you've reached the state
to the size we have more than just you

254
00:14:08,170 --> 00:14:09,759
working on your code base which is

255
00:14:09,759 --> 00:14:12,920
awesome so now you have buddies which
means you have multiple development

256
00:14:12,920 --> 00:14:15,259
environments one for each of the O

257
00:14:15,259 --> 00:14:18,329
this means that you probably need a
staging environment

258
00:14:18,329 --> 00:14:21,360
you don't want each developer pushing
straight to production you kinda wanna

259
00:14:21,360 --> 00:14:23,230
put all the co 2 one place

260
00:14:23,230 --> 00:14:26,490
make sure it's all working make sure all
the automated tests are running

261
00:14:26,490 --> 00:14:29,620
and then deploy to production so

262
00:14:29,620 --> 00:14:34,600
staging is gated by testing still would
be but you have multiple Devin moments

263
00:14:34,600 --> 00:14:37,720
at this point it's important to note
that you have see you have basically

264
00:14:37,720 --> 00:14:40,490
three sets environments production
staging in development

265
00:14:40,490 --> 00:14:43,610
you want these all to be identical you
don't want any surprises

266
00:14:43,610 --> 00:14:47,009
in higher code runs see you hitting the
point where you probably

267
00:14:47,009 --> 00:14:50,660
need automatic server configuration you
don't wanna log into every server

268
00:14:50,660 --> 00:14:52,509
install everything

269
00:14:52,509 --> 00:14:56,939
you wanna be able to create new machines
that are exact replicas of the old ones

270
00:14:56,939 --> 00:15:00,809
immediately so if your front end web
server goes down and he decided to kill

271
00:15:00,809 --> 00:15:03,829
it you can just spin up a new one start
all the processes

272
00:15:03,829 --> 00:15:07,860
and it up and running and deploy is also
probably getting more robust at this

273
00:15:07,860 --> 00:15:10,220
point if you have multiple machines in
production

274
00:15:10,220 --> 00:15:13,420
you can't log into each machine and
update your code to see you need some

275
00:15:13,420 --> 00:15:14,199
tool

276
00:15:14,199 --> 00:15:18,290
to help you deploy across multiple slurp
server simultaneously

277
00:15:18,290 --> 00:15:22,069
so there are a bunch of tools for server
configuration there are talks

278
00:15:22,069 --> 00:15:25,660
on puppet in Sabal salt and docker

279
00:15:25,660 --> 00:15:29,279
at this conference and chef is another
tool

280
00:15:29,279 --> 00:15:32,749
these tools can also be used for deploy
often lot of them have

281
00:15:32,749 --> 00:15:36,059
features for helping you deploy across
many different machines

282
00:15:36,059 --> 00:15:39,259
no akin to its also has a really awesome
talk later today

283
00:15:39,259 --> 00:15:42,360
specifically on the ploy estimate there
%uh

284
00:15:42,360 --> 00:15:47,930
so if you're interested in this topic
you should definitely got his talk

285
00:15:47,930 --> 00:15:51,059
up finally at this point if you have
multiple development environments

286
00:15:51,059 --> 00:15:54,290
you might need some automation around
creating development environments your

287
00:15:54,290 --> 00:15:55,420
some scripts

288
00:15:55,420 --> 00:15:58,610
or if you use vagrant in VirtualBox to
create p.m.

289
00:15:58,610 --> 00:16:03,009
you can use a lot of the server
configuration tools like chef and puppet

290
00:16:03,009 --> 00:16:06,529
to configure those local VMs which is
really useful because then you know that

291
00:16:06,529 --> 00:16:08,829
it's an exact replication up production

292
00:16:08,829 --> 00:16:13,119
and also you can automate the the
scripts for that

293
00:16:13,119 --> 00:16:16,220
the final level up systems of systems is

294
00:16:16,220 --> 00:16:20,079
when you start pulling things and
production out into multiple services

295
00:16:20,079 --> 00:16:24,399
so let's say that your code base for the
front end web application is different

296
00:16:24,399 --> 00:16:25,649
from the code base

297
00:16:25,649 --> 00:16:28,930
free a synchronous tasks those are
separate services

298
00:16:28,930 --> 00:16:32,290
separate code bases you're gonna have
multiple development and staging

299
00:16:32,290 --> 00:16:33,019
environments

300
00:16:33,019 --> 00:16:36,160
they're all gonna work the same they're
gonna you know

301
00:16:36,160 --> 00:16:39,509
aggregate things on stage into automated
testing and deploy but you don't have to

302
00:16:39,509 --> 00:16:42,279
deploy two separate code bases

303
00:16:42,279 --> 00:16:45,480
this is actually a good thing because
its code bases

304
00:16:45,480 --> 00:16:48,670
smaller and more manageable and makes it
easier for you to play

305
00:16:48,670 --> 00:16:53,170
Co changes because there's no such thing
as a small change to a large system

306
00:16:53,170 --> 00:16:57,220
my haircut write some notes on hosting

307
00:16:57,220 --> 00:17:00,170
I don't talk about this earlier but if
you decide to manage all the things that

308
00:17:00,170 --> 00:17:01,209
I talked about

309
00:17:01,209 --> 00:17:04,290
now yourself you're gonna need to host
your server somewhere

310
00:17:04,290 --> 00:17:08,579
you can either buy a giant server and
put it in your basement

311
00:17:08,579 --> 00:17:12,559
I love the 90's or you can host it are
someplace like a.w.s

312
00:17:12,559 --> 00:17:16,480
Rackspace aurélie note

313
00:17:16,480 --> 00:17:20,250
if you decide that you would like to man
to love the stuff yourself

314
00:17:20,250 --> 00:17:24,260
i'm for talk last year I set up a
starter chef repository for configuring

315
00:17:24,260 --> 00:17:25,829
a single server with

316
00:17:25,829 --> 00:17:30,280
and an ex post grass rad/s and a couple
other things in this is up to date

317
00:17:30,280 --> 00:17:34,380
see you can go Brian that and you can
have a web server up and running really

318
00:17:34,380 --> 00:17:36,000
quickly

319
00:17:36,000 --> 00:17:39,370
if you decide you do not wanna host I
love this yourself which

320
00:17:39,370 --> 00:17:42,650
I do not blame you for there are a
couple tools out there some platform as

321
00:17:42,650 --> 00:17:43,960
a service providers

322
00:17:43,960 --> 00:17:47,580
that will do everything for you olive
the server configuration

323
00:17:47,580 --> 00:17:50,780
all the installations security scaling

324
00:17:50,780 --> 00:17:54,380
and her local do this for you they're
great Elastic Beanstalk

325
00:17:54,380 --> 00:17:58,000
is Amazon version of this in a slow
behind her a good doesn't have quite as

326
00:17:58,000 --> 00:17:59,380
many features but

327
00:17:59,380 --> 00:18:04,750
I know they're working on it so these
tools are fantastic

328
00:18:04,750 --> 00:18:08,010
I also made it as some party favors an

329
00:18:08,010 --> 00:18:11,350
so all the things we talked about I put
into maps

330
00:18:11,350 --> 00:18:14,910
and I put them in get home so if you
wanna take a look at any of these

331
00:18:14,910 --> 00:18:17,559
resources that we talked about today in
one place

332
00:18:17,559 --> 00:18:20,600
I don't expect it to be able to read
these by the way 'em

333
00:18:20,600 --> 00:18:23,610
you can see there's the web server

334
00:18:23,610 --> 00:18:27,330
and you know some other typical tools
that people use these are by no means

335
00:18:27,330 --> 00:18:30,920
all the tools just a starting point am

336
00:18:30,920 --> 00:18:34,100
for the application layers a bunch of
Python libraries

337
00:18:34,100 --> 00:18:37,600
a buncha Python dev tools am DB libras

338
00:18:37,600 --> 00:18:43,750
kinda fun stuff you may want to use

339
00:18:43,750 --> 00:18:48,270
there's also that local dev tools
testing server configuration and deploy

340
00:18:48,270 --> 00:18:49,610
see nafta member other stuff

341
00:18:49,610 --> 00:18:53,870
there's whole buncha maps via I also I
did something really fun

342
00:18:53,870 --> 00:18:58,370
I'm a damn a map evolve the talks the
pike on and where they live in the stack

343
00:18:58,370 --> 00:19:02,010
so if you wanna do a deep dive in any
part love this

344
00:19:02,010 --> 00:19:05,590
them stacked that I talked about here's
where I love the talks live

345
00:19:05,590 --> 00:19:08,980
once again I don't expect you to be able
to read this but you can see there are a

346
00:19:08,980 --> 00:19:09,870
couple of talks

347
00:19:09,870 --> 00:19:15,080
on web servers and there's a bunch talks
on databases database library is

348
00:19:15,080 --> 00:19:16,660
optimizing post grass

349
00:19:16,660 --> 00:19:19,600
and there's a bunch of talks in a
synchronous tasks but mostly a

350
00:19:19,600 --> 00:19:21,559
synchronous framework so

351
00:19:21,559 --> 00:19:25,480
them tornado twisted

352
00:19:25,480 --> 00:19:28,929
am monitoring there are a couple talks
on

353
00:19:28,929 --> 00:19:32,940
monitoring application the book at the
talks at this conference are

354
00:19:32,940 --> 00:19:36,630
in the application layer because python
is commonly used as

355
00:19:36,630 --> 00:19:39,760
an application where code are

356
00:19:39,760 --> 00:19:44,250
language and there's the Python core
talks kinda like how does Python work at

357
00:19:44,250 --> 00:19:44,950
its core

358
00:19:44,950 --> 00:19:49,620
there some talks on the front end
frameworks in Orem layers and database

359
00:19:49,620 --> 00:19:51,860
libraries machine learning data

360
00:19:51,860 --> 00:19:55,220
has a bunch a good stuff in here and
then finally

361
00:19:55,220 --> 00:19:59,090
there a couple of talks on security a
bunch of talks on testing

362
00:19:59,090 --> 00:20:04,530
and a bunch of talks on server
configuration and deployed

363
00:20:04,530 --> 00:20:07,850
finally they're a bunch of talks that
while technical do not fit

364
00:20:07,850 --> 00:20:11,170
in that the stack that I made a South at
that tournament they're just so that you

365
00:20:11,170 --> 00:20:12,420
know that there are other

366
00:20:12,420 --> 00:20:16,370
talks I didn't want them to feel left
out

367
00:20:16,370 --> 00:20:19,809
threaten so the three major takeaways
from the stock

368
00:20:19,809 --> 00:20:23,340
hopefully you know what are the basic
pieces a full stack

369
00:20:23,340 --> 00:20:26,570
if nothing else I hope that you remember
the song and using it to yourself

370
00:20:26,570 --> 00:20:29,780
I apologize but not really if the brady
bunch song stuck in your head for the

371
00:20:29,780 --> 00:20:31,330
rest of the day

372
00:20:31,330 --> 00:20:34,620
and second what are these pieces look
like in different environments so

373
00:20:34,620 --> 00:20:36,540
devastating production

374
00:20:36,540 --> 00:20:40,240
deployed and I'm some resources for
learning more

375
00:20:40,240 --> 00:20:43,660
and and going forward so the maps

376
00:20:43,660 --> 00:20:46,960
have the different parts the stack and
some other resources that people use

377
00:20:46,960 --> 00:20:50,220
so that you can do research and get up
and running when you wanna do one other

378
00:20:50,220 --> 00:20:53,140
things that I talked about

379
00:20:53,140 --> 00:20:58,110
already so time for questions and if
anyone's terrified of getting up at the

380
00:20:58,110 --> 00:20:59,799
microphone asking questions which

381
00:20:59,799 --> 00:21:02,940
by the way i think is way more
terrifying than presenting you can find

382
00:21:02,940 --> 00:21:03,750
me afterwards

383
00:21:03,750 --> 00:21:06,820
or you can find me and for the rest the
conference

384
00:21:06,820 --> 00:21:13,820
job thank you

385
00:21:29,779 --> 00:21:33,720
hi I want to mention Charlie about how
to test

386
00:21:33,720 --> 00:21:37,669
they have a sis arm so yeah how the how
do you um

387
00:21:37,669 --> 00:21:41,140
replicated that because it's so
difficult into replicated database like

388
00:21:41,140 --> 00:21:41,960
Indian

389
00:21:41,960 --> 00:21:45,299
staging and the test oh yeah

390
00:21:45,299 --> 00:21:49,549
test data test data that's a big area
com that is a really good question that

391
00:21:49,549 --> 00:21:51,820
a lot of people are trying very hard to
solve

392
00:21:51,820 --> 00:21:55,850
I some other common things people do as
they create scripts for test data

393
00:21:55,850 --> 00:21:59,200
I know that there are services out there
I don't know the names of the top of my

394
00:21:59,200 --> 00:22:00,990
head that will help you create

395
00:22:00,990 --> 00:22:04,240
kind of development data because
oftentimes you can't

396
00:22:04,240 --> 00:22:08,059
test on production data it either
sensitive arts too large

397
00:22:08,059 --> 00:22:11,240
and thinking about those after to take a
look at them afterwards but now that's

398
00:22:11,240 --> 00:22:17,000
that is a good question in a really hard
thing to the left

399
00:22:17,000 --> 00:22:21,360
and you talked briefly about web servers
but maybe elaborate a little bit on the

400
00:22:21,360 --> 00:22:25,370
differences between weapon whiskey
servers and how the interplay

401
00:22:25,370 --> 00:22:29,200
um yeah a little bit so

402
00:22:29,200 --> 00:22:33,350
the the sack but I mentioned is like and
an axe and Unicorn is a really common

403
00:22:33,350 --> 00:22:34,190
stock

404
00:22:34,190 --> 00:22:37,970
so engine x's a reverse proxy you can
actually serve up

405
00:22:37,970 --> 00:22:41,159
pretty much anything from and annex even
serve up static files from a different

406
00:22:41,159 --> 00:22:42,240
location

407
00:22:42,240 --> 00:22:45,960
but it will also listen on port secure
servers and so you can use

408
00:22:45,960 --> 00:22:49,809
G unicorn which is are always capitation
that will serve a pure Python code

409
00:22:49,809 --> 00:22:53,230
specifically to engine action so they're
listening to each other

410
00:22:53,230 --> 00:22:57,260
and so with Apache you need mod whiskey
or something similar to it

411
00:22:57,260 --> 00:22:59,990
and they have to work in tandem but you
can actually switch them out you can use

412
00:22:59,990 --> 00:23:01,039
engine X with

413
00:23:01,039 --> 00:23:04,690
you there's you whiskey and a couple of
other tools

414
00:23:04,690 --> 00:23:08,480
so that's that's vaguely how it works

415
00:23:08,480 --> 00:23:12,289
thank you

416
00:23:12,289 --> 00:23:15,679
new dimension fabric as a way for it

417
00:23:15,679 --> 00:23:19,409
deploying into in eyes it

418
00:23:19,409 --> 00:23:22,610
is it because you don't use it to the
recommend it or in

419
00:23:22,610 --> 00:23:25,529
I didn't %uh there's a lot of things
they did not mention the stock by the

420
00:23:25,529 --> 00:23:25,840
way

421
00:23:25,840 --> 00:23:29,539
there are a lot of other tools out there
I didn't go really deep into the play

422
00:23:29,539 --> 00:23:32,399
cuz I do think that now has a fantastic
talk on that

423
00:23:32,399 --> 00:23:35,740
and he talks about fabric he talks about

424
00:23:35,740 --> 00:23:38,830
you know selling tar files over to
different servers

425
00:23:38,830 --> 00:23:42,630
com so he does really add up there are a
lot of ways to deploy

426
00:23:42,630 --> 00:23:46,830
deploy is also a really challenging
problem to solve and so that's something

427
00:23:46,830 --> 00:23:50,029
that you can you can do very simply

428
00:23:50,029 --> 00:23:53,659
and very manually which is what I
illustrated by like get pushing in get

429
00:23:53,659 --> 00:23:56,580
polling and it's not necessarily a
production recommendation

430
00:23:56,580 --> 00:24:00,149
but it's possible to do that manually
and that simply but

431
00:24:00,149 --> 00:24:03,750
as you grow and you have many many
servers it becomes very challenging to

432
00:24:03,750 --> 00:24:05,889
deploy across all those servers

433
00:24:05,889 --> 00:24:10,600
at the same time and so I'm I would
recommend going to Noah's talk because

434
00:24:10,600 --> 00:24:17,600
he will tell you all about it

435
00:24:27,130 --> 00:24:31,430
hi arm I attending her love like like
that legacy Python code

436
00:24:31,430 --> 00:24:34,810
and the law and i've seen on love
previous developers where they said

437
00:24:34,810 --> 00:24:38,140
run the in bill Python web server Anna

438
00:24:38,140 --> 00:24:42,940
production date is run on Pacha engine X
nominee what what would you recommend

439
00:24:42,940 --> 00:24:46,550
when you fall look for local productions
look feel local dive so do you like you

440
00:24:46,550 --> 00:24:48,570
run it on the local populace

441
00:24:48,570 --> 00:24:54,240
rely on local local llama I web server
yeah that's entirely up to you it and I

442
00:24:54,240 --> 00:24:57,420
think and how much you want to be
testing in your development environment

443
00:24:57,420 --> 00:25:01,530
so if you have a staging environment
that is an exact replica production

444
00:25:01,530 --> 00:25:04,390
there's some things that you can be
maybe a little more lax about with your

445
00:25:04,390 --> 00:25:07,480
development environment just use kinda
like a local Python

446
00:25:07,480 --> 00:25:11,520
observer so that's what I do and I
double check that everything works in

447
00:25:11,520 --> 00:25:13,670
staging before I ever deployed to
production

448
00:25:13,670 --> 00:25:17,220
if you just have to have an production
you have a really small system

449
00:25:17,220 --> 00:25:20,470
am anyone everything to be the exact
same you can

450
00:25:20,470 --> 00:25:23,530
if neither saw all those things locally
or mention vagrant

451
00:25:23,530 --> 00:25:27,780
bigger as a really awesome tool for
setting up the items that are exact

452
00:25:27,780 --> 00:25:29,900
replications a production on your local
machine

453
00:25:29,900 --> 00:25:33,530
see other local the am running and you
can have patchy and all that different

454
00:25:33,530 --> 00:25:34,420
stuff installed

455
00:25:34,420 --> 00:25:41,420
thanks

456
00:25:43,759 --> 00:25:44,519
hey I'm

457
00:25:44,519 --> 00:25:49,159
I was wondering if you could sing
another song 3 how

458
00:25:49,159 --> 00:25:52,519
sadly I do have more spontaneous the

459
00:25:52,519 --> 00:25:56,700
I I was curious you mention a few
synchronous frameworks that if you use

460
00:25:56,700 --> 00:25:58,460
like twisted in tornado

461
00:25:58,460 --> 00:26:02,269
I'm wondering light water use cases
within your full stack

462
00:26:02,269 --> 00:26:05,840
um environment would you use that poor
arm

463
00:26:05,840 --> 00:26:09,330
that is an excellent question I don't
use wesun tornado much

464
00:26:09,330 --> 00:26:14,419
their com their fairly complicated in my
opinion

465
00:26:14,419 --> 00:26:18,029
and really advanced is the chat servers

466
00:26:18,029 --> 00:26:22,379
and things like that you know people use
twisted for I don't personally have a

467
00:26:22,379 --> 00:26:25,730
use case my building up my bells and
whistles web applications for them

468
00:26:25,730 --> 00:26:28,899
but that I imagine there are a bunch of
talks

469
00:26:28,899 --> 00:26:33,789
at this conference on twisted and
tornado people who are experts will tell

470
00:26:33,789 --> 00:26:34,720
you more about it

471
00:26:34,720 --> 00:26:38,519
I am definitely not an expert on either
one of us thanks

472
00:26:38,519 --> 00:26:43,750
Kate thank you again

473
00:26:43,750 --> 00:26:44,740
thank everyone

