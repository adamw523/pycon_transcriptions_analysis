1
00:00:00,049 --> 00:00:03,189
right now it is my pleasure to welcome
augie

2
00:00:03,189 --> 00:00:06,190
fackler and Nathaniel meant to stop
close

3
00:00:06,190 --> 00:00:13,190
I give them a warm round of applause hi

4
00:00:13,509 --> 00:00:18,170
hi good afternoon thank you for coming
this is my friend augie he is a

5
00:00:18,170 --> 00:00:21,960
contributor to mercurial and various
pipe on libraries

6
00:00:21,960 --> 00:00:26,109
this is my friend Daniel he's the tech
leader my lunch the summer cold weather

7
00:00:26,109 --> 00:00:28,050
application that also runs cool coat in

8
00:00:28,050 --> 00:00:32,369
and has contributed to pilot how many
view task your software

9
00:00:32,369 --> 00:00:38,070
good good how many %uh view task your
software from the perspective other

10
00:00:38,070 --> 00:00:38,760
users

11
00:00:38,760 --> 00:00:43,010
so if you're writing a web app you have
to ask the driver browser

12
00:00:43,010 --> 00:00:47,300
okay now how many have you document your
software in terms of stating

13
00:00:47,300 --> 00:00:50,809
what people can actually explicitly
depend on about your behavior

14
00:00:50,809 --> 00:00:56,399
men's good now how many have you have
had an angry mob come after you because

15
00:00:56,399 --> 00:00:58,309
you made some change your software

16
00:00:58,309 --> 00:01:02,449
it didn't change in a year guarantees in
all it s kept passing but they were

17
00:01:02,449 --> 00:01:04,400
still angry because something had
changed

18
00:01:04,400 --> 00:01:09,500
okay we've we've all been there and
we've all had that problem and we want

19
00:01:09,500 --> 00:01:11,380
to expand on these topics today

20
00:01:11,380 --> 00:01:14,979
to give you some better tools to have a
better conversation

21
00:01:14,979 --> 00:01:18,229
when that situation comes up and what
we're going to be talking about

22
00:01:18,229 --> 00:01:21,460
is behavior or envelopes for software

23
00:01:21,460 --> 00:01:25,049
now these are gonna be like a physical
and below matter

24
00:01:25,049 --> 00:01:28,850
metaphor it's not going to be like
putting network packets in some

25
00:01:28,850 --> 00:01:31,880
larger envelope we are thinking in terms
of

26
00:01:31,880 --> 00:01:36,189
flight envelope spur aircraft so this is
the flight envelope

27
00:01:36,189 --> 00:01:39,490
love a F 104 a Starfighter airplane

28
00:01:39,490 --> 00:01:44,689
this particular a envelope talks about
the behavior the aircraft big

29
00:01:44,689 --> 00:01:48,930
as relates between its airspeed and its
altitude and there's some extra

30
00:01:48,930 --> 00:01:52,509
information here I G forces that's kinda
hard to understand

31
00:01:52,509 --> 00:01:55,659
but the if you're above those curved
lines

32
00:01:55,659 --> 00:01:59,479
in still inside the white space on the
chart your plane flies when you're

33
00:01:59,479 --> 00:02:02,750
having a pretty good time after below
those curved lines your plane isn't

34
00:02:02,750 --> 00:02:04,149
going fast enough to fly

35
00:02:04,149 --> 00:02:07,770
and if you're in the Reds base your plan
is falling apart

36
00:02:07,770 --> 00:02:12,180
now I found this compelling because it's
a very simple matter for

37
00:02:12,180 --> 00:02:15,569
right it tough it takes oliver given you
know

38
00:02:15,569 --> 00:02:19,540
space in along certain dimensions and it
divides it into

39
00:02:19,540 --> 00:02:24,280
what is allowed and what's not allowed
and I wanted to know can we do this for

40
00:02:24,280 --> 00:02:25,030
software

41
00:02:25,030 --> 00:02:30,080
can for software systems we find a
mansions along which

42
00:02:30,080 --> 00:02:33,810
some you serve the software is allowed
and some his disallowed

43
00:02:33,810 --> 00:02:37,550
you know whether it looks like this we
don't quite know what the dimensions are

44
00:02:37,550 --> 00:02:38,120
you up but

45
00:02:38,120 --> 00:02:42,800
but can we talk about our software this
way in terms of envelopes

46
00:02:42,800 --> 00:02:47,200
and so we think that we can and in fact
we have some examples

47
00:02:47,200 --> 00:02:50,530
the math package in Python has the
square root function

48
00:02:50,530 --> 00:02:53,900
and it actually has a very well defined
set of inputs

49
00:02:53,900 --> 00:02:57,080
rate you can give it any number that's
greater than or equal to 0

50
00:02:57,080 --> 00:03:00,090
and anything less than zero is invalid
and give you a valuer

51
00:03:00,090 --> 00:03:03,379
another level obstruction if you spot a
video game

52
00:03:03,379 --> 00:03:06,989
you know the the webstore the box will
have some descriptions are

53
00:03:06,989 --> 00:03:11,459
what the requirements for your system
are great how much RAM you have to have

54
00:03:11,459 --> 00:03:14,810
CPU speed you need to take things like
that one of my favorites

55
00:03:14,810 --> 00:03:18,349
runs and four gigs around by Hassli
close by when brother cuz I only have

56
00:03:18,349 --> 00:03:19,760
four gigs because otherwise

57
00:03:19,760 --> 00:03:22,950
the performance is really terrible
kilometer the bottom and unacceptable

58
00:03:22,950 --> 00:03:23,879
performance there

59
00:03:23,879 --> 00:03:28,700
another example is an HTTP Server
America bunch of different ways we can

60
00:03:28,700 --> 00:03:30,489
look at http for servers

61
00:03:30,489 --> 00:03:33,739
they're a bunch of different things we
can call HTTP servers

62
00:03:33,739 --> 00:03:36,959
so here's Python class rhyanne

63
00:03:36,959 --> 00:03:40,819
and it's a pipe bomb object and it's an
HTTP Server

64
00:03:40,819 --> 00:03:43,920
and it has an input any input must be of
type

65
00:03:43,920 --> 00:03:46,959
HTTP request and if we pass a string

66
00:03:46,959 --> 00:03:51,610
that is unwarranted use up the system
the system is not specify that way

67
00:03:51,610 --> 00:03:55,530
so if we look at this system's behavior
all input there is

68
00:03:55,530 --> 00:03:58,670
in the space of all possible pipe on
values

69
00:03:58,670 --> 00:04:01,780
there's an allowance for objects of type

70
00:04:01,780 --> 00:04:05,340
HTTP request and everything else is
disallowed

71
00:04:05,340 --> 00:04:09,400
at another level abstraction HP server
is a service you're talking to

72
00:04:09,400 --> 00:04:14,120
over the network so you connect to it
you send us some sequence of bytes

73
00:04:14,120 --> 00:04:17,900
if not a valid input it works if it's on
forbidden him from a beer

74
00:04:17,900 --> 00:04:21,669
just sending it random garbage it will
tell you that you sent to dinner

75
00:04:21,669 --> 00:04:24,770
that might look something like this with
the plane in this case the is every

76
00:04:24,770 --> 00:04:26,770
possible sequence and by its

77
00:04:26,770 --> 00:04:31,000
and the red dots are sort of a a word
crude representation of things that are

78
00:04:31,000 --> 00:04:33,300
going to be invalid

79
00:04:33,300 --> 00:04:36,490
now sometimes when we talk about an HTTP
Server

80
00:04:36,490 --> 00:04:39,800
we're talking about something like this
and even though it's a physical says

81
00:04:39,800 --> 00:04:40,350
some

82
00:04:40,350 --> 00:04:44,430
it's still supports the notion of
disallowed input

83
00:04:44,430 --> 00:04:47,780
right this is a disallowed input for the
server right

84
00:04:47,780 --> 00:04:53,360
some joker decided to hook a cat5e
Ethernet cable up to a wall socket

85
00:04:53,360 --> 00:04:56,470
and call that the ether killer so you
can let the magic smoke out if you

86
00:04:56,470 --> 00:04:59,430
return a cardinal stop working

87
00:04:59,430 --> 00:05:03,710
but we can still talk about the systems
in part in the same terms

88
00:05:03,710 --> 00:05:07,910
right from -1 the positive one vaults is
supported in part

89
00:05:07,910 --> 00:05:11,660
and everything else is disallowed we've
drawn it in two dimensions here

90
00:05:11,660 --> 00:05:14,960
but because there were eight wires and
the ethernet cable it's actually kinda

91
00:05:14,960 --> 00:05:15,820
van Oct 20

92
00:05:15,820 --> 00:05:20,500
hypercube now we both have some on a
background in physics where the things

93
00:05:20,500 --> 00:05:21,820
we do in physics a lot

94
00:05:21,820 --> 00:05:24,830
is sorta look at a system from both
sides and try and apply similar

95
00:05:24,830 --> 00:05:25,850
principles

96
00:05:25,850 --> 00:05:28,130
so we're gonna go through the looking
glass and start talking about the

97
00:05:28,130 --> 00:05:30,350
outputs Kamloops am a lot of time
thinking about

98
00:05:30,350 --> 00:05:35,669
inputs to a system so when we talk about
the outputs of a system and output

99
00:05:35,669 --> 00:05:36,940
envelopes

100
00:05:36,940 --> 00:05:41,639
we're not talking about systems that
have deterministic evaluations right

101
00:05:41,639 --> 00:05:42,259
this is

102
00:05:42,259 --> 00:05:46,330
a system that always evaluates to the
exact same value in fact that's what the

103
00:05:46,330 --> 00:05:48,699
utility of this expression is

104
00:05:48,699 --> 00:05:53,009
and here's another one if this didn't
always produce exactly the same value

105
00:05:53,009 --> 00:05:56,900
it wouldn't be nearly as useful to us
but here's a system but

106
00:05:56,900 --> 00:06:00,050
doesn't produce exactly the same value
every time

107
00:06:00,050 --> 00:06:03,630
but it doesn't produce any arbitrary
value either make its gonna give you a

108
00:06:03,630 --> 00:06:05,160
value between 0&1

109
00:06:05,160 --> 00:06:08,780
but input the promises actual it'll give
you some random value that's the whole

110
00:06:08,780 --> 00:06:09,669
point

111
00:06:09,669 --> 00:06:12,530
there are others more complicated
systems that have definitions kinda like

112
00:06:12,530 --> 00:06:15,919
this as well this is a software package
we discovered reading the star

113
00:06:15,919 --> 00:06:19,930
that is a database which will give you
less accurate results the quicker you

114
00:06:19,930 --> 00:06:23,380
want a result so one of the inputs you
give to the system his how fast you need

115
00:06:23,380 --> 00:06:24,319
a response

116
00:06:24,319 --> 00:06:27,250
and it'll give you less accurate data
the last time you give it but it still

117
00:06:27,250 --> 00:06:29,310
guarantees some value

118
00:06:29,310 --> 00:06:33,960
systems for operate in the presence have
adversary all contact

119
00:06:33,960 --> 00:06:37,970
I'm such as those that are proprietary
in some way or something like games that

120
00:06:37,970 --> 00:06:39,319
are dealing with cheaters

121
00:06:39,319 --> 00:06:43,900
who often have inexact specified system
behaviors right because they don't want

122
00:06:43,900 --> 00:06:45,479
to give too much away

123
00:06:45,479 --> 00:06:48,960
they simply want to specify the bare
minimum that they possibly can

124
00:06:48,960 --> 00:06:53,900
and leave room for a lot of different
implementation details

125
00:06:53,900 --> 00:06:58,889
so we've talked about input envelopes
and similarly there are output envelopes

126
00:06:58,889 --> 00:07:03,090
and we're gonna described now that a
system's behavior or envelope

127
00:07:03,090 --> 00:07:07,479
is the sum of those things and any other
incidental behaviors in between like

128
00:07:07,479 --> 00:07:08,819
side effects

129
00:07:08,819 --> 00:07:13,039
and so this is kind of like a worm hole
through multiple dimensions but

130
00:07:13,039 --> 00:07:17,729
there some input domain with I am with
dimensions of its own

131
00:07:17,729 --> 00:07:21,340
and a system will translate into another
universe

132
00:07:21,340 --> 00:07:24,849
into some output domain with some other
dimensions

133
00:07:24,849 --> 00:07:28,300
so now we define what animal it is we
want to say that you should be stating

134
00:07:28,300 --> 00:07:29,880
your system's behavior envelope

135
00:07:29,880 --> 00:07:33,479
preferably the only communication that
your client should need to be able to

136
00:07:33,479 --> 00:07:34,690
make use if your system

137
00:07:34,690 --> 00:07:38,479
should be this description love what
behaviors are guaranteed cannot

138
00:07:38,479 --> 00:07:41,259
guarantee you're probably already doing
some part of this right

139
00:07:41,259 --> 00:07:44,449
you specify valid inputs you specify the
Rangers outputs

140
00:07:44,449 --> 00:07:48,410
maybe you talk about what parts of your
system are thread-safe

141
00:07:48,410 --> 00:07:52,789
now when you specify your envelope it
guarantees that you will have thought

142
00:07:52,789 --> 00:07:53,379
about it

143
00:07:53,379 --> 00:07:56,830
which will put you hadn't shoulders
above many of your colleagues and peers

144
00:07:56,830 --> 00:07:58,509
who haven't done that

145
00:07:58,509 --> 00:08:02,449
so we see three tools that are the most
readily accessible for defining these

146
00:08:02,449 --> 00:08:03,400
envelopes

147
00:08:03,400 --> 00:08:07,400
the first one is a type system that's a
job for example has a stronger type

148
00:08:07,400 --> 00:08:08,419
system to imagine

149
00:08:08,419 --> 00:08:12,410
many you've encountered I there's
machine check constraints for it that

150
00:08:12,410 --> 00:08:13,099
the tests

151
00:08:13,099 --> 00:08:16,020
in that documentation and the
documentation itself is also very

152
00:08:16,020 --> 00:08:19,430
important as are some things you just
can't fit in a type system

153
00:08:19,430 --> 00:08:23,979
so digging deeper into type systems
here's the same function

154
00:08:23,979 --> 00:08:26,979
in two different languages right we have
pie pan on top

155
00:08:26,979 --> 00:08:30,780
and we have passed on the bottom in pipe
on the function exists

156
00:08:30,780 --> 00:08:33,919
but there's no type rich information
about it we can't

157
00:08:33,919 --> 00:08:38,320
query up for what its types are it
doesn't it doesn't communicate with its

158
00:08:38,320 --> 00:08:39,339
types are

159
00:08:39,339 --> 00:08:43,190
the Haskell version house a type
annotation along with it

160
00:08:43,190 --> 00:08:46,600
and scripts and machine assistance can
come along and

161
00:08:46,600 --> 00:08:50,149
and can say to programmers using a
conseguir hey you've made a mistake here

162
00:08:50,149 --> 00:08:51,820
you've made a TypeError here

163
00:08:51,820 --> 00:08:55,040
also new users about function can come
along

164
00:08:55,040 --> 00:08:58,959
and they can look at it and without
reading a prose a a word of prose

165
00:08:58,959 --> 00:09:00,240
documentation

166
00:09:00,240 --> 00:09:05,100
they can see okay this is a system in
which inputs and outputs are related

167
00:09:05,100 --> 00:09:09,290
a certain way and in particular they can
see that

168
00:09:09,290 --> 00:09:12,580
the input type up the first argument to
the function

169
00:09:12,580 --> 00:09:16,910
must match the component type up the
second argument to the function

170
00:09:16,910 --> 00:09:19,950
and so its behavioral in part kind of
looks like this

171
00:09:19,950 --> 00:09:23,190
infinitely far along the dimensions are

172
00:09:23,190 --> 00:09:27,910
the first and second arguments to the
function but only valid along the line

173
00:09:27,910 --> 00:09:31,519
at which the component typeof the second
argument matches that

174
00:09:31,519 --> 00:09:36,070
the input type up the first argument now
tests generally look something like

175
00:09:36,070 --> 00:09:36,720
this:

176
00:09:36,720 --> 00:09:39,470
and the tests are valuable because
they're sort of these fans come straight

177
00:09:39,470 --> 00:09:39,779
the

178
00:09:39,779 --> 00:09:43,220
the the type system trees others nice
broad continuous

179
00:09:43,220 --> 00:09:47,050
boundary for you the tests are sort of
suggestive a boundary

180
00:09:47,050 --> 00:09:50,200
will come back to it later but these
tests you know they're useful

181
00:09:50,200 --> 00:09:52,990
but they're not a salir you might wanna
sure somebody else so you might also

182
00:09:52,990 --> 00:09:54,730
write tests that look more like this

183
00:09:54,730 --> 00:09:58,740
right so when we're saying you should
use task to define your envelope

184
00:09:58,740 --> 00:10:02,390
this is a very easy task for you to tell
a client about

185
00:10:02,390 --> 00:10:06,640
for you to use as part of your
specification and then documentation

186
00:10:06,640 --> 00:10:09,940
let's use or to fill in the gaps where
you don't have other tools rate very few

187
00:10:09,940 --> 00:10:11,390
tech type systems

188
00:10:11,390 --> 00:10:14,560
let you annotate whether or not
something is thread-safe ugh I'm

189
00:10:14,560 --> 00:10:17,850
probably doing haskell because their
type system Middle Eastern complete

190
00:10:17,850 --> 00:10:20,850
but you can't do that use fully enjoy
our price:

191
00:10:20,850 --> 00:10:24,630
so these systems are not don't just
stand in isolation very complimentary

192
00:10:24,630 --> 00:10:28,089
and that reminds us of our child's right
so

193
00:10:28,089 --> 00:10:32,019
this reminds us a defining space another
way which is

194
00:10:32,019 --> 00:10:35,660
when we were kids like we go over to the
aunts house you know you'd wanna go out

195
00:10:35,660 --> 00:10:37,920
in the giant backyard to play

196
00:10:37,920 --> 00:10:42,220
and the grown-ups would want to keep an
eye on us and they tell us things like

197
00:10:42,220 --> 00:10:45,570
okay you know I want to be able to see
you when you play is so

198
00:10:45,570 --> 00:10:50,579
don't cross that line into the woods and
stay between the two trees on either

199
00:10:50,579 --> 00:10:51,880
side

200
00:10:51,880 --> 00:10:55,000
and this is carries because its defining

201
00:10:55,000 --> 00:10:59,089
a space using a combination of
continuous lines

202
00:10:59,089 --> 00:11:02,310
and distinct points along some other
dimension

203
00:11:02,310 --> 00:11:07,470
this is kinda the way that type systems
and test specifications play together

204
00:11:07,470 --> 00:11:11,870
the type systems draw continuous
contours through some space

205
00:11:11,870 --> 00:11:17,500
and separate out all values of one type
from all values have another type

206
00:11:17,500 --> 00:11:22,720
whereas test conditions specify specific
points with specific values have

207
00:11:22,720 --> 00:11:23,470
individual

208
00:11:23,470 --> 00:11:27,510
point %uh individual types but you can
still use them in combination

209
00:11:27,510 --> 00:11:32,040
to define some region up some space so
coming back to softer here's a different

210
00:11:32,040 --> 00:11:33,410
HTP sir and so taking

211
00:11:33,410 --> 00:11:37,170
a request object that's already done a
whole bunch of work this takes a string

212
00:11:37,170 --> 00:11:37,690
in

213
00:11:37,690 --> 00:11:40,990
intake and emits a string out and so

214
00:11:40,990 --> 00:11:44,350
from the type systems perspective that
the input looks kinda like this

215
00:11:44,350 --> 00:11:47,600
in the space of all possible objects
there's this ellipse

216
00:11:47,600 --> 00:11:50,899
with that will assert represents all
strings that can come in

217
00:11:50,899 --> 00:11:53,910
now we can start writing tests that no

218
00:11:53,910 --> 00:11:57,880
Britain that we've reject things they
were invalid and then add in more fence

219
00:11:57,880 --> 00:12:00,740
posts that are basically things that are
valid and you can sort of see this

220
00:12:00,740 --> 00:12:02,079
boundary within

221
00:12:02,079 --> 00:12:05,670
the domain of strings that some strings
are valid and some art but it's not

222
00:12:05,670 --> 00:12:07,260
described in this nice

223
00:12:07,260 --> 00:12:10,260
concrete way where there's a hard and
fast line

224
00:12:10,260 --> 00:12:14,190
so when you've received guidance that
says you should author your test

225
00:12:14,190 --> 00:12:18,040
conditions near the boundaries of what
your software supports

226
00:12:18,040 --> 00:12:21,269
the reason for that is that your tasks
are in part

227
00:12:21,269 --> 00:12:25,570
defining the boundaries up what your
software system supports

228
00:12:25,570 --> 00:12:28,990
and then documentation and types work
together very well

229
00:12:28,990 --> 00:12:32,420
to the so this is a screenshot of some
javadoc just because it presents better

230
00:12:32,420 --> 00:12:32,880
than

231
00:12:32,880 --> 00:12:36,639
and some the other documentation systems
but you notice is a buncha types in the

232
00:12:36,639 --> 00:12:37,490
slide

233
00:12:37,490 --> 00:12:40,670
that the programmer didn't put their
entire front I heard

234
00:12:40,670 --> 00:12:43,790
generated documentation you'll still see
like the names of the funk the

235
00:12:43,790 --> 00:12:47,310
function arguments as as their specified
in the code these things play together

236
00:12:47,310 --> 00:12:48,589
very well

237
00:12:48,589 --> 00:12:54,100
to how many have you have ever read
software that contains less

238
00:12:54,100 --> 00:12:57,880
written software that contains less
alright

239
00:12:57,880 --> 00:13:01,130
this is a legal disclaimer Betfair's

240
00:13:01,130 --> 00:13:05,820
legally there is no reason for you to
believe that this software is any good

241
00:13:05,820 --> 00:13:07,720
for anything

242
00:13:07,720 --> 00:13:11,079
but when we write software hand and
specifically when we want to persuade

243
00:13:11,079 --> 00:13:14,100
clients or customers to use for softer

244
00:13:14,100 --> 00:13:17,860
we'd like them to believe that our
software accomplishes some goal

245
00:13:17,860 --> 00:13:21,779
we'd like them to to see that our
software works

246
00:13:21,779 --> 00:13:25,950
and the way that we can do that the best
way to do that is with a demonstration

247
00:13:25,950 --> 00:13:27,250
of it with a real live

248
00:13:27,250 --> 00:13:31,010
exercise of code that comes from Taz

249
00:13:31,010 --> 00:13:34,370
tass are real live exercises code

250
00:13:34,370 --> 00:13:37,880
so this is another argument saying you
should ship your tests

251
00:13:37,880 --> 00:13:41,880
as part of the definition up your
software and you should not just have

252
00:13:41,880 --> 00:13:42,699
tests that are

253
00:13:42,699 --> 00:13:46,110
you know unit St their budget codes can
implement read

254
00:13:46,110 --> 00:13:49,430
if it makes sense if it's part of what
your clients should really be reading is

255
00:13:49,430 --> 00:13:50,579
pretty documentation

256
00:13:50,579 --> 00:13:54,620
you should have in your documentation
machine checked examples that people can

257
00:13:54,620 --> 00:13:55,550
read from

258
00:13:55,550 --> 00:13:59,350
and understand how your system operates
in a in a more fluid way that they can

259
00:13:59,350 --> 00:14:00,690
trust because of course

260
00:14:00,690 --> 00:14:04,269
that itself is machine checked and
verified to start work

261
00:14:04,269 --> 00:14:08,029
so where we are is your system has an
input envelope

262
00:14:08,029 --> 00:14:11,790
and an output envelope that comprises
its behavioral envelope

263
00:14:11,790 --> 00:14:15,310
and we're saying you should use that
types tass

264
00:14:15,310 --> 00:14:18,449
and documentation to specify that now

265
00:14:18,449 --> 00:14:22,250
are some envelopes better than others
yes in particular

266
00:14:22,250 --> 00:14:26,269
we feel the smallest envelope you can
use fully provide to your users

267
00:14:26,269 --> 00:14:30,180
it or you know library users end-users
is the best one great that the fewest

268
00:14:30,180 --> 00:14:32,430
promises you can make today

269
00:14:32,430 --> 00:14:36,570
but still have a useful package is is
what you should be aiming for

270
00:14:36,570 --> 00:14:41,190
and fewer promises makes everyone
happier because

271
00:14:41,190 --> 00:14:44,579
I am fewer promises

272
00:14:44,579 --> 00:14:48,600
make everyone happier because fruit
fewer promises reserves

273
00:14:48,600 --> 00:14:53,769
future growth on if your system is going
to be long-lived and if your system is

274
00:14:53,769 --> 00:14:56,399
not going to break backwards
compatibility

275
00:14:56,399 --> 00:15:01,519
then your envelope must never recede and
so if your envelope start small

276
00:15:01,519 --> 00:15:05,339
you're reserving space to grow if your
envelope starts a large

277
00:15:05,339 --> 00:15:09,519
you're gonna have a lot of promises to
keep as time goes by

278
00:15:09,519 --> 00:15:12,670
so we've got some examples love
envelopes that have sort of been

279
00:15:12,670 --> 00:15:15,899
ill-defined great that there's at least
is an envelope to find but we're not

280
00:15:15,899 --> 00:15:16,930
happy with it

281
00:15:16,930 --> 00:15:20,870
and so the first 1 I'm going to pick on
his HD peel them I

282
00:15:20,870 --> 00:15:24,389
issues actually a pretty decent HTP
library if you're doing the normal

283
00:15:24,389 --> 00:15:27,730
HTTPS things you're not going to have
any problems

284
00:15:27,730 --> 00:15:30,970
other than the API being a little bit
wacky but Mike

285
00:15:30,970 --> 00:15:34,800
my beef with HTTP Live is right in the
doc string for the model has this

286
00:15:34,800 --> 00:15:38,079
enormous state machine actually bleeds
of the end of the slide in its not

287
00:15:38,079 --> 00:15:40,480
important that you can see the whole
state machine it's important that it's

288
00:15:40,480 --> 00:15:41,310
there

289
00:15:41,310 --> 00:15:45,399
and that after that state machine in the
documentation has this wonderful sense

290
00:15:45,399 --> 00:15:49,160
which states that I'm not going to
enforce the state machine even though

291
00:15:49,160 --> 00:15:51,350
it's what I assert that I'm going to go
through

292
00:15:51,350 --> 00:15:54,940
so that if you're a sophisticated clan
you can abuse my internal implementation

293
00:15:54,940 --> 00:15:58,740
details to do something clever like
implement request pipelining

294
00:15:58,740 --> 00:16:02,130
now that sounds awesome but it's
actually terrible because it means you

295
00:16:02,130 --> 00:16:04,040
can't go in and fix defects

296
00:16:04,040 --> 00:16:08,040
in the implementation HTTP Live because
you've documented all this internal

297
00:16:08,040 --> 00:16:11,220
behavior as part of the things that your
clients can depend on

298
00:16:11,220 --> 00:16:14,680
and in fact there are things that I
would try and fix in HD feel that just

299
00:16:14,680 --> 00:16:16,620
park feasible because I've the document

300
00:16:16,620 --> 00:16:20,050
documented internal behavior now we've
talked about

301
00:16:20,050 --> 00:16:23,220
envelopes for systems that are directly
call a ball

302
00:16:23,220 --> 00:16:27,810
such as functions it turns out that
classes have envelopes as well

303
00:16:27,810 --> 00:16:31,149
and in particular the input and below
per class is

304
00:16:31,149 --> 00:16:36,070
the Sat Nav functionality that is
available to call on that class

305
00:16:36,070 --> 00:16:39,139
Java's object a class as an example

306
00:16:39,139 --> 00:16:43,399
love I a place where the input and elope
was gotten wrong

307
00:16:43,399 --> 00:16:46,480
they were deciding what is the Sat above
methods

308
00:16:46,480 --> 00:16:49,699
that should be callable on all Java
objects

309
00:16:49,699 --> 00:16:54,600
and they mistakenly made it too wide and
they included these two methods

310
00:16:54,600 --> 00:16:59,459
in that's at and it turns out that these
were specified in such a way

311
00:16:59,459 --> 00:17:03,769
that they couldn't always fulfill their
goals and they wound up being useless

312
00:17:03,769 --> 00:17:05,500
and meaning less than their

313
00:17:05,500 --> 00:17:09,059
worked on the language and no one really
uses them at all anymore

314
00:17:09,059 --> 00:17:12,770
for for concrete example finalizes like
Dunderdale in Python

315
00:17:12,770 --> 00:17:15,549
break it's the thing that gets run when
your object has been cleaned up by the

316
00:17:15,549 --> 00:17:16,370
garbage collector

317
00:17:16,370 --> 00:17:19,740
the promise that the semantics for the
garbage collector such that you have no

318
00:17:19,740 --> 00:17:22,490
guarantee your object will ever actually
be cleaned up

319
00:17:22,490 --> 00:17:25,890
and as such there's no guarantee that
your final EIS will ever run

320
00:17:25,890 --> 00:17:29,250
and so if you have some expensive
resource you thought you wanted to clean

321
00:17:29,250 --> 00:17:29,700
up

322
00:17:29,700 --> 00:17:32,750
you can't depend on this to actually do
it so

323
00:17:32,750 --> 00:17:36,250
we have some positive examples things
that actually make us happy as well

324
00:17:36,250 --> 00:17:40,919
we're not just cranky today I I really
admire what was done with the original

325
00:17:40,919 --> 00:17:42,470
HTTP protocol

326
00:17:42,470 --> 00:17:47,500
I'm had started off with these 15
response codes that you see here

327
00:17:47,500 --> 00:17:52,169
and F-fifteen response codes is in the
numerator at finite set

328
00:17:52,169 --> 00:17:55,539
and most at the time that we have an
enumerated fine i sat we say

329
00:17:55,539 --> 00:17:59,690
okay I'm gonna number them zero through
14 and I'm done

330
00:17:59,690 --> 00:18:02,970
but what was done with the original
protocol here was

331
00:18:02,970 --> 00:18:07,039
they broke it up they spread across
arrange a thousand integers

332
00:18:07,039 --> 00:18:11,030
and the use the hundreds digit to
communicate the general class

333
00:18:11,030 --> 00:18:14,860
have the response code so 200 as
everything's good

334
00:18:14,860 --> 00:18:20,780
300 as I'm sending you over there 400 is
you made a mistake and 500 is

335
00:18:20,780 --> 00:18:24,520
I made a mistake this left a lot of room
for future growth

336
00:18:24,520 --> 00:18:28,980
that they reserved and in particular in
the original protocol specification

337
00:18:28,980 --> 00:18:35,650
be reserved what you should do when you
get a response that you don't understand

338
00:18:35,650 --> 00:18:39,210
now the other positive example is the
futures package in Python 3 which has a

339
00:18:39,210 --> 00:18:40,900
backport Tupac fun too

340
00:18:40,900 --> 00:18:44,620
and what the future is you haven't
played fly very it's a way to schedule

341
00:18:44,620 --> 00:18:47,710
some piece of work to be performed in
the future in the passage this

342
00:18:47,710 --> 00:18:51,710
executor class at which whilst run it
when resources are available however

343
00:18:51,710 --> 00:18:52,600
it's configured

344
00:18:52,600 --> 00:18:56,250
and when you actually need the result to
that future you can block on its you can

345
00:18:56,250 --> 00:18:59,320
fire off a bunch requests in parallel or
something and then block on the moment

346
00:18:59,320 --> 00:18:59,730
the app

347
00:18:59,730 --> 00:19:02,770
what's great about this is the
definition of an executor is

348
00:19:02,770 --> 00:19:04,380
sufficiently narrow that eighty

349
00:19:04,380 --> 00:19:07,630
it already ships with two
implementations that basically have the

350
00:19:07,630 --> 00:19:08,610
same guarantees

351
00:19:08,610 --> 00:19:12,880
the process pool executor requires that
your arguments be pick a lable

352
00:19:12,880 --> 00:19:15,049
but other than that the function
identically and it's possible to

353
00:19:15,049 --> 00:19:16,950
envision something that would you say

354
00:19:16,950 --> 00:19:21,039
stack was as micro threads instead of a
heavyweight efforts

355
00:19:21,039 --> 00:19:24,309
no one of the things that happens when
you start talking about envelopes is

356
00:19:24,309 --> 00:19:25,240
that you find that their

357
00:19:25,240 --> 00:19:28,860
necessarily different than the code that
they constrain

358
00:19:28,860 --> 00:19:32,440
so how many have you think that this
statement is thread-safe

359
00:19:32,440 --> 00:19:37,429
how many have you think that this
statement is not thread-safe

360
00:19:37,429 --> 00:19:40,720
how many have you think that this
statement is thread-safe

361
00:19:40,720 --> 00:19:44,640
if mikey is already present in the
dictionary

362
00:19:44,640 --> 00:19:48,960
okay so it happens in the implementation
details

363
00:19:48,960 --> 00:19:52,840
that this is thread safe but the reason
this comes up is because we had a a

364
00:19:52,840 --> 00:19:55,910
discussion internally that led to

365
00:19:55,910 --> 00:19:59,770
a a lot of frustration because some
people are saying oh this is thread-safe

366
00:19:59,770 --> 00:20:03,039
I've read the source code and other
people that red

367
00:20:03,039 --> 00:20:06,740
the language specification and said
there's no guarantee that actually has

368
00:20:06,740 --> 00:20:07,809
to be thread-safe

369
00:20:07,809 --> 00:20:11,770
so we're asserting that source code is
not the best documentation

370
00:20:11,770 --> 00:20:14,640
that the best documentation is the
definition of the emblem the things you

371
00:20:14,640 --> 00:20:16,870
can actually depend on

372
00:20:16,870 --> 00:20:21,020
so when you're first starting the
program I everything's exact

373
00:20:21,020 --> 00:20:25,710
everything's precise and programming
starts to feel like wiring

374
00:20:25,710 --> 00:20:30,049
a circuit together your your assembling
some aggregate behavior

375
00:20:30,049 --> 00:20:34,700
that will be precise and deterministic
out of precise and deterministic some

376
00:20:34,700 --> 00:20:35,530
parts

377
00:20:35,530 --> 00:20:39,140
but when you there engineering with
envelopes it feels a lot more like

378
00:20:39,140 --> 00:20:39,830
plumbing

379
00:20:39,830 --> 00:20:43,679
in an aggregate flow system great things
kinda fit together loosely

380
00:20:43,679 --> 00:20:46,770
they don't always fit precisely the way
you expect them to

381
00:20:46,770 --> 00:20:50,250
that sort of thing so to summarize you
should be providing

382
00:20:50,250 --> 00:20:53,960
the smallest possible but very well
defined and elope and you should try

383
00:20:53,960 --> 00:20:58,159
your very best only rely on the stated
envelope others provide

384
00:20:58,159 --> 00:21:05,159
thank you

385
00:21:09,000 --> 00:21:15,830
questions yes on the road

386
00:21:15,830 --> 00:21:19,530
other thanks that was a was a great talk
to them

387
00:21:19,530 --> 00:21:22,740
a lot more programs I'm as well make one
comment

388
00:21:22,740 --> 00:21:25,810
and monitor us lies about us on

389
00:21:25,810 --> 00:21:29,570
one thing we've done it was the project
that has helped us use tests

390
00:21:29,570 --> 00:21:34,670
as a up one thing that we've done it was
the project that has helped us define

391
00:21:34,670 --> 00:21:38,190
tests as part of an envelope is to

392
00:21:38,190 --> 00:21:41,780
ban test doc strings that begin test
that

393
00:21:41,780 --> 00:21:45,490
or ensure that or I the word correctly

394
00:21:45,490 --> 00:21:48,290
particularly is not allowed in tests
everything is just a declarative

395
00:21:48,290 --> 00:21:50,610
statement about what that system does

396
00:21:50,610 --> 00:21:54,500
in a particular sis job situation York
context or

397
00:21:54,500 --> 00:21:58,250
certain inputs so for example not test
that

398
00:21:58,250 --> 00:22:01,730
a certain page displays correctly but

399
00:22:01,730 --> 00:22:06,160
say are when the group page of the
website

400
00:22:06,160 --> 00:22:11,660
as requested our a 202 area code is our
a $200 status code is returned and the

401
00:22:11,660 --> 00:22:12,680
title is displayed

402
00:22:12,680 --> 00:22:15,870
or something much more specific and
forcing everyone to think about that is

403
00:22:15,870 --> 00:22:17,520
actually made our tests much more

404
00:22:17,520 --> 00:22:21,320
specific and and also separate so

405
00:22:21,320 --> 00:22:24,430
because if you have the one test which
is test that loads correctly every time

406
00:22:24,430 --> 00:22:24,930
you

407
00:22:24,930 --> 00:22:28,370
add you expand that envelope of
correctness

408
00:22:28,370 --> 00:22:31,570
that has just gets bigger and bigger and
more sperm yes

409
00:22:31,570 --> 00:22:36,750
yes I agree and I like the fact that we
don't talk about correctness when we

410
00:22:36,750 --> 00:22:38,290
talk about defining handle apps

411
00:22:38,290 --> 00:22:43,210
it's up to you to define what's correct
or what supported for your system

412
00:22:43,210 --> 00:22:47,610
and to communicate back through types
through Taz and through documentation

413
00:22:47,610 --> 00:22:50,840
and not to worry about necessarily like
some

414
00:22:50,840 --> 00:22:53,850
abstract our objective or universal

415
00:22:53,850 --> 00:22:58,400
notion of correctness there's just the
correctness up whether a system behaves

416
00:22:58,400 --> 00:22:59,800
as you wish it to behave

417
00:22:59,800 --> 00:23:03,420
or if it doesn't behave as you wish it
to behave I

418
00:23:03,420 --> 00:23:07,940
let's go to the side so first well
thanks s

419
00:23:07,940 --> 00:23:12,320
really great %uh I'm wondering if you've
looked into

420
00:23:12,320 --> 00:23:17,890
whether there exists a anything or if
it's feasible for such a thing to exist

421
00:23:17,890 --> 00:23:18,850
that actually would

422
00:23:18,850 --> 00:23:22,080
define this and Lopez a thing rather
than 80

423
00:23:22,080 --> 00:23:25,240
loosely associate collection dioxin
tests and types

424
00:23:25,240 --> 00:23:28,990
sir some other language out there that
does that

425
00:23:28,990 --> 00:23:32,250
could I don't do that I

426
00:23:32,250 --> 00:23:35,460
I think it would be a very challenging
given how loose the type system in

427
00:23:35,460 --> 00:23:36,660
Python tends to be

428
00:23:36,660 --> 00:23:41,450
a back I imagine there's a research
language out there that somebody is

429
00:23:41,450 --> 00:23:45,670
is either working on our has has done
that that tries this but I i'm not from

430
00:23:45,670 --> 00:23:49,650
a refund I'm not remotely familiar with
anything and the challenge

431
00:23:49,650 --> 00:23:53,070
feels large given that we're talking
about the summer

432
00:23:53,070 --> 00:23:58,640
I love what type systems can do what
dynamic constraints as exercise by

433
00:23:58,640 --> 00:23:59,550
Toscan du

434
00:23:59,550 --> 00:24:02,690
and what's done in documentation because

435
00:24:02,690 --> 00:24:06,850
its doesn't fit into the other two
systems so so I just it feels like a

436
00:24:06,850 --> 00:24:08,130
huge problem

437
00:24:08,130 --> 00:24:13,970
arm 5 wondering what for tools do you
currently use to try and do that in your

438
00:24:13,970 --> 00:24:14,760
job right now

439
00:24:14,760 --> 00:24:19,650
so a my sisters little peculiar cuz I
work I'm version control software

440
00:24:19,650 --> 00:24:23,250
so I am most have my stuff that the

441
00:24:23,250 --> 00:24:27,260
you actually are aware exists is inside
mercurial and materials

442
00:24:27,260 --> 00:24:30,860
test suite actually is for this the I
guess you call it literate programming

443
00:24:30,860 --> 00:24:32,330
right it looks like

444
00:24:32,330 --> 00:24:35,540
a interactive shell transcript and then
its

445
00:24:35,540 --> 00:24:39,470
split up by the test runner and executed
I that's certainly worth looking at

446
00:24:39,470 --> 00:24:42,830
for higher level functions I try to use
doctor asked

447
00:24:42,830 --> 00:24:46,390
I'm I haven't written anything
complicated enough I've top a need to

448
00:24:46,390 --> 00:24:48,290
reach for spanks but I've heard that
it's pretty good

449
00:24:48,290 --> 00:24:51,640
I in Python I use

450
00:24:51,640 --> 00:24:56,170
pile end for static analysis which is
the closest to a type system with which

451
00:24:56,170 --> 00:24:56,730
I use

452
00:24:56,730 --> 00:25:01,590
I unit AST and a few other testing
frameworks not as much

453
00:25:01,590 --> 00:25:05,150
for testing and I also have lent

454
00:25:05,150 --> 00:25:08,350
check my documentation to make sure that

455
00:25:08,350 --> 00:25:12,530
argument descriptions are present return
value descriptions are present because

456
00:25:12,530 --> 00:25:16,440
in a lot of code that I've seen
especially old co that I've taken over

457
00:25:16,440 --> 00:25:20,260
I and had to maintain going forward the

458
00:25:20,260 --> 00:25:24,820
I the inconsistencies in the behavioral
envelope are the problems in the

459
00:25:24,820 --> 00:25:25,970
behavioral envelope

460
00:25:25,970 --> 00:25:29,510
sneak by when the doc strings

461
00:25:29,510 --> 00:25:33,290
up the code are absent or missing pieces

462
00:25:33,290 --> 00:25:37,050
and so I find that here because I'm my
own best friend I'm I'm

463
00:25:37,050 --> 00:25:42,060
eager to forgive myself most and and I'm
a poor credit card myself

464
00:25:42,060 --> 00:25:46,280
if I can outsource their criticism to an
automated system which will then tell

465
00:25:46,280 --> 00:25:46,900
you

466
00:25:46,900 --> 00:25:51,100
hey you're under specified in this way
it helps me prevent mice

467
00:25:51,100 --> 00:25:54,750
it it helps prevent me from poor fooling
myself

468
00:25:54,750 --> 00:25:58,950
I'm which is a perennial problem of mine

469
00:25:58,950 --> 00:26:03,760
I'm back on the left so you mentioned it
taking over project inheriting projects

470
00:26:03,760 --> 00:26:04,160
that are

471
00:26:04,160 --> 00:26:07,560
well-defined they don't have a good on
blood do you have a

472
00:26:07,560 --> 00:26:12,130
any other recommendations on taking
where a situation where the source

473
00:26:12,130 --> 00:26:14,200
essentially is the envelope then

474
00:26:14,200 --> 00:26:18,500
getting to a place where to better
define in doc strings and wanna

475
00:26:18,500 --> 00:26:21,850
yeah it's a slow incremental process
that's very painful

476
00:26:21,850 --> 00:26:25,290
come in my experience I don't know if
you have anything better than that say

477
00:26:25,290 --> 00:26:30,090
I I know over huge system a Google that
was taken over that was under specified

478
00:26:30,090 --> 00:26:33,210
and the first thing the lead engineer
dead on it was

479
00:26:33,210 --> 00:26:37,960
define a test suite for a and they went
forward and over the course of several

480
00:26:37,960 --> 00:26:40,330
months as this test suite expanded

481
00:26:40,330 --> 00:26:44,100
they would make changes to the code and
that would break someone and that

482
00:26:44,100 --> 00:26:46,330
someone would complain and they would
say okay

483
00:26:46,330 --> 00:26:50,270
we're glad you're here we're glad your
vocal where sorry your crying out for

484
00:26:50,270 --> 00:26:53,350
our blood but we're gonna take your use
case and build it in the

485
00:26:53,350 --> 00:26:56,400
to sweet so that this doesn't happen
again

486
00:26:56,400 --> 00:27:00,250
I'm your when you think about using
assert statements

487
00:27:00,250 --> 00:27:05,430
to make envelopes more explicit I use a
certain statements for that all the time

488
00:27:05,430 --> 00:27:09,950
as some people don't like them as well
heard I guided her on whether

489
00:27:09,950 --> 00:27:13,490
assert is the right tool or raising an
explicit exceptions to retool

490
00:27:13,490 --> 00:27:17,160
a but I i yeah I agree there

491
00:27:17,160 --> 00:27:23,220
they're fine modulo my overall
philosophy on a certain statements

492
00:27:23,220 --> 00:27:27,930
which is they scare me because they can
be turned off and yeah

493
00:27:27,930 --> 00:27:30,950
contacts Yap

494
00:27:30,950 --> 00:27:34,040
thanks I I

495
00:27:34,040 --> 00:27:37,110
unfortunately I still have to write a
lot of c plus plus code

496
00:27:37,110 --> 00:27:40,460
and that we comment using ducks GM okay
and what are the things that

497
00:27:40,460 --> 00:27:44,520
I really like about docs jim is that you
they're actually some directives for

498
00:27:44,520 --> 00:27:47,770
documenting preconditions and post
conditions which seems to me like if

499
00:27:47,770 --> 00:27:49,100
it's really close he would

500
00:27:49,100 --> 00:27:52,460
what you're trying to to to express a
dime

501
00:27:52,460 --> 00:27:56,280
as far as I know Python documentation
tools don't

502
00:27:56,280 --> 00:28:00,120
provide anything for that I use things
all the time and I i havent seen that

503
00:28:00,120 --> 00:28:01,250
there

504
00:28:01,250 --> 00:28:05,000
any comments on that at I I don't happen
to know and I

505
00:28:05,000 --> 00:28:08,890
at the the documentation tools I come
across in Python I I've never seen as a

506
00:28:08,890 --> 00:28:09,460
feature

507
00:28:09,460 --> 00:28:12,710
com I didn't know about the featured
oxygen it sounds great day that wouldn't

508
00:28:12,710 --> 00:28:13,870
mind having

509
00:28:13,870 --> 00:28:17,610
a and something like that by phone so so
thinking about it for a moment

510
00:28:17,610 --> 00:28:22,440
I'll say that perhaps something about
the lack of a formal system for that has

511
00:28:22,440 --> 00:28:23,300
done

512
00:28:23,300 --> 00:28:27,920
to the style in which I coded is that it
has pressured me and I've moved to this

513
00:28:27,920 --> 00:28:28,900
new practice

514
00:28:28,900 --> 00:28:32,280
I love ensuring at bat I

515
00:28:32,280 --> 00:28:37,130
the type system is the type system
itself sat at

516
00:28:37,130 --> 00:28:40,850
insures the satisfaction of my
preconditions so for example

517
00:28:40,850 --> 00:28:45,660
instead of taking an argument of type
string as we saw on one of those HTTP

518
00:28:45,660 --> 00:28:46,660
root server

519
00:28:46,660 --> 00:28:51,490
a examples I where the strain could
parse as in a shitty be request or it

520
00:28:51,490 --> 00:28:52,380
might not

521
00:28:52,380 --> 00:28:55,520
I favor more creation up objects I

522
00:28:55,520 --> 00:28:58,520
such as the one that the HTTP server
that token

523
00:28:58,520 --> 00:29:02,680
HTTP request object so that by the time

524
00:29:02,680 --> 00:29:07,020
the server is invoked you already know
that the precondition for its invocation

525
00:29:07,020 --> 00:29:08,230
has been mad

526
00:29:08,230 --> 00:29:13,300
by the typeof the object passed to it
and that plays nicely with a whole lot

527
00:29:13,300 --> 00:29:15,670
of other things such as loose coupling
and

528
00:29:15,670 --> 00:29:19,450
and minimal specification and so forth
so I would say

529
00:29:19,450 --> 00:29:23,740
look and see if if you can go in that
direction

530
00:29:23,740 --> 00:29:27,800
one more adjuster actually follow for
the last question we actually do have a

531
00:29:27,800 --> 00:29:29,760
facility in context live

532
00:29:29,760 --> 00:29:32,830
and the with statement built into Python
now that

533
00:29:32,830 --> 00:29:36,250
effectively can enforce in a pre and
post conditions as

534
00:29:36,250 --> 00:29:39,810
in variance and I can't say that
honestly that I've

535
00:29:39,810 --> 00:29:42,960
used a lot for that purpose her it

536
00:29:42,960 --> 00:29:46,610
it is actually rather elegant way to
express am

537
00:29:46,610 --> 00:29:50,630
you know in variance that you expect up
you know around a

538
00:29:50,630 --> 00:29:54,380
a function call around another block
code okay and you're saying that's in

539
00:29:54,380 --> 00:29:56,850
the standard library contact with
Marshall

540
00:29:56,850 --> 00:30:00,600
yeah just the with statement and I'll
are but you know it easy

541
00:30:00,600 --> 00:30:04,470
to build context with the context lime
to

542
00:30:04,470 --> 00:30:09,240
I'm on the right side again the I just
wanted to mention %uh numbed by

543
00:30:09,240 --> 00:30:13,050
ahead about 45 years ago a huge
improvement

544
00:30:13,050 --> 00:30:16,110
documentation but they did was a

545
00:30:16,110 --> 00:30:19,210
to introduce a number I documentation
standoff

546
00:30:19,210 --> 00:30:23,640
that explicitly a word quiet that you
have to specify the inputs but I

547
00:30:23,640 --> 00:30:29,740
Dr and what but the weed on solid
including ordered types

548
00:30:29,740 --> 00:30:32,760
and a turn on by doc

549
00:30:32,760 --> 00:30:38,000
package is automatically convert them to
know this information to swing stock

550
00:30:38,000 --> 00:30:42,490
commendation so this was a huge
improvement in getting standardize

551
00:30:42,490 --> 00:30:46,020
documentation most after sandy feature

552
00:30:46,020 --> 00:30:49,570
by 10 site-based acts okay I'm

553
00:30:49,570 --> 00:30:52,760
and for but the second one okay

554
00:30:52,760 --> 00:30:54,280
thank you thank you and thank you all
for coming

