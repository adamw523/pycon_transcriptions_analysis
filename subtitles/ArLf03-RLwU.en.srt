1
00:00:00,179 --> 00:00:03,770
II everybody thank you for your patience
I'd like to introduce Greg Ward is going

2
00:00:03,770 --> 00:00:04,410
to talk about

3
00:00:04,410 --> 00:00:11,259
how unit testing Mexico better thanks
everyone

4
00:00:11,259 --> 00:00:14,480
from so unit testing

5
00:00:14,480 --> 00:00:19,430
his more listings that um everybody
believes and everybody everybody says

6
00:00:19,430 --> 00:00:20,520
it's a good thing but

7
00:00:20,520 --> 00:00:24,289
how many people really do it i i'd like
a quick shower and how many people

8
00:00:24,289 --> 00:00:27,619
rigorously write unit tests for every

9
00:00:27,619 --> 00:00:30,720
peace up code the right every

10
00:00:30,720 --> 00:00:35,130
day of their lives production code work
code personal projects

11
00:00:35,130 --> 00:00:39,140
yeah me neither how many you do at most
the time for most code

12
00:00:39,140 --> 00:00:42,710
especially when you're being paid money
yeah that's about where I am

13
00:00:42,710 --> 00:00:46,760
um excellent you're my heroes um

14
00:00:46,760 --> 00:00:51,620
so you know it's kinda like public
transportation that's the joke

15
00:00:51,620 --> 00:00:54,620
everybody everybody things are ever
other people should do it

16
00:00:54,620 --> 00:00:59,430
so I've got a couple assumptions about
you for this talk

17
00:00:59,430 --> 00:01:03,160
um I'm assuming that you either just sat
through

18
00:01:03,160 --> 00:01:06,560
net Batchelder Zacks 1 talk and your

19
00:01:06,560 --> 00:01:09,930
ready raring to go you've started to
drink the koolaid

20
00:01:09,930 --> 00:01:13,130
or you're already actively drinking the
koolaid you're already

21
00:01:13,130 --> 00:01:17,439
into the unit test mindset um in other
words I'm not your did

22
00:01:17,439 --> 00:01:20,810
teach you unit testing magistead back
from

23
00:01:20,810 --> 00:01:24,840
so the corollary of assumption number
one is

24
00:01:24,840 --> 00:01:28,130
you already get that unit testing helps
make your code

25
00:01:28,130 --> 00:01:31,299
more correct I'm not going to try to
convince you that

26
00:01:31,299 --> 00:01:35,970
it is obvious is trying to convince you
that water is where are the sky is big

27
00:01:35,970 --> 00:01:41,060
when I say that unit testing makes your
code better I'm talking on the

28
00:01:41,060 --> 00:01:44,240
a higher plane i'm talking about.
L'Agence

29
00:01:44,240 --> 00:01:48,790
aesthetics beauty back kinda stuff so if
you're honest people

30
00:01:48,790 --> 00:01:53,520
who says al against Sri elegance I just
wanna get something working on a ship it

31
00:01:53,520 --> 00:01:58,869
I want customers or users running my
code now or as soon as possible

32
00:01:58,869 --> 00:02:02,490
that's great I'm a big fan of shipping
code

33
00:02:02,490 --> 00:02:06,320
arm despite what some might pass
managers might tell you um

34
00:02:06,320 --> 00:02:10,440
but let me try to convince you that
beautiful code is better code it takes a

35
00:02:10,440 --> 00:02:11,720
little more time up front

36
00:02:11,720 --> 00:02:15,370
but in the long run it pays off its
easier to understand its easier to

37
00:02:15,370 --> 00:02:17,280
extend it easier to reuse

38
00:02:17,280 --> 00:02:20,930
unit testing makes your code more
beautiful it makes it

39
00:02:20,930 --> 00:02:24,190
better so the plan

40
00:02:24,190 --> 00:02:29,040
for this talk is to work your real-life
case study this is not some

41
00:02:29,040 --> 00:02:33,160
imaginary made up example this is this
is a real live code from my real life

42
00:02:33,160 --> 00:02:33,879
job

43
00:02:33,879 --> 00:02:38,090
that did not have any unit tests when I
started barry months ago

44
00:02:38,090 --> 00:02:43,110
I'm good briefly sketch the process a
batting tests to this code but

45
00:02:43,110 --> 00:02:46,849
that's not really the focus a bit awk
back that was next job

46
00:02:46,849 --> 00:02:49,989
and he did a great job thank you net arm

47
00:02:49,989 --> 00:02:55,959
I'm standing on a trident demonstrate
how in perfect design leads to Harry

48
00:02:55,959 --> 00:02:57,580
tasks and Harry design

49
00:02:57,580 --> 00:03:01,680
her hairy tasks are smelled it tells you
the design is in perfect

50
00:03:01,680 --> 00:03:06,560
and when you modify the designed so that
your tasks become simpler you have

51
00:03:06,560 --> 00:03:08,760
better code you wind up in this virtuous

52
00:03:08,760 --> 00:03:14,459
cycle where simpler tasks means better
Croydon better code means simpler tests

53
00:03:14,459 --> 00:03:18,239
so the background I have to spend a few
minutes explaining

54
00:03:18,239 --> 00:03:23,400
like I said this is real life code where
did that come from why does it exist

55
00:03:23,400 --> 00:03:27,159
are it's got certain requirements that
mandate

56
00:03:27,159 --> 00:03:31,620
a few slight peculiarities about the
code most importantly what requirement

57
00:03:31,620 --> 00:03:32,659
doesn't me because

58
00:03:32,659 --> 00:03:36,280
while the code we're going to look at is
not perfect its

59
00:03:36,280 --> 00:03:40,409
pretty darn good code I'm if you see the
totality of it I'm

60
00:03:40,409 --> 00:03:44,549
unfortunately going to focus on the
kinda smell your bets but the whole

61
00:03:44,549 --> 00:03:47,750
module that i'm talking about. was
really quite beautiful

62
00:03:47,750 --> 00:03:53,390
and it met its requirements all I was
there to do was add some unit tests

63
00:03:53,390 --> 00:03:56,790
because I couldn't resist so from

64
00:03:56,790 --> 00:04:00,480
we meaning my employer and look at her
hyperlink their

65
00:04:00,480 --> 00:04:04,349
are in the business of measuring the
Internet and we do that a couple ways

66
00:04:04,349 --> 00:04:08,950
on one way is we've we paying every IP
address in the world every couple months

67
00:04:08,950 --> 00:04:13,530
more relevant we trace route all over
the world from all over the world all

68
00:04:13,530 --> 00:04:14,090
day long

69
00:04:14,090 --> 00:04:17,169
we collect about 200 million trees
through today

70
00:04:17,169 --> 00:04:17,900
and

71
00:04:17,900 --> 00:04:21,410
and 200 million traceroute works out to
about 3

72
00:04:21,410 --> 00:04:25,150
billion hops every single day so trying
to extract

73
00:04:25,150 --> 00:04:29,120
some sort of intelligent meaning from
this tore into data

74
00:04:29,120 --> 00:04:32,400
and when you're dealing with that much
data

75
00:04:32,400 --> 00:04:36,940
obviously clearly you need a super duper
highly advanced next generation

76
00:04:36,940 --> 00:04:38,289
whiz-bang

77
00:04:38,289 --> 00:04:42,100
data storage in representation
technology which is why we mostly use

78
00:04:42,100 --> 00:04:46,210
tab separated text files arm yeah I mean
yeah we used

79
00:04:46,210 --> 00:04:49,840
Postgres minutes the right to amuse read
this when it's the right tool but

80
00:04:49,840 --> 00:04:53,150
we have vast stores have data in

81
00:04:53,150 --> 00:04:56,310
tab separated taxed arm

82
00:04:56,310 --> 00:04:59,580
there are some obvious I hope our
problem the problem maybe not so obvious

83
00:04:59,580 --> 00:05:01,080
rules for staying sane

84
00:05:01,080 --> 00:05:05,120
with plain text plain text is a very
simple data format

85
00:05:05,120 --> 00:05:10,080
keep it simple stupid on you you really
want to restrict the data tightly if

86
00:05:10,080 --> 00:05:11,770
you're using tabs you to limiter

87
00:05:11,770 --> 00:05:15,910
don't have any tabs in your day to make
sure you filter them out first

88
00:05:15,910 --> 00:05:19,320
if you're using common for your
delimiter don't have any comments on

89
00:05:19,320 --> 00:05:19,860
your data

90
00:05:19,860 --> 00:05:25,340
et cetera um and you want to come stay
consistent on a metal level your

91
00:05:25,340 --> 00:05:29,440
here requirements again of all over the
year to date is going to evolve over the

92
00:05:29,440 --> 00:05:29,849
years

93
00:05:29,849 --> 00:05:34,419
but if you have a road a consistent
philosophy a consistent approach a

94
00:05:34,419 --> 00:05:35,949
consistent metaphor Matt

95
00:05:35,949 --> 00:05:39,560
it will make your life easier and and
that scanner

96
00:05:39,560 --> 00:05:43,860
what were moving to recently over the
last couple years I think

97
00:05:43,860 --> 00:05:47,340
so here's an example taken from are
real-life data

98
00:05:47,340 --> 00:05:51,659
I we have a whole bunch of file formats
with cryptic little names like t3 and

99
00:05:51,659 --> 00:05:52,510
tip 1:

100
00:05:52,510 --> 00:05:56,590
have no idea where those cryptic little
names come from there may be a couple my

101
00:05:56,590 --> 00:05:57,750
colleagues in the room her

102
00:05:57,750 --> 00:06:02,699
I'll probably buttonhole afterwards to
ask why t3 but anyways that's what it is

103
00:06:02,699 --> 00:06:05,810
to 283 file contains one

104
00:06:05,810 --> 00:06:09,380
record or one line for every traceroute
that we sent

105
00:06:09,380 --> 00:06:12,460
and remember there are 200 million it is
a day

106
00:06:12,460 --> 00:06:16,340
so there's a fielder's and these are all
just tap separated field you've got the

107
00:06:16,340 --> 00:06:18,940
name at the data for are you gonna
timestamp

108
00:06:18,940 --> 00:06:22,159
ICMP because that's the protocol we use

109
00:06:22,159 --> 00:06:25,560
and then blah blah blah and then towards
the end is a

110
00:06:25,560 --> 00:06:29,580
variable is to field 22 tracert
sometimes a tracer did he hops long

111
00:06:29,580 --> 00:06:31,409
sometimes it's 15 hop song

112
00:06:31,409 --> 00:06:35,760
so this is not a completely trivial tab
separated text file there's a variable

113
00:06:35,760 --> 00:06:37,219
number records on each line

114
00:06:37,219 --> 00:06:41,450
from kinda interesting a little bit
quirky but this is the requirement to

115
00:06:41,450 --> 00:06:41,820
bed

116
00:06:41,820 --> 00:06:44,930
the data the business here's another
example

117
00:06:44,930 --> 00:06:49,159
are if you've got text files containing
200 million tracer today

118
00:06:49,159 --> 00:06:54,240
bet too much you need to reduce the day
you need to shrink it down extracted

119
00:06:54,240 --> 00:06:58,719
and one other thing one of the things we
extract from that is another format with

120
00:06:58,719 --> 00:07:00,349
another short cryptic name called

121
00:07:00,349 --> 00:07:05,860
tip 1: which is a record each record is
a daily summary of all the traces sent

122
00:07:05,860 --> 00:07:06,990
to a single target

123
00:07:06,990 --> 00:07:10,300
so again and the first field is

124
00:07:10,300 --> 00:07:14,610
the name in the data format and the
timestamp is then for the day not for a

125
00:07:14,610 --> 00:07:15,770
particular second

126
00:07:15,770 --> 00:07:19,800
there is the IP address and the target
there's a network pre-fixed its routed

127
00:07:19,800 --> 00:07:20,300
by

128
00:07:20,300 --> 00:07:24,630
there's some geolocation data to
latitude and longitude in it Tabitha got

129
00:07:24,630 --> 00:07:25,440
swallowed

130
00:07:25,440 --> 00:07:29,570
cuz that's what happens to tabs on you
put them into a presentation in a web

131
00:07:29,570 --> 00:07:30,169
browser

132
00:07:30,169 --> 00:07:33,200
others more geolocation data from

133
00:07:33,200 --> 00:07:36,409
there's information about the provider

134
00:07:36,409 --> 00:07:40,310
and at the very end there's this
peculiar dismisses lasting at the brain

135
00:07:40,310 --> 00:07:44,460
is a rather peculiar looking single
field it's really a key value mapping

136
00:07:44,460 --> 00:07:48,310
from the name of the collector where we
ran the traceroute

137
00:07:48,310 --> 00:07:52,900
mapping to the number of times we saw
this target on a given day

138
00:07:52,900 --> 00:07:55,990
on which is interesting so

139
00:07:55,990 --> 00:07:59,969
again again it's not entirely trivial
for I cuz theres

140
00:07:59,969 --> 00:08:03,190
one single field at the end which is
actually a key-value mappings

141
00:08:03,190 --> 00:08:08,190
210 keys and values in it to little bit
complex and

142
00:08:08,190 --> 00:08:12,650
it but it's an example above the the
metaphor Matt we've gotta love

143
00:08:12,650 --> 00:08:16,320
tab separated values where the first
column that every line is the data

144
00:08:16,320 --> 00:08:17,000
format

145
00:08:17,000 --> 00:08:21,510
every column has a name and type most
types are simple streams and in some

146
00:08:21,510 --> 00:08:22,099
floats

147
00:08:22,099 --> 00:08:25,320
there are some complex types in there
some complex fields

148
00:08:25,320 --> 00:08:30,710
like a comma-separated string in mapping
right the files are all utf8 encoded

149
00:08:30,710 --> 00:08:31,460
thank goodness

150
00:08:31,460 --> 00:08:34,669
very often they're stored on disk be
stepped

151
00:08:34,669 --> 00:08:39,490
not guaranteed but very often we just
want that to be handled transparently

152
00:08:39,490 --> 00:08:43,599
three have a common it's not a common
format it's a common

153
00:08:43,599 --> 00:08:48,220
metaphor Matt we have dozens of data
formats like this that are all

154
00:08:48,220 --> 00:08:52,140
fundamentally the same at a very high
level but particularly details what

155
00:08:52,140 --> 00:08:55,030
fields and what this feels mean the data
types are

156
00:08:55,030 --> 00:08:59,050
while be different so you could go down
there

157
00:08:59,050 --> 00:09:03,720
the rhodium writing a new parser for
every single format me we're all look

158
00:09:03,720 --> 00:09:06,110
very very similar to be very

159
00:09:06,110 --> 00:09:10,209
tedious repetitive duplicate code but

160
00:09:10,209 --> 00:09:13,490
who wants to do that so we have this my
break on generics

161
00:09:13,490 --> 00:09:17,069
line parser arm and there are many
subclasses there's a

162
00:09:17,069 --> 00:09:22,290
8 trivial subclass 43 files which reveal
from classwork tip 1 files in

163
00:09:22,290 --> 00:09:27,050
like 15 or 20 more trivial subclasses
now look pretty much the same cuz they

164
00:09:27,050 --> 00:09:29,040
all do pretty much the same thing

165
00:09:29,040 --> 00:09:33,050
us the requirements for staying I'm
structured data

166
00:09:33,050 --> 00:09:36,750
has to be fast most the time or at least
you have to have the ability to make it

167
00:09:36,750 --> 00:09:37,990
fast because

168
00:09:37,990 --> 00:09:42,850
parsing out a comma-separated key value
mapping can be slowing up to 100

169
00:09:42,850 --> 00:09:47,770
million up from or know that was 1.5
million anyway it's a lot

170
00:09:47,770 --> 00:09:52,610
you gotta have the ability to not parse
those fields when you don't need to

171
00:09:52,610 --> 00:09:56,360
must be flexible enough that it is
trivial to define new formats

172
00:09:56,360 --> 00:10:00,089
to the good news about this code apart
from being

173
00:10:00,089 --> 00:10:04,699
eighty percent beautiful lovely code it
met all these requirements

174
00:10:04,699 --> 00:10:08,230
sorta show you an overview of this class
as it existed before ours

175
00:10:08,230 --> 00:10:11,640
who started reading tests for got a
constructor

176
00:10:11,640 --> 00:10:14,910
mister method parse method course

177
00:10:14,910 --> 00:10:18,410
the line parser must have a parse method
and then there's a communion

178
00:10:18,410 --> 00:10:21,490
read method which strictly speaking
doesn't need to be there

179
00:10:21,490 --> 00:10:24,510
it's not a file object it is the line
parser

180
00:10:24,510 --> 00:10:29,100
by you now 99 percent a time when you're
parsing lines guess where they come from

181
00:10:29,100 --> 00:10:32,339
text files on desk so it's really handy
to have a read method

182
00:10:32,339 --> 00:10:36,360
but when you look closer that
constructor has

183
00:10:36,360 --> 00:10:40,449
rather a lot of arguments and monomers
letter after

184
00:10:40,449 --> 00:10:43,449
so like single letter verbal names are a
funny smell to me

185
00:10:43,449 --> 00:10:47,689
I'm and and I read method

186
00:10:47,689 --> 00:10:52,439
rate should just be a one-line rapper
but it actually does progress logging

187
00:10:52,439 --> 00:10:56,860
sir cash strange stuff so

188
00:10:56,860 --> 00:11:00,360
having an escape this like has not
really helpful so track

189
00:11:00,360 --> 00:11:03,550
so shown you the outline a class

190
00:11:03,550 --> 00:11:07,040
now it's time to writing unit tests for
you start will you

191
00:11:07,040 --> 00:11:11,760
got an object class right and project
class tonight wine purse I can't testing

192
00:11:11,760 --> 00:11:16,329
instant rabbit if i cant constructed so
I always start with the constructor

193
00:11:16,329 --> 00:11:20,010
and usually constructors are trivial
doesn't matter

194
00:11:20,010 --> 00:11:24,000
I still start by testing the constructor
because you can have a typo anywhere

195
00:11:24,000 --> 00:11:29,130
arm in a case like this really
constructor has 45 optional

196
00:11:29,130 --> 00:11:33,620
arguments are which all affect the
behavior of the constructor or of the

197
00:11:33,620 --> 00:11:35,390
class or both

198
00:11:35,390 --> 00:11:38,730
definitely I start was testing the
constructor

199
00:11:38,730 --> 00:11:42,130
so before I show you the test I wanna
show you some any internal structure in

200
00:11:42,130 --> 00:11:43,040
this beast

201
00:11:43,040 --> 00:11:46,329
on and and already

202
00:11:46,329 --> 00:11:49,530
something smells funny from because

203
00:11:49,530 --> 00:11:53,040
F might be a string so it's a file name

204
00:11:53,040 --> 00:11:56,130
own oh no no I might be a file or abuse
it

205
00:11:56,130 --> 00:11:59,850
file so to file or it might be in
iterable so it's

206
00:11:59,850 --> 00:12:04,270
a sequence of something am out gotta
give a game where two sequences lines

207
00:12:04,270 --> 00:12:07,850
profiles a sequence apply to but it's
also a file I'm all but sometimes that

208
00:12:07,850 --> 00:12:09,160
is nine

209
00:12:09,160 --> 00:12:14,699
far so too many kodak's hey if if you
count this up

210
00:12:14,699 --> 00:12:18,279
from the the traditional computer scienc
definition

211
00:12:18,279 --> 00:12:21,400
but I began learned before there is such
a thing as exceptions in mainstream

212
00:12:21,400 --> 00:12:22,959
programming languages so that

213
00:12:22,959 --> 00:12:26,920
every branch near you count the number
of branches in the coding you take

214
00:12:26,920 --> 00:12:30,630
22 the number of branches are like a
branch is an air frame house

215
00:12:30,630 --> 00:12:35,010
22 the number of branches match the
number possible paths through this

216
00:12:35,010 --> 00:12:38,150
function this constructor and I i think
they're in nine

217
00:12:38,150 --> 00:12:42,529
branch points here depending on how you
can try except which means they're 512

218
00:12:42,529 --> 00:12:43,250
pads

219
00:12:43,250 --> 00:12:47,630
through this code 512 ways this could be
executed depending on the different

220
00:12:47,630 --> 00:12:48,400
arguments

221
00:12:48,400 --> 00:12:52,439
so do I have to write 512 test cases god
I hope not

222
00:12:52,439 --> 00:12:55,650
arm ugg another thing

223
00:12:55,650 --> 00:12:59,720
if this class is a line parser why does
occur so much a file names

224
00:12:59,720 --> 00:13:02,939
profile names have to do with parsing
lines why is that

225
00:13:02,939 --> 00:13:07,549
remitted there so it's a line parser and
a file opener and a file reader

226
00:13:07,549 --> 00:13:10,780
and possibly a little overloaded so who

227
00:13:10,780 --> 00:13:16,199
bad rap Inc sorry about that on so it
turns out I did not have to rate 512

228
00:13:16,199 --> 00:13:18,740
test cases for this beast even though
there are

229
00:13:18,740 --> 00:13:22,510
theoretically 512 code pads I got away
with six

230
00:13:22,510 --> 00:13:27,410
which is about five more test cases that
I want to write for a constructor

231
00:13:27,410 --> 00:13:31,569
but I can't fix the design until I have
the tasks

232
00:13:31,569 --> 00:13:35,689
to Tommy I haven't broken anything so I
have to rate the six test cases

233
00:13:35,689 --> 00:13:39,449
one for the constructor with minimal
barebone arguments

234
00:13:39,449 --> 00:13:42,949
one for the constructor with the file
name another one for the constructor

235
00:13:42,949 --> 00:13:45,280
with the file name ending in be said to
you

236
00:13:45,280 --> 00:13:49,120
may have noticed it checks does the
family man with be said to you if so do

237
00:13:49,120 --> 00:13:50,299
other stuff

238
00:13:50,299 --> 00:13:54,510
arm I had there is our are you have to
pass a file object in and make sure that

239
00:13:54,510 --> 00:13:55,419
works

240
00:13:55,419 --> 00:13:59,540
and then got these out of order some our
and in there and after I implement that

241
00:13:59,540 --> 00:14:00,730
those five

242
00:14:00,730 --> 00:14:04,290
coverage told me hey you missed in
except block there is an error

243
00:14:04,290 --> 00:14:08,400
you have to take also I wrote a test
case that tickles that particular

244
00:14:08,400 --> 00:14:13,720
on exception that air conditioned to
make sure that iris hitting all the code

245
00:14:13,720 --> 00:14:16,790
arm so

246
00:14:16,790 --> 00:14:20,530
six test cases which like I said it's
about five more than I want to rate for

247
00:14:20,530 --> 00:14:22,160
a constructor constructor shoot

248
00:14:22,160 --> 00:14:25,569
constructors should be dead simple they
should just take some arguments

249
00:14:25,569 --> 00:14:29,040
store them and do nothing in the ideal
case

250
00:14:29,040 --> 00:14:32,510
are constructor should not do I know
constructors should not pass go or

251
00:14:32,510 --> 00:14:34,130
collect $200 dollars

252
00:14:34,130 --> 00:14:38,669
issue just store stuff from

253
00:14:38,669 --> 00:14:42,470
thrown start fixing that this
constructor is overloaded doing too much

254
00:14:42,470 --> 00:14:45,900
om it's a line parser it should parse
lines

255
00:14:45,900 --> 00:14:50,579
something else should open files now I
mentioned we've got some requirements

256
00:14:50,579 --> 00:14:54,250
like these files often leave on disk be
zipped

257
00:14:54,250 --> 00:14:58,079
but not always and I just want to be
transparent my application Raiders

258
00:14:58,079 --> 00:15:01,730
shouldn't have to care if the file is
busy tonight should just work

259
00:15:01,730 --> 00:15:05,020
which is why there's that specially bet
that special case for looking at the

260
00:15:05,020 --> 00:15:06,610
file name ends with be there too

261
00:15:06,610 --> 00:15:10,530
it's not there just for fun it's there
because %uh village in it legitimate

262
00:15:10,530 --> 00:15:11,760
business requirement

263
00:15:11,760 --> 00:15:16,569
just in the wrong place what we need is
a convenience function that opens files

264
00:15:16,569 --> 00:15:20,209
whether they're compressed or not right
it's just a little bit more fancy than

265
00:15:20,209 --> 00:15:22,059
the built-in open function

266
00:15:22,059 --> 00:15:26,650
and because these files are utf8 encoded
we should do something about that

267
00:15:26,650 --> 00:15:30,720
so we want a function that opens a file
eyes utf8 gives back

268
00:15:30,720 --> 00:15:34,929
Unicode objects rather than strings and
then we need composers to an

269
00:15:34,929 --> 00:15:39,419
yeah sure you could compose those two in
every single application you right

270
00:15:39,419 --> 00:15:43,689
or we could just put use at opening in
our local library and

271
00:15:43,689 --> 00:15:46,709
and the story now we've got three
convenience functions

272
00:15:46,709 --> 00:15:50,030
arm you can open files isley

273
00:15:50,030 --> 00:15:55,470
and now you don't need a line parser to
open files for you it can parse lines

274
00:15:55,470 --> 00:15:59,530
so after creating doing this reef act
during the constructor

275
00:15:59,530 --> 00:16:03,339
gets simpler arm you'll notice

276
00:16:03,339 --> 00:16:07,270
that af is no longer a strained calf is
either 9

277
00:16:07,270 --> 00:16:11,350
or a file or abusive file morning
iterable

278
00:16:11,350 --> 00:16:15,760
and really those last three cases are
really on the same writer file abuse add

279
00:16:15,760 --> 00:16:16,380
file

280
00:16:16,380 --> 00:16:20,780
herbie that file an iterable they're all
just sequences have lines so there's

281
00:16:20,780 --> 00:16:22,270
more work to clean up your butt

282
00:16:22,270 --> 00:16:25,319
who I got rid other opening files

283
00:16:25,319 --> 00:16:28,370
stuff arm that's awesome that's progress

284
00:16:28,370 --> 00:16:31,839
and back was revealed to me or that was

285
00:16:31,839 --> 00:16:36,419
the way to this restructuring was late
with me to open to me by writing tests

286
00:16:36,419 --> 00:16:40,289
in two ways number one looks

287
00:16:40,289 --> 00:16:43,510
yeah I'm forgetting how to myself a
little bit haha

288
00:16:43,510 --> 00:16:46,640
so yet before I star waxing

289
00:16:46,640 --> 00:16:50,419
eloquent look what happens to the tests
we used to have

290
00:16:50,419 --> 00:16:54,110
six test cases summer overture of the
bottom of the screen I can get rid of 3

291
00:16:54,110 --> 00:16:54,990
a.m.

292
00:16:54,990 --> 00:16:59,110
announced that having five test cases
too many I only have two

293
00:16:59,110 --> 00:17:02,329
test cases too many axle in progress

294
00:17:02,329 --> 00:17:06,689
I am constructor is simpler and shorter
and now we've got generic code

295
00:17:06,689 --> 00:17:11,530
anybody can use you not tied to generic
line parser if you need is convenient

296
00:17:11,530 --> 00:17:14,809
way to open be zipped files are utf8
files

297
00:17:14,809 --> 00:17:18,569
so not only have I made this particular
class

298
00:17:18,569 --> 00:17:23,230
more focused and concise have a better
utility library

299
00:17:23,230 --> 00:17:27,179
I have support for G zip files for free
it's not just be zip

300
00:17:27,179 --> 00:17:30,309
have less test code to maintain have cut
the number of test cases

301
00:17:30,309 --> 00:17:33,750
in half and those have you heard med
talk

302
00:17:33,750 --> 00:17:38,270
ruled now realize test code is real code
to the you have to maintain and look

303
00:17:38,270 --> 00:17:39,090
after

304
00:17:39,090 --> 00:17:43,010
anyone last test code if you can get
away with it and there if your code pads

305
00:17:43,010 --> 00:17:44,570
to worry about

306
00:17:44,570 --> 00:17:48,809
on there's lots more reef acting to do
here if I wanted to

307
00:17:48,809 --> 00:17:52,280
I'm not going to its only a 25 minute
talk after all

308
00:17:52,280 --> 00:17:56,470
arm all these things

309
00:17:56,470 --> 00:17:59,890
are more of the same the tasks there's
too many tasks

310
00:17:59,890 --> 00:18:03,480
the tester to Harry because the design
is overloaded

311
00:18:03,480 --> 00:18:07,799
when a make the design simply the tests
get smaller and simpler and

312
00:18:07,799 --> 00:18:11,490
it just this beautiful virtuous cycle or
everything gets

313
00:18:11,490 --> 00:18:15,850
better and shiny ring happier and people
go home with a smile on their face

314
00:18:15,850 --> 00:18:19,799
so what's the big deal I okay every
factor too messy code

315
00:18:19,799 --> 00:18:22,940
now whatever don't we all do that every
day

316
00:18:22,940 --> 00:18:27,130
are no know from what I've seen a most
programmers know we don't all agree

317
00:18:27,130 --> 00:18:29,090
factor messy code every day

318
00:18:29,090 --> 00:18:32,660
arm and what

319
00:18:32,660 --> 00:18:36,330
made this possible was the unit tests I
could not have done this with a writing

320
00:18:36,330 --> 00:18:37,160
unit tests

321
00:18:37,160 --> 00:18:41,590
I would not have known a needed to do
this without writing unit tests because

322
00:18:41,590 --> 00:18:44,150
the unit tests showed me

323
00:18:44,150 --> 00:18:48,320
or the writing unit tests forced me to
read the code in great detail

324
00:18:48,320 --> 00:18:51,480
in to see what's going on here

325
00:18:51,480 --> 00:18:55,230
what is it doing why is it doing it and
perhaps

326
00:18:55,230 --> 00:18:59,090
it should be refactored to this summer
this functionality is available

327
00:18:59,090 --> 00:19:02,299
through another way arm

328
00:19:02,299 --> 00:19:06,700
maybe see both the good side and bad
side this code like i said i IR

329
00:19:06,700 --> 00:19:10,120
kinda had shrunk this down to a very
cartoonish sketch this

330
00:19:10,120 --> 00:19:13,200
class eighty percent of it is really
quite

331
00:19:13,200 --> 00:19:16,870
lovely beautiful code just the
constructors doing too much now as one

332
00:19:16,870 --> 00:19:19,520
or two methods that are maybe a little
overloaded

333
00:19:19,520 --> 00:19:23,100
so in my saw the good and the bad

334
00:19:23,100 --> 00:19:26,299
an what writing the test did his the

335
00:19:26,299 --> 00:19:30,220
be desist this sounds hokey this sounds
like i'm ok

336
00:19:30,220 --> 00:19:34,730
revival tent preacher upon any actually
am revival tent preacher I'm trying to

337
00:19:34,730 --> 00:19:37,880
convert you to the religion and unit
testing it sounds hokey but

338
00:19:37,880 --> 00:19:41,720
it gave me the courage to re factor this
class arm

339
00:19:41,720 --> 00:19:45,490
this is something the unit testing
zealots like me like to boast about

340
00:19:45,490 --> 00:19:51,330
arm you can't refractor code that you
can do you don't ask because how do you

341
00:19:51,330 --> 00:19:52,200
know its

342
00:19:52,200 --> 00:19:56,659
not broken and having written these
tests I have absolutely no fear

343
00:19:56,659 --> 00:19:59,470
about tearing generic line parser to
pieces and putting it back together

344
00:19:59,470 --> 00:20:02,390
again even though I didn't write it

345
00:20:02,390 --> 00:20:07,350
on I'm riche I really why would love to
give you a happy ending to this talk but

346
00:20:07,350 --> 00:20:09,440
unfortunately I can't yet because

347
00:20:09,440 --> 00:20:13,210
we have a lot of coded uses generic line
parser

348
00:20:13,210 --> 00:20:16,500
I'm much more confident in this class
cuz now it has tests

349
00:20:16,500 --> 00:20:19,580
but all the applications that use it

350
00:20:19,580 --> 00:20:23,070
don't have tests I am afraid to re
factor them

351
00:20:23,070 --> 00:20:27,260
I know it's a trivial transformation I
know I can do it if you just give me an

352
00:20:27,260 --> 00:20:28,789
hour 3

353
00:20:28,789 --> 00:20:32,400
but I don't know if I've done it right I
might introduce a typo I may miss some

354
00:20:32,400 --> 00:20:34,929
subtle detail

355
00:20:34,929 --> 00:20:38,679
and I'm afraid to refactor because those
other things that depend on generic line

356
00:20:38,679 --> 00:20:40,539
parser don't have

357
00:20:40,539 --> 00:20:43,780
tests and the best I can do is make a
patch

358
00:20:43,780 --> 00:20:46,909
and ask the maintainer to test it for me
because

359
00:20:46,909 --> 00:20:50,340
to rate things are done unfortunately
and not

360
00:20:50,340 --> 00:20:53,980
reviews the costs have not testing from

361
00:20:53,980 --> 00:20:57,640
obviously the the been one of BS costed
not testing is

362
00:20:57,640 --> 00:21:00,820
you we'll have bugs untested code

363
00:21:00,820 --> 00:21:04,030
is buggy code I guarantee it I have
never

364
00:21:04,030 --> 00:21:08,570
written tests for a piece of code that
did not have bugs in it

365
00:21:08,570 --> 00:21:12,429
because untested code is buggy code
guaranteed

366
00:21:12,429 --> 00:21:16,309
but more subtly it leads to the fear
every factoring for every fracturing

367
00:21:16,309 --> 00:21:18,030
need to code duplication

368
00:21:18,030 --> 00:21:21,440
all code has bugs especially untested
code

369
00:21:21,440 --> 00:21:25,170
when you duplicate code you are
duplicating bucks we need to book it

370
00:21:25,170 --> 00:21:26,960
untested code you duplicate

371
00:21:26,960 --> 00:21:31,220
more bugs and another consequent
services

372
00:21:31,220 --> 00:21:34,660
insufficient code reuse which is bad
thing people have been saying for

373
00:21:34,660 --> 00:21:38,330
arm forty years or so now that we should
make reusable code

374
00:21:38,330 --> 00:21:42,430
so I don't want the last couple was lied
to get you down about the cost if not

375
00:21:42,430 --> 00:21:43,290
testing

376
00:21:43,290 --> 00:21:47,080
arm one single solitary unit ask

377
00:21:47,080 --> 00:21:52,100
is vastly better than 0 it doesn't take
a lot of effort to rate one

378
00:21:52,100 --> 00:21:55,650
and once you've written one you can
write a second wind months you've

379
00:21:55,650 --> 00:21:55,940
written

380
00:21:55,940 --> 00:21:59,330
to it starts to become addictive arm

381
00:21:59,330 --> 00:22:02,550
you unit tests will never cover
everything I

382
00:22:02,550 --> 00:22:06,260
don't try and less well just don't try

383
00:22:06,260 --> 00:22:10,820
cover almost everything and and you'll
be pleasantly surprised by how much

384
00:22:10,820 --> 00:22:14,280
have your code you can test with some
effort

385
00:22:14,280 --> 00:22:17,880
it's not free it's not trivial it is
real engineer

386
00:22:17,880 --> 00:22:21,720
requires work but its usually not even
faster cure you

387
00:22:21,720 --> 00:22:25,170
Herculean effort its work it engineering

388
00:22:25,170 --> 00:22:28,950
deal with it by the way this talk is a
Trojan horse

389
00:22:28,950 --> 00:22:32,040
I've been trying to sneak are sneakily

390
00:22:32,040 --> 00:22:35,320
lead you down the path love Extreme
Programming

391
00:22:35,320 --> 00:22:39,670
test driven development the Agile
Manifesto blah blah blah

392
00:22:39,670 --> 00:22:42,690
this is all stuff that has been said
before people have been saying these

393
00:22:42,690 --> 00:22:43,940
things for

394
00:22:43,940 --> 00:22:46,980
12 13 14 years now I first heard about

395
00:22:46,980 --> 00:22:50,450
unit testing thing in 1999

396
00:22:50,450 --> 00:22:53,890
it's not going away om

397
00:22:53,890 --> 00:23:00,430
I may just wrap up arm course writing
unit tests makes your code more correct

398
00:23:00,430 --> 00:23:05,130
this guy is big water is wet and tested
code is more correct

399
00:23:05,130 --> 00:23:08,880
it is less obvious that has to code is
more beautiful code or at least tested

400
00:23:08,880 --> 00:23:12,360
code can become more beautiful code with
a little more effort

401
00:23:12,360 --> 00:23:15,960
beautiful code is better code is more
reusable

402
00:23:15,960 --> 00:23:19,740
more maintainable more pleasant to work
with in the long run

403
00:23:19,740 --> 00:23:23,660
is less expensive even if it takes a
little more effort up front

404
00:23:23,660 --> 00:23:27,030
arm here are some links are yeah

405
00:23:27,030 --> 00:23:31,180
how to reach me who I work for and some
good books to read

406
00:23:31,180 --> 00:23:34,220
and in a book of the bottom of the
screen that was recommended to me by

407
00:23:34,220 --> 00:23:36,080
somebody else but I

408
00:23:36,080 --> 00:23:39,120
oh well I guess is lost now sorry

409
00:23:39,120 --> 00:23:42,380
on the slides are online

410
00:23:42,380 --> 00:23:47,450
and that link is also lost

411
00:23:47,450 --> 00:23:51,779
Cana

412
00:23:51,779 --> 00:23:54,960
I answer news hang on

413
00:23:54,960 --> 00:24:00,940
no spoiler %ah alright so that the other
book that was recommended yeah I know is

414
00:24:00,940 --> 00:24:03,960
busy the slides works beautifully in the
browser I developed from on

415
00:24:03,960 --> 00:24:07,389
anyway if you want more information

416
00:24:07,389 --> 00:24:14,389
you can find me later or questions we
have a few minutes for questions

417
00:24:32,160 --> 00:24:32,960
I

418
00:24:32,960 --> 00:24:36,010
yeah so I was wondering if you could
talk

419
00:24:36,010 --> 00:24:39,490
about best practices or patterns

420
00:24:39,490 --> 00:24:42,910
to avoid having to change your tests
when you re factor

421
00:24:42,910 --> 00:24:46,260
has that some are coupled to the code
itself some

422
00:24:46,260 --> 00:24:50,640
yet the best way to avoid having to
change your test when you re factors

423
00:24:50,640 --> 00:24:51,670
don't use MOX

424
00:24:51,670 --> 00:24:55,780
but the only thing worse than not using

425
00:24:55,780 --> 00:24:59,750
are going thing worse than using MOX is
not using MOX when you should use them

426
00:24:59,750 --> 00:25:02,840
so my personal approach is

427
00:25:02,840 --> 00:25:06,050
don't use MOX gratuitously

428
00:25:06,050 --> 00:25:11,550
arm this this particular example is a
beautiful shining example of

429
00:25:11,550 --> 00:25:16,380
almost purely functional code that as no
dependencies there's no need to mark

430
00:25:16,380 --> 00:25:18,940
anything I didn't have to use any marks
to

431
00:25:18,940 --> 00:25:22,330
to test this thing it's rare I mean

432
00:25:22,330 --> 00:25:26,390
usually only get that at the very the
data leaves have your dependency graph

433
00:25:26,390 --> 00:25:31,080
the utility modules up higher in the
stacking the actual application

434
00:25:31,080 --> 00:25:35,540
it's really hard to test without mocks
and much make your test more fragile

435
00:25:35,540 --> 00:25:40,010
there's no doubt about it yeah

436
00:25:40,010 --> 00:25:43,500
but he repeated the same question there

437
00:25:43,500 --> 00:25:48,630
a tragedy and I write about it s

438
00:25:48,630 --> 00:25:52,970
I do mine design and then the design
changes and some other chains on it as

439
00:25:52,970 --> 00:25:59,970
yeah that's likely is that same answer
it depends on how big the changes

440
00:26:00,160 --> 00:26:04,090
like if you rename a method yeah of
course you have to update your test

441
00:26:04,090 --> 00:26:05,710
because your test call that matter

442
00:26:05,710 --> 00:26:09,220
arm or if you

443
00:26:09,220 --> 00:26:12,620
make massive high level changes to the
way there

444
00:26:12,620 --> 00:26:15,670
olive your major objects interact with
each other

445
00:26:15,670 --> 00:26:20,990
then the tests that use those
interactions or that

446
00:26:20,990 --> 00:26:24,910
in bad those interactions and we're
going to have to change tester code

447
00:26:24,910 --> 00:26:28,800
test have to be maintained in the
engineering effort arm

448
00:26:28,800 --> 00:26:31,910
that life add

449
00:26:31,910 --> 00:26:36,050
enlightened with tasks in spite of that
life with tests

450
00:26:36,050 --> 00:26:40,600
is vastly better than life without tests
it's worth the effort it's worth the

451
00:26:40,600 --> 00:26:45,920
work very nice thank you I

452
00:26:45,920 --> 00:26:49,400
yes okay ok but we're done okay

453
00:26:49,400 --> 00:26:52,060
I'm sorry thats got a couple of

